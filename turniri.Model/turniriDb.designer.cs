#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace turniri.Model
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="turniri_real")]
	public partial class turniriDbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertVideoComment(VideoComment instance);
    partial void UpdateVideoComment(VideoComment instance);
    partial void DeleteVideoComment(VideoComment instance);
    partial void InsertBlogComment(BlogComment instance);
    partial void UpdateBlogComment(BlogComment instance);
    partial void DeleteBlogComment(BlogComment instance);
    partial void InsertFriendship(Friendship instance);
    partial void UpdateFriendship(Friendship instance);
    partial void DeleteFriendship(Friendship instance);
    partial void InsertGrade(Grade instance);
    partial void UpdateGrade(Grade instance);
    partial void DeleteGrade(Grade instance);
    partial void InsertNewType(NewType instance);
    partial void UpdateNewType(NewType instance);
    partial void DeleteNewType(NewType instance);
    partial void InsertPhotoComment(PhotoComment instance);
    partial void UpdatePhotoComment(PhotoComment instance);
    partial void DeletePhotoComment(PhotoComment instance);
    partial void InsertReputation(Reputation instance);
    partial void UpdateReputation(Reputation instance);
    partial void DeleteReputation(Reputation instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertUserComment(UserComment instance);
    partial void UpdateUserComment(UserComment instance);
    partial void DeleteUserComment(UserComment instance);
    partial void InsertUserRole(UserRole instance);
    partial void UpdateUserRole(UserRole instance);
    partial void DeleteUserRole(UserRole instance);
    partial void InsertUserVideoComment(UserVideoComment instance);
    partial void UpdateUserVideoComment(UserVideoComment instance);
    partial void DeleteUserVideoComment(UserVideoComment instance);
    partial void InsertNewComment(NewComment instance);
    partial void UpdateNewComment(NewComment instance);
    partial void DeleteNewComment(NewComment instance);
    partial void InsertSubject(Subject instance);
    partial void UpdateSubject(Subject instance);
    partial void DeleteSubject(Subject instance);
    partial void InsertUserGame(UserGame instance);
    partial void UpdateUserGame(UserGame instance);
    partial void DeleteUserGame(UserGame instance);
    partial void InsertTournamentGroup(TournamentGroup instance);
    partial void UpdateTournamentGroup(TournamentGroup instance);
    partial void DeleteTournamentGroup(TournamentGroup instance);
    partial void InsertTour(Tour instance);
    partial void UpdateTour(Tour instance);
    partial void DeleteTour(Tour instance);
    partial void InsertRating(Rating instance);
    partial void UpdateRating(Rating instance);
    partial void DeleteRating(Rating instance);
    partial void InsertComment(Comment instance);
    partial void UpdateComment(Comment instance);
    partial void DeleteComment(Comment instance);
    partial void InsertMatchComment(MatchComment instance);
    partial void UpdateMatchComment(MatchComment instance);
    partial void DeleteMatchComment(MatchComment instance);
    partial void InsertPage(Page instance);
    partial void UpdatePage(Page instance);
    partial void DeletePage(Page instance);
    partial void InsertForumLog(ForumLog instance);
    partial void UpdateForumLog(ForumLog instance);
    partial void DeleteForumLog(ForumLog instance);
    partial void InsertPollItem(PollItem instance);
    partial void UpdatePollItem(PollItem instance);
    partial void DeletePollItem(PollItem instance);
    partial void InsertPollVote(PollVote instance);
    partial void UpdatePollVote(PollVote instance);
    partial void DeletePollVote(PollVote instance);
    partial void InsertUserRoleTournament(UserRoleTournament instance);
    partial void UpdateUserRoleTournament(UserRoleTournament instance);
    partial void DeleteUserRoleTournament(UserRoleTournament instance);
    partial void InsertUserRoleGame(UserRoleGame instance);
    partial void UpdateUserRoleGame(UserRoleGame instance);
    partial void DeleteUserRoleGame(UserRoleGame instance);
    partial void InsertMail(Mail instance);
    partial void UpdateMail(Mail instance);
    partial void DeleteMail(Mail instance);
    partial void InsertDistribution(Distribution instance);
    partial void UpdateDistribution(Distribution instance);
    partial void DeleteDistribution(Distribution instance);
    partial void InsertChatMessage(ChatMessage instance);
    partial void UpdateChatMessage(ChatMessage instance);
    partial void DeleteChatMessage(ChatMessage instance);
    partial void InsertChatBannedUser(ChatBannedUser instance);
    partial void UpdateChatBannedUser(ChatBannedUser instance);
    partial void DeleteChatBannedUser(ChatBannedUser instance);
    partial void InsertRound(Round instance);
    partial void UpdateRound(Round instance);
    partial void DeleteRound(Round instance);
    partial void InsertUserTeam(UserTeam instance);
    partial void UpdateUserTeam(UserTeam instance);
    partial void DeleteUserTeam(UserTeam instance);
    partial void InsertUserAward(UserAward instance);
    partial void UpdateUserAward(UserAward instance);
    partial void DeleteUserAward(UserAward instance);
    partial void InsertParticipant(Participant instance);
    partial void UpdateParticipant(Participant instance);
    partial void DeleteParticipant(Participant instance);
    partial void InsertCamera(Camera instance);
    partial void UpdateCamera(Camera instance);
    partial void DeleteCamera(Camera instance);
    partial void InsertUserRoleGroup(UserRoleGroup instance);
    partial void UpdateUserRoleGroup(UserRoleGroup instance);
    partial void DeleteUserRoleGroup(UserRoleGroup instance);
    partial void InsertTournamentCondition(TournamentCondition instance);
    partial void UpdateTournamentCondition(TournamentCondition instance);
    partial void DeleteTournamentCondition(TournamentCondition instance);
    partial void InsertGroupRating(GroupRating instance);
    partial void UpdateGroupRating(GroupRating instance);
    partial void DeleteGroupRating(GroupRating instance);
    partial void InsertUserGroup(UserGroup instance);
    partial void UpdateUserGroup(UserGroup instance);
    partial void DeleteUserGroup(UserGroup instance);
    partial void InsertMessage(Message instance);
    partial void UpdateMessage(Message instance);
    partial void DeleteMessage(Message instance);
    partial void InsertUserGroupHistory(UserGroupHistory instance);
    partial void UpdateUserGroupHistory(UserGroupHistory instance);
    partial void DeleteUserGroupHistory(UserGroupHistory instance);
    partial void InsertTeam(Team instance);
    partial void UpdateTeam(Team instance);
    partial void DeleteTeam(Team instance);
    partial void InsertTeamReplacement(TeamReplacement instance);
    partial void UpdateTeamReplacement(TeamReplacement instance);
    partial void DeleteTeamReplacement(TeamReplacement instance);
    partial void InsertMatchRoaster(MatchRoaster instance);
    partial void UpdateMatchRoaster(MatchRoaster instance);
    partial void DeleteMatchRoaster(MatchRoaster instance);
    partial void InsertBannerStatistic(BannerStatistic instance);
    partial void UpdateBannerStatistic(BannerStatistic instance);
    partial void DeleteBannerStatistic(BannerStatistic instance);
    partial void InsertBackground(Background instance);
    partial void UpdateBackground(Background instance);
    partial void DeleteBackground(Background instance);
    partial void InsertBanner(Banner instance);
    partial void UpdateBanner(Banner instance);
    partial void DeleteBanner(Banner instance);
    partial void InsertNewLike(NewLike instance);
    partial void UpdateNewLike(NewLike instance);
    partial void DeleteNewLike(NewLike instance);
    partial void InsertBlogLike(BlogLike instance);
    partial void UpdateBlogLike(BlogLike instance);
    partial void DeleteBlogLike(BlogLike instance);
    partial void InsertPhoto(Photo instance);
    partial void UpdatePhoto(Photo instance);
    partial void DeletePhoto(Photo instance);
    partial void InsertPhotoLike(PhotoLike instance);
    partial void UpdatePhotoLike(PhotoLike instance);
    partial void DeletePhotoLike(PhotoLike instance);
    partial void InsertRatingDetail(RatingDetail instance);
    partial void UpdateRatingDetail(RatingDetail instance);
    partial void DeleteRatingDetail(RatingDetail instance);
    partial void InsertNoticeDistribution(NoticeDistribution instance);
    partial void UpdateNoticeDistribution(NoticeDistribution instance);
    partial void DeleteNoticeDistribution(NoticeDistribution instance);
    partial void InsertChatRoomLog(ChatRoomLog instance);
    partial void UpdateChatRoomLog(ChatRoomLog instance);
    partial void DeleteChatRoomLog(ChatRoomLog instance);
    partial void InsertPoll(Poll instance);
    partial void UpdatePoll(Poll instance);
    partial void DeletePoll(Poll instance);
    partial void InsertPlatform(Platform instance);
    partial void UpdatePlatform(Platform instance);
    partial void DeletePlatform(Platform instance);
    partial void InsertUserVideo(UserVideo instance);
    partial void UpdateUserVideo(UserVideo instance);
    partial void DeleteUserVideo(UserVideo instance);
    partial void InsertForum(Forum instance);
    partial void UpdateForum(Forum instance);
    partial void DeleteForum(Forum instance);
    partial void InsertPhotoAlbum(PhotoAlbum instance);
    partial void UpdatePhotoAlbum(PhotoAlbum instance);
    partial void DeletePhotoAlbum(PhotoAlbum instance);
    partial void InsertBlog(Blog instance);
    partial void UpdateBlog(Blog instance);
    partial void DeleteBlog(Blog instance);
    partial void InsertNew(New instance);
    partial void UpdateNew(New instance);
    partial void DeleteNew(New instance);
    partial void InsertVideo(Video instance);
    partial void UpdateVideo(Video instance);
    partial void DeleteVideo(Video instance);
    partial void InsertGame(Game instance);
    partial void UpdateGame(Game instance);
    partial void DeleteGame(Game instance);
    partial void InsertNewSocialPost(NewSocialPost instance);
    partial void UpdateNewSocialPost(NewSocialPost instance);
    partial void DeleteNewSocialPost(NewSocialPost instance);
    partial void InsertBlogSocialPost(BlogSocialPost instance);
    partial void UpdateBlogSocialPost(BlogSocialPost instance);
    partial void DeleteBlogSocialPost(BlogSocialPost instance);
    partial void InsertTournamentSocialPost(TournamentSocialPost instance);
    partial void UpdateTournamentSocialPost(TournamentSocialPost instance);
    partial void DeleteTournamentSocialPost(TournamentSocialPost instance);
    partial void InsertPhotoAlbumSocialPost(PhotoAlbumSocialPost instance);
    partial void UpdatePhotoAlbumSocialPost(PhotoAlbumSocialPost instance);
    partial void DeletePhotoAlbumSocialPost(PhotoAlbumSocialPost instance);
    partial void InsertSocial(Social instance);
    partial void UpdateSocial(Social instance);
    partial void DeleteSocial(Social instance);
    partial void InsertSocialPostImage(SocialPostImage instance);
    partial void UpdateSocialPostImage(SocialPostImage instance);
    partial void DeleteSocialPostImage(SocialPostImage instance);
    partial void InsertNoticeAction(NoticeAction instance);
    partial void UpdateNoticeAction(NoticeAction instance);
    partial void DeleteNoticeAction(NoticeAction instance);
    partial void InsertNotice(Notice instance);
    partial void UpdateNotice(Notice instance);
    partial void DeleteNotice(Notice instance);
    partial void InsertSocialGroup(SocialGroup instance);
    partial void UpdateSocialGroup(SocialGroup instance);
    partial void DeleteSocialGroup(SocialGroup instance);
    partial void InsertSocialPost(SocialPost instance);
    partial void UpdateSocialPost(SocialPost instance);
    partial void DeleteSocialPost(SocialPost instance);
    partial void InsertVideoSocialPost(VideoSocialPost instance);
    partial void UpdateVideoSocialPost(VideoSocialPost instance);
    partial void DeleteVideoSocialPost(VideoSocialPost instance);
    partial void InsertChatRoom(ChatRoom instance);
    partial void UpdateChatRoom(ChatRoom instance);
    partial void DeleteChatRoom(ChatRoom instance);
    partial void InsertForumMessage(ForumMessage instance);
    partial void UpdateForumMessage(ForumMessage instance);
    partial void DeleteForumMessage(ForumMessage instance);
    partial void InsertMainCamera(MainCamera instance);
    partial void UpdateMainCamera(MainCamera instance);
    partial void DeleteMainCamera(MainCamera instance);
    partial void InsertGroup(Group instance);
    partial void UpdateGroup(Group instance);
    partial void DeleteGroup(Group instance);
    partial void InsertMoneyFee(MoneyFee instance);
    partial void UpdateMoneyFee(MoneyFee instance);
    partial void DeleteMoneyFee(MoneyFee instance);
    partial void InsertAward(Award instance);
    partial void UpdateAward(Award instance);
    partial void DeleteAward(Award instance);
    partial void InsertBalanceSiteMoney(BalanceSiteMoney instance);
    partial void UpdateBalanceSiteMoney(BalanceSiteMoney instance);
    partial void DeleteBalanceSiteMoney(BalanceSiteMoney instance);
    partial void InsertMoneyWithdraw(MoneyWithdraw instance);
    partial void UpdateMoneyWithdraw(MoneyWithdraw instance);
    partial void DeleteMoneyWithdraw(MoneyWithdraw instance);
    partial void InsertBannedWord(BannedWord instance);
    partial void UpdateBannedWord(BannedWord instance);
    partial void DeleteBannedWord(BannedWord instance);
    partial void InsertPromoCode(PromoCode instance);
    partial void UpdatePromoCode(PromoCode instance);
    partial void DeletePromoCode(PromoCode instance);
    partial void InsertPromoAction(PromoAction instance);
    partial void UpdatePromoAction(PromoAction instance);
    partial void DeletePromoAction(PromoAction instance);
    partial void InsertGlobalUnique(GlobalUnique instance);
    partial void UpdateGlobalUnique(GlobalUnique instance);
    partial void DeleteGlobalUnique(GlobalUnique instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertMoneyDetail(MoneyDetail instance);
    partial void UpdateMoneyDetail(MoneyDetail instance);
    partial void DeleteMoneyDetail(MoneyDetail instance);
    partial void InsertRecharge(Recharge instance);
    partial void UpdateRecharge(Recharge instance);
    partial void DeleteRecharge(Recharge instance);
    partial void InsertCart(Cart instance);
    partial void UpdateCart(Cart instance);
    partial void DeleteCart(Cart instance);
    partial void InsertProductCatalog(ProductCatalog instance);
    partial void UpdateProductCatalog(ProductCatalog instance);
    partial void DeleteProductCatalog(ProductCatalog instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertProductImage(ProductImage instance);
    partial void UpdateProductImage(ProductImage instance);
    partial void DeleteProductImage(ProductImage instance);
    partial void InsertProductReview(ProductReview instance);
    partial void UpdateProductReview(ProductReview instance);
    partial void DeleteProductReview(ProductReview instance);
    partial void InsertCatalog(Catalog instance);
    partial void UpdateCatalog(Catalog instance);
    partial void DeleteCatalog(Catalog instance);
    partial void InsertVendor(Vendor instance);
    partial void UpdateVendor(Vendor instance);
    partial void DeleteVendor(Vendor instance);
    partial void InsertProductVariation(ProductVariation instance);
    partial void UpdateProductVariation(ProductVariation instance);
    partial void DeleteProductVariation(ProductVariation instance);
    partial void InsertProductVideo(ProductVideo instance);
    partial void UpdateProductVideo(ProductVideo instance);
    partial void DeleteProductVideo(ProductVideo instance);
    partial void InsertProductCode(ProductCode instance);
    partial void UpdateProductCode(ProductCode instance);
    partial void DeleteProductCode(ProductCode instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    partial void InsertSimilarProduct(SimilarProduct instance);
    partial void UpdateSimilarProduct(SimilarProduct instance);
    partial void DeleteSimilarProduct(SimilarProduct instance);
    partial void InsertCartProduct(CartProduct instance);
    partial void UpdateCartProduct(CartProduct instance);
    partial void DeleteCartProduct(CartProduct instance);
    partial void InsertProductPrice(ProductPrice instance);
    partial void UpdateProductPrice(ProductPrice instance);
    partial void DeleteProductPrice(ProductPrice instance);
    partial void InsertMoneyNotify(MoneyNotify instance);
    partial void UpdateMoneyNotify(MoneyNotify instance);
    partial void DeleteMoneyNotify(MoneyNotify instance);
    partial void InsertMatch(Match instance);
    partial void UpdateMatch(Match instance);
    partial void DeleteMatch(Match instance);
    partial void InsertTournament(Tournament instance);
    partial void UpdateTournament(Tournament instance);
    partial void DeleteTournament(Tournament instance);
    partial void InsertLeagueLevel(LeagueLevel instance);
    partial void UpdateLeagueLevel(LeagueLevel instance);
    partial void DeleteLeagueLevel(LeagueLevel instance);
    partial void InsertLeagueParticipant(LeagueParticipant instance);
    partial void UpdateLeagueParticipant(LeagueParticipant instance);
    partial void DeleteLeagueParticipant(LeagueParticipant instance);
    partial void InsertLeagueSeason(LeagueSeason instance);
    partial void UpdateLeagueSeason(LeagueSeason instance);
    partial void DeleteLeagueSeason(LeagueSeason instance);
    partial void InsertLeague(League instance);
    partial void UpdateLeague(League instance);
    partial void DeleteLeague(League instance);
    #endregion
		
		public turniriDbDataContext() : 
				base(global::turniri.Model.Properties.Settings.Default.turniri_realConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public turniriDbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public turniriDbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public turniriDbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public turniriDbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<VideoComment> VideoComments
		{
			get
			{
				return this.GetTable<VideoComment>();
			}
		}
		
		public System.Data.Linq.Table<BlogComment> BlogComments
		{
			get
			{
				return this.GetTable<BlogComment>();
			}
		}
		
		public System.Data.Linq.Table<Friendship> Friendships
		{
			get
			{
				return this.GetTable<Friendship>();
			}
		}
		
		public System.Data.Linq.Table<Grade> Grades
		{
			get
			{
				return this.GetTable<Grade>();
			}
		}
		
		public System.Data.Linq.Table<NewType> NewTypes
		{
			get
			{
				return this.GetTable<NewType>();
			}
		}
		
		public System.Data.Linq.Table<PhotoComment> PhotoComments
		{
			get
			{
				return this.GetTable<PhotoComment>();
			}
		}
		
		public System.Data.Linq.Table<Reputation> Reputations
		{
			get
			{
				return this.GetTable<Reputation>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<UserComment> UserComments
		{
			get
			{
				return this.GetTable<UserComment>();
			}
		}
		
		public System.Data.Linq.Table<UserRole> UserRoles
		{
			get
			{
				return this.GetTable<UserRole>();
			}
		}
		
		public System.Data.Linq.Table<UserVideoComment> UserVideoComments
		{
			get
			{
				return this.GetTable<UserVideoComment>();
			}
		}
		
		public System.Data.Linq.Table<NewComment> NewComments
		{
			get
			{
				return this.GetTable<NewComment>();
			}
		}
		
		public System.Data.Linq.Table<Subject> Subjects
		{
			get
			{
				return this.GetTable<Subject>();
			}
		}
		
		public System.Data.Linq.Table<UserGame> UserGames
		{
			get
			{
				return this.GetTable<UserGame>();
			}
		}
		
		public System.Data.Linq.Table<TournamentGroup> TournamentGroups
		{
			get
			{
				return this.GetTable<TournamentGroup>();
			}
		}
		
		public System.Data.Linq.Table<Tour> Tours
		{
			get
			{
				return this.GetTable<Tour>();
			}
		}
		
		public System.Data.Linq.Table<Rating> Ratings
		{
			get
			{
				return this.GetTable<Rating>();
			}
		}
		
		public System.Data.Linq.Table<Comment> Comments
		{
			get
			{
				return this.GetTable<Comment>();
			}
		}
		
		public System.Data.Linq.Table<MatchComment> MatchComments
		{
			get
			{
				return this.GetTable<MatchComment>();
			}
		}
		
		public System.Data.Linq.Table<Page> Pages
		{
			get
			{
				return this.GetTable<Page>();
			}
		}
		
		public System.Data.Linq.Table<ForumLog> ForumLogs
		{
			get
			{
				return this.GetTable<ForumLog>();
			}
		}
		
		public System.Data.Linq.Table<PollItem> PollItems
		{
			get
			{
				return this.GetTable<PollItem>();
			}
		}
		
		public System.Data.Linq.Table<PollVote> PollVotes
		{
			get
			{
				return this.GetTable<PollVote>();
			}
		}
		
		public System.Data.Linq.Table<UserRoleTournament> UserRoleTournaments
		{
			get
			{
				return this.GetTable<UserRoleTournament>();
			}
		}
		
		public System.Data.Linq.Table<UserRoleGame> UserRoleGames
		{
			get
			{
				return this.GetTable<UserRoleGame>();
			}
		}
		
		public System.Data.Linq.Table<Mail> Mails
		{
			get
			{
				return this.GetTable<Mail>();
			}
		}
		
		public System.Data.Linq.Table<Distribution> Distributions
		{
			get
			{
				return this.GetTable<Distribution>();
			}
		}
		
		public System.Data.Linq.Table<ChatMessage> ChatMessages
		{
			get
			{
				return this.GetTable<ChatMessage>();
			}
		}
		
		public System.Data.Linq.Table<ChatBannedUser> ChatBannedUsers
		{
			get
			{
				return this.GetTable<ChatBannedUser>();
			}
		}
		
		public System.Data.Linq.Table<Round> Rounds
		{
			get
			{
				return this.GetTable<Round>();
			}
		}
		
		public System.Data.Linq.Table<UserTeam> UserTeams
		{
			get
			{
				return this.GetTable<UserTeam>();
			}
		}
		
		public System.Data.Linq.Table<UserAward> UserAwards
		{
			get
			{
				return this.GetTable<UserAward>();
			}
		}
		
		public System.Data.Linq.Table<Participant> Participants
		{
			get
			{
				return this.GetTable<Participant>();
			}
		}
		
		public System.Data.Linq.Table<Camera> Cameras
		{
			get
			{
				return this.GetTable<Camera>();
			}
		}
		
		public System.Data.Linq.Table<UserRoleGroup> UserRoleGroups
		{
			get
			{
				return this.GetTable<UserRoleGroup>();
			}
		}
		
		public System.Data.Linq.Table<TournamentCondition> TournamentConditions
		{
			get
			{
				return this.GetTable<TournamentCondition>();
			}
		}
		
		public System.Data.Linq.Table<GroupRating> GroupRatings
		{
			get
			{
				return this.GetTable<GroupRating>();
			}
		}
		
		public System.Data.Linq.Table<UserGroup> UserGroups
		{
			get
			{
				return this.GetTable<UserGroup>();
			}
		}
		
		public System.Data.Linq.Table<Message> Messages
		{
			get
			{
				return this.GetTable<Message>();
			}
		}
		
		public System.Data.Linq.Table<UserGroupHistory> UserGroupHistories
		{
			get
			{
				return this.GetTable<UserGroupHistory>();
			}
		}
		
		public System.Data.Linq.Table<Team> Teams
		{
			get
			{
				return this.GetTable<Team>();
			}
		}
		
		public System.Data.Linq.Table<TeamReplacement> TeamReplacements
		{
			get
			{
				return this.GetTable<TeamReplacement>();
			}
		}
		
		public System.Data.Linq.Table<MatchRoaster> MatchRoasters
		{
			get
			{
				return this.GetTable<MatchRoaster>();
			}
		}
		
		public System.Data.Linq.Table<BannerStatistic> BannerStatistics
		{
			get
			{
				return this.GetTable<BannerStatistic>();
			}
		}
		
		public System.Data.Linq.Table<Background> Backgrounds
		{
			get
			{
				return this.GetTable<Background>();
			}
		}
		
		public System.Data.Linq.Table<Banner> Banners
		{
			get
			{
				return this.GetTable<Banner>();
			}
		}
		
		public System.Data.Linq.Table<NewLike> NewLikes
		{
			get
			{
				return this.GetTable<NewLike>();
			}
		}
		
		public System.Data.Linq.Table<BlogLike> BlogLikes
		{
			get
			{
				return this.GetTable<BlogLike>();
			}
		}
		
		public System.Data.Linq.Table<Photo> Photos
		{
			get
			{
				return this.GetTable<Photo>();
			}
		}
		
		public System.Data.Linq.Table<PhotoLike> PhotoLikes
		{
			get
			{
				return this.GetTable<PhotoLike>();
			}
		}
		
		public System.Data.Linq.Table<RatingDetail> RatingDetails
		{
			get
			{
				return this.GetTable<RatingDetail>();
			}
		}
		
		public System.Data.Linq.Table<NoticeDistribution> NoticeDistributions
		{
			get
			{
				return this.GetTable<NoticeDistribution>();
			}
		}
		
		public System.Data.Linq.Table<ChatRoomLog> ChatRoomLogs
		{
			get
			{
				return this.GetTable<ChatRoomLog>();
			}
		}
		
		public System.Data.Linq.Table<Poll> Polls
		{
			get
			{
				return this.GetTable<Poll>();
			}
		}
		
		public System.Data.Linq.Table<Platform> Platforms
		{
			get
			{
				return this.GetTable<Platform>();
			}
		}
		
		public System.Data.Linq.Table<UserVideo> UserVideos
		{
			get
			{
				return this.GetTable<UserVideo>();
			}
		}
		
		public System.Data.Linq.Table<Forum> Forums
		{
			get
			{
				return this.GetTable<Forum>();
			}
		}
		
		public System.Data.Linq.Table<PhotoAlbum> PhotoAlbums
		{
			get
			{
				return this.GetTable<PhotoAlbum>();
			}
		}
		
		public System.Data.Linq.Table<Blog> Blogs
		{
			get
			{
				return this.GetTable<Blog>();
			}
		}
		
		public System.Data.Linq.Table<New> News
		{
			get
			{
				return this.GetTable<New>();
			}
		}
		
		public System.Data.Linq.Table<Video> Videos
		{
			get
			{
				return this.GetTable<Video>();
			}
		}
		
		public System.Data.Linq.Table<Game> Games
		{
			get
			{
				return this.GetTable<Game>();
			}
		}
		
		public System.Data.Linq.Table<NewSocialPost> NewSocialPosts
		{
			get
			{
				return this.GetTable<NewSocialPost>();
			}
		}
		
		public System.Data.Linq.Table<BlogSocialPost> BlogSocialPosts
		{
			get
			{
				return this.GetTable<BlogSocialPost>();
			}
		}
		
		public System.Data.Linq.Table<TournamentSocialPost> TournamentSocialPosts
		{
			get
			{
				return this.GetTable<TournamentSocialPost>();
			}
		}
		
		public System.Data.Linq.Table<PhotoAlbumSocialPost> PhotoAlbumSocialPosts
		{
			get
			{
				return this.GetTable<PhotoAlbumSocialPost>();
			}
		}
		
		public System.Data.Linq.Table<Social> Socials
		{
			get
			{
				return this.GetTable<Social>();
			}
		}
		
		public System.Data.Linq.Table<SocialPostImage> SocialPostImages
		{
			get
			{
				return this.GetTable<SocialPostImage>();
			}
		}
		
		public System.Data.Linq.Table<NoticeAction> NoticeActions
		{
			get
			{
				return this.GetTable<NoticeAction>();
			}
		}
		
		public System.Data.Linq.Table<Notice> Notices
		{
			get
			{
				return this.GetTable<Notice>();
			}
		}
		
		public System.Data.Linq.Table<SocialGroup> SocialGroups
		{
			get
			{
				return this.GetTable<SocialGroup>();
			}
		}
		
		public System.Data.Linq.Table<SocialPost> SocialPosts
		{
			get
			{
				return this.GetTable<SocialPost>();
			}
		}
		
		public System.Data.Linq.Table<VideoSocialPost> VideoSocialPosts
		{
			get
			{
				return this.GetTable<VideoSocialPost>();
			}
		}
		
		public System.Data.Linq.Table<ChatRoom> ChatRooms
		{
			get
			{
				return this.GetTable<ChatRoom>();
			}
		}
		
		public System.Data.Linq.Table<ForumMessage> ForumMessages
		{
			get
			{
				return this.GetTable<ForumMessage>();
			}
		}
		
		public System.Data.Linq.Table<MainCamera> MainCameras
		{
			get
			{
				return this.GetTable<MainCamera>();
			}
		}
		
		public System.Data.Linq.Table<Group> Groups
		{
			get
			{
				return this.GetTable<Group>();
			}
		}
		
		public System.Data.Linq.Table<MoneyFee> MoneyFees
		{
			get
			{
				return this.GetTable<MoneyFee>();
			}
		}
		
		public System.Data.Linq.Table<Award> Awards
		{
			get
			{
				return this.GetTable<Award>();
			}
		}
		
		public System.Data.Linq.Table<BalanceSiteMoney> BalanceSiteMoneys
		{
			get
			{
				return this.GetTable<BalanceSiteMoney>();
			}
		}
		
		public System.Data.Linq.Table<MoneyWithdraw> MoneyWithdraws
		{
			get
			{
				return this.GetTable<MoneyWithdraw>();
			}
		}
		
		public System.Data.Linq.Table<BannedWord> BannedWords
		{
			get
			{
				return this.GetTable<BannedWord>();
			}
		}
		
		public System.Data.Linq.Table<PromoCode> PromoCodes
		{
			get
			{
				return this.GetTable<PromoCode>();
			}
		}
		
		public System.Data.Linq.Table<PromoAction> PromoActions
		{
			get
			{
				return this.GetTable<PromoAction>();
			}
		}
		
		public System.Data.Linq.Table<GlobalUnique> GlobalUniques
		{
			get
			{
				return this.GetTable<GlobalUnique>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<MoneyDetail> MoneyDetails
		{
			get
			{
				return this.GetTable<MoneyDetail>();
			}
		}
		
		public System.Data.Linq.Table<Recharge> Recharges
		{
			get
			{
				return this.GetTable<Recharge>();
			}
		}
		
		public System.Data.Linq.Table<Cart> Carts
		{
			get
			{
				return this.GetTable<Cart>();
			}
		}
		
		public System.Data.Linq.Table<ProductCatalog> ProductCatalogs
		{
			get
			{
				return this.GetTable<ProductCatalog>();
			}
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<ProductImage> ProductImages
		{
			get
			{
				return this.GetTable<ProductImage>();
			}
		}
		
		public System.Data.Linq.Table<ProductReview> ProductReviews
		{
			get
			{
				return this.GetTable<ProductReview>();
			}
		}
		
		public System.Data.Linq.Table<Catalog> Catalogs
		{
			get
			{
				return this.GetTable<Catalog>();
			}
		}
		
		public System.Data.Linq.Table<Vendor> Vendors
		{
			get
			{
				return this.GetTable<Vendor>();
			}
		}
		
		public System.Data.Linq.Table<ProductVariation> ProductVariations
		{
			get
			{
				return this.GetTable<ProductVariation>();
			}
		}
		
		public System.Data.Linq.Table<ProductVideo> ProductVideos
		{
			get
			{
				return this.GetTable<ProductVideo>();
			}
		}
		
		public System.Data.Linq.Table<ProductCode> ProductCodes
		{
			get
			{
				return this.GetTable<ProductCode>();
			}
		}
		
		public System.Data.Linq.Table<Product> Products
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
		
		public System.Data.Linq.Table<SimilarProduct> SimilarProducts
		{
			get
			{
				return this.GetTable<SimilarProduct>();
			}
		}
		
		public System.Data.Linq.Table<CartProduct> CartProducts
		{
			get
			{
				return this.GetTable<CartProduct>();
			}
		}
		
		public System.Data.Linq.Table<ProductPrice> ProductPrices
		{
			get
			{
				return this.GetTable<ProductPrice>();
			}
		}
		
		public System.Data.Linq.Table<MoneyNotify> MoneyNotifies
		{
			get
			{
				return this.GetTable<MoneyNotify>();
			}
		}
		
		public System.Data.Linq.Table<Match> Matches
		{
			get
			{
				return this.GetTable<Match>();
			}
		}
		
		public System.Data.Linq.Table<Tournament> Tournaments
		{
			get
			{
				return this.GetTable<Tournament>();
			}
		}
		
		public System.Data.Linq.Table<LeagueLevel> LeagueLevels
		{
			get
			{
				return this.GetTable<LeagueLevel>();
			}
		}
		
		public System.Data.Linq.Table<LeagueParticipant> LeagueParticipants
		{
			get
			{
				return this.GetTable<LeagueParticipant>();
			}
		}
		
		public System.Data.Linq.Table<LeagueSeason> LeagueSeasons
		{
			get
			{
				return this.GetTable<LeagueSeason>();
			}
		}
		
		public System.Data.Linq.Table<League> Leagues
		{
			get
			{
				return this.GetTable<League>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VideoComment")]
	public partial class VideoComment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _VideoID;
		
		private int _CommentID;
		
		private EntityRef<Comment> _Comment;
		
		private EntityRef<Video> _Video;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnVideoIDChanging(int value);
    partial void OnVideoIDChanged();
    partial void OnCommentIDChanging(int value);
    partial void OnCommentIDChanged();
    #endregion
		
		public VideoComment()
		{
			this._Comment = default(EntityRef<Comment>);
			this._Video = default(EntityRef<Video>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VideoID", DbType="Int NOT NULL")]
		public int VideoID
		{
			get
			{
				return this._VideoID;
			}
			set
			{
				if ((this._VideoID != value))
				{
					if (this._Video.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVideoIDChanging(value);
					this.SendPropertyChanging();
					this._VideoID = value;
					this.SendPropertyChanged("VideoID");
					this.OnVideoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentID", DbType="Int NOT NULL")]
		public int CommentID
		{
			get
			{
				return this._CommentID;
			}
			set
			{
				if ((this._CommentID != value))
				{
					if (this._Comment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommentIDChanging(value);
					this.SendPropertyChanging();
					this._CommentID = value;
					this.SendPropertyChanged("CommentID");
					this.OnCommentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comment_VideoComment", Storage="_Comment", ThisKey="CommentID", OtherKey="ID", IsForeignKey=true)]
		public Comment Comment
		{
			get
			{
				return this._Comment.Entity;
			}
			set
			{
				Comment previousValue = this._Comment.Entity;
				if (((previousValue != value) 
							|| (this._Comment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Comment.Entity = null;
						previousValue.VideoComments.Remove(this);
					}
					this._Comment.Entity = value;
					if ((value != null))
					{
						value.VideoComments.Add(this);
						this._CommentID = value.ID;
					}
					else
					{
						this._CommentID = default(int);
					}
					this.SendPropertyChanged("Comment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Video_VideoComment", Storage="_Video", ThisKey="VideoID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Video Video
		{
			get
			{
				return this._Video.Entity;
			}
			set
			{
				Video previousValue = this._Video.Entity;
				if (((previousValue != value) 
							|| (this._Video.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Video.Entity = null;
						previousValue.VideoComments.Remove(this);
					}
					this._Video.Entity = value;
					if ((value != null))
					{
						value.VideoComments.Add(this);
						this._VideoID = value.ID;
					}
					else
					{
						this._VideoID = default(int);
					}
					this.SendPropertyChanged("Video");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BlogComment")]
	public partial class BlogComment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _BlogID;
		
		private int _CommentID;
		
		private EntityRef<Comment> _Comment;
		
		private EntityRef<Blog> _Blog;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnBlogIDChanging(int value);
    partial void OnBlogIDChanged();
    partial void OnCommentIDChanging(int value);
    partial void OnCommentIDChanged();
    #endregion
		
		public BlogComment()
		{
			this._Comment = default(EntityRef<Comment>);
			this._Blog = default(EntityRef<Blog>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlogID", DbType="Int NOT NULL")]
		public int BlogID
		{
			get
			{
				return this._BlogID;
			}
			set
			{
				if ((this._BlogID != value))
				{
					if (this._Blog.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBlogIDChanging(value);
					this.SendPropertyChanging();
					this._BlogID = value;
					this.SendPropertyChanged("BlogID");
					this.OnBlogIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentID", DbType="Int NOT NULL")]
		public int CommentID
		{
			get
			{
				return this._CommentID;
			}
			set
			{
				if ((this._CommentID != value))
				{
					if (this._Comment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommentIDChanging(value);
					this.SendPropertyChanging();
					this._CommentID = value;
					this.SendPropertyChanged("CommentID");
					this.OnCommentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comment_BlogComment", Storage="_Comment", ThisKey="CommentID", OtherKey="ID", IsForeignKey=true)]
		public Comment Comment
		{
			get
			{
				return this._Comment.Entity;
			}
			set
			{
				Comment previousValue = this._Comment.Entity;
				if (((previousValue != value) 
							|| (this._Comment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Comment.Entity = null;
						previousValue.BlogComments.Remove(this);
					}
					this._Comment.Entity = value;
					if ((value != null))
					{
						value.BlogComments.Add(this);
						this._CommentID = value.ID;
					}
					else
					{
						this._CommentID = default(int);
					}
					this.SendPropertyChanged("Comment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Blog_BlogComment", Storage="_Blog", ThisKey="BlogID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Blog Blog
		{
			get
			{
				return this._Blog.Entity;
			}
			set
			{
				Blog previousValue = this._Blog.Entity;
				if (((previousValue != value) 
							|| (this._Blog.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Blog.Entity = null;
						previousValue.BlogComments.Remove(this);
					}
					this._Blog.Entity = value;
					if ((value != null))
					{
						value.BlogComments.Add(this);
						this._BlogID = value.ID;
					}
					else
					{
						this._BlogID = default(int);
					}
					this.SendPropertyChanged("Blog");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Friendship")]
	public partial class Friendship : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _SenderID;
		
		private int _ReceiverID;
		
		private bool _Approved;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSenderIDChanging(int value);
    partial void OnSenderIDChanged();
    partial void OnReceiverIDChanging(int value);
    partial void OnReceiverIDChanged();
    partial void OnApprovedChanging(bool value);
    partial void OnApprovedChanged();
    #endregion
		
		public Friendship()
		{
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SenderID", DbType="Int NOT NULL")]
		public int SenderID
		{
			get
			{
				return this._SenderID;
			}
			set
			{
				if ((this._SenderID != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSenderIDChanging(value);
					this.SendPropertyChanging();
					this._SenderID = value;
					this.SendPropertyChanged("SenderID");
					this.OnSenderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceiverID", DbType="Int NOT NULL")]
		public int ReceiverID
		{
			get
			{
				return this._ReceiverID;
			}
			set
			{
				if ((this._ReceiverID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReceiverIDChanging(value);
					this.SendPropertyChanging();
					this._ReceiverID = value;
					this.SendPropertyChanged("ReceiverID");
					this.OnReceiverIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Approved", DbType="Bit NOT NULL")]
		public bool Approved
		{
			get
			{
				return this._Approved;
			}
			set
			{
				if ((this._Approved != value))
				{
					this.OnApprovedChanging(value);
					this.SendPropertyChanging();
					this._Approved = value;
					this.SendPropertyChanged("Approved");
					this.OnApprovedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Friendship", Storage="_User", ThisKey="ReceiverID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Friendships.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Friendships.Add(this);
						this._ReceiverID = value.ID;
					}
					else
					{
						this._ReceiverID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Friendship1", Storage="_User1", ThisKey="SenderID", OtherKey="ID", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.Friendships1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.Friendships1.Add(this);
						this._SenderID = value.ID;
					}
					else
					{
						this._SenderID = default(int);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Grade")]
	public partial class Grade : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _SenderID;
		
		private int _ReceiverID;
		
		private int _Grade1;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSenderIDChanging(int value);
    partial void OnSenderIDChanged();
    partial void OnReceiverIDChanging(int value);
    partial void OnReceiverIDChanged();
    partial void OnGrade1Changing(int value);
    partial void OnGrade1Changed();
    #endregion
		
		public Grade()
		{
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SenderID", DbType="Int NOT NULL")]
		public int SenderID
		{
			get
			{
				return this._SenderID;
			}
			set
			{
				if ((this._SenderID != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSenderIDChanging(value);
					this.SendPropertyChanging();
					this._SenderID = value;
					this.SendPropertyChanged("SenderID");
					this.OnSenderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceiverID", DbType="Int NOT NULL")]
		public int ReceiverID
		{
			get
			{
				return this._ReceiverID;
			}
			set
			{
				if ((this._ReceiverID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReceiverIDChanging(value);
					this.SendPropertyChanging();
					this._ReceiverID = value;
					this.SendPropertyChanged("ReceiverID");
					this.OnReceiverIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Grade", Storage="_Grade1", DbType="Int NOT NULL")]
		public int Grade1
		{
			get
			{
				return this._Grade1;
			}
			set
			{
				if ((this._Grade1 != value))
				{
					this.OnGrade1Changing(value);
					this.SendPropertyChanging();
					this._Grade1 = value;
					this.SendPropertyChanged("Grade1");
					this.OnGrade1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Grade", Storage="_User", ThisKey="ReceiverID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Grades.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Grades.Add(this);
						this._ReceiverID = value.ID;
					}
					else
					{
						this._ReceiverID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Grade1", Storage="_User1", ThisKey="SenderID", OtherKey="ID", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.Grades1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.Grades1.Add(this);
						this._SenderID = value.ID;
					}
					else
					{
						this._SenderID = default(int);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NewType")]
	public partial class NewType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<New> _News;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public NewType()
		{
			this._News = new EntitySet<New>(new Action<New>(this.attach_News), new Action<New>(this.detach_News));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NewType_New", Storage="_News", ThisKey="ID", OtherKey="NewTypeID")]
		public EntitySet<New> News
		{
			get
			{
				return this._News;
			}
			set
			{
				this._News.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_News(New entity)
		{
			this.SendPropertyChanging();
			entity.NewType = this;
		}
		
		private void detach_News(New entity)
		{
			this.SendPropertyChanging();
			entity.NewType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PhotoComment")]
	public partial class PhotoComment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _PhotoID;
		
		private int _CommentID;
		
		private EntityRef<Comment> _Comment;
		
		private EntityRef<Photo> _Photo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPhotoIDChanging(int value);
    partial void OnPhotoIDChanged();
    partial void OnCommentIDChanging(int value);
    partial void OnCommentIDChanged();
    #endregion
		
		public PhotoComment()
		{
			this._Comment = default(EntityRef<Comment>);
			this._Photo = default(EntityRef<Photo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhotoID", DbType="Int NOT NULL")]
		public int PhotoID
		{
			get
			{
				return this._PhotoID;
			}
			set
			{
				if ((this._PhotoID != value))
				{
					if (this._Photo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhotoIDChanging(value);
					this.SendPropertyChanging();
					this._PhotoID = value;
					this.SendPropertyChanged("PhotoID");
					this.OnPhotoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentID", DbType="Int NOT NULL")]
		public int CommentID
		{
			get
			{
				return this._CommentID;
			}
			set
			{
				if ((this._CommentID != value))
				{
					if (this._Comment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommentIDChanging(value);
					this.SendPropertyChanging();
					this._CommentID = value;
					this.SendPropertyChanged("CommentID");
					this.OnCommentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comment_PhotoComment", Storage="_Comment", ThisKey="CommentID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Comment Comment
		{
			get
			{
				return this._Comment.Entity;
			}
			set
			{
				Comment previousValue = this._Comment.Entity;
				if (((previousValue != value) 
							|| (this._Comment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Comment.Entity = null;
						previousValue.PhotoComments.Remove(this);
					}
					this._Comment.Entity = value;
					if ((value != null))
					{
						value.PhotoComments.Add(this);
						this._CommentID = value.ID;
					}
					else
					{
						this._CommentID = default(int);
					}
					this.SendPropertyChanged("Comment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photo_PhotoComment", Storage="_Photo", ThisKey="PhotoID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Photo Photo
		{
			get
			{
				return this._Photo.Entity;
			}
			set
			{
				Photo previousValue = this._Photo.Entity;
				if (((previousValue != value) 
							|| (this._Photo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Photo.Entity = null;
						previousValue.PhotoComments.Remove(this);
					}
					this._Photo.Entity = value;
					if ((value != null))
					{
						value.PhotoComments.Add(this);
						this._PhotoID = value.ID;
					}
					else
					{
						this._PhotoID = default(int);
					}
					this.SendPropertyChanged("Photo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Reputation")]
	public partial class Reputation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _SenderID;
		
		private int _ReceiverID;
		
		private int _ReputationType;
		
		private int _Mark;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSenderIDChanging(int value);
    partial void OnSenderIDChanged();
    partial void OnReceiverIDChanging(int value);
    partial void OnReceiverIDChanged();
    partial void OnReputationTypeChanging(int value);
    partial void OnReputationTypeChanged();
    partial void OnMarkChanging(int value);
    partial void OnMarkChanged();
    #endregion
		
		public Reputation()
		{
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SenderID", DbType="Int NOT NULL")]
		public int SenderID
		{
			get
			{
				return this._SenderID;
			}
			set
			{
				if ((this._SenderID != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSenderIDChanging(value);
					this.SendPropertyChanging();
					this._SenderID = value;
					this.SendPropertyChanged("SenderID");
					this.OnSenderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceiverID", DbType="Int NOT NULL")]
		public int ReceiverID
		{
			get
			{
				return this._ReceiverID;
			}
			set
			{
				if ((this._ReceiverID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReceiverIDChanging(value);
					this.SendPropertyChanging();
					this._ReceiverID = value;
					this.SendPropertyChanged("ReceiverID");
					this.OnReceiverIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReputationType", DbType="Int NOT NULL")]
		public int ReputationType
		{
			get
			{
				return this._ReputationType;
			}
			set
			{
				if ((this._ReputationType != value))
				{
					this.OnReputationTypeChanging(value);
					this.SendPropertyChanging();
					this._ReputationType = value;
					this.SendPropertyChanged("ReputationType");
					this.OnReputationTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mark", DbType="Int NOT NULL")]
		public int Mark
		{
			get
			{
				return this._Mark;
			}
			set
			{
				if ((this._Mark != value))
				{
					this.OnMarkChanging(value);
					this.SendPropertyChanging();
					this._Mark = value;
					this.SendPropertyChanged("Mark");
					this.OnMarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Reputation", Storage="_User", ThisKey="ReceiverID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Reputations.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Reputations.Add(this);
						this._ReceiverID = value.ID;
					}
					else
					{
						this._ReceiverID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Reputation1", Storage="_User1", ThisKey="SenderID", OtherKey="ID", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.Reputations1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.Reputations1.Add(this);
						this._SenderID = value.ID;
					}
					else
					{
						this._SenderID = default(int);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Role")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Code;
		
		private string _Name;
		
		private EntitySet<UserRole> _UserRoles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Role()
		{
			this._UserRoles = new EntitySet<UserRole>(new Action<UserRole>(this.attach_UserRoles), new Action<UserRole>(this.detach_UserRoles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_UserRole", Storage="_UserRoles", ThisKey="ID", OtherKey="RoleID")]
		public EntitySet<UserRole> UserRoles
		{
			get
			{
				return this._UserRoles;
			}
			set
			{
				this._UserRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserComment")]
	public partial class UserComment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private int _CommentID;
		
		private EntityRef<Comment> _Comment;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnCommentIDChanging(int value);
    partial void OnCommentIDChanged();
    #endregion
		
		public UserComment()
		{
			this._Comment = default(EntityRef<Comment>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentID", DbType="Int NOT NULL")]
		public int CommentID
		{
			get
			{
				return this._CommentID;
			}
			set
			{
				if ((this._CommentID != value))
				{
					if (this._Comment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommentIDChanging(value);
					this.SendPropertyChanging();
					this._CommentID = value;
					this.SendPropertyChanged("CommentID");
					this.OnCommentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comment_UserComment", Storage="_Comment", ThisKey="CommentID", OtherKey="ID", IsForeignKey=true)]
		public Comment Comment
		{
			get
			{
				return this._Comment.Entity;
			}
			set
			{
				Comment previousValue = this._Comment.Entity;
				if (((previousValue != value) 
							|| (this._Comment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Comment.Entity = null;
						previousValue.UserComments.Remove(this);
					}
					this._Comment.Entity = value;
					if ((value != null))
					{
						value.UserComments.Add(this);
						this._CommentID = value.ID;
					}
					else
					{
						this._CommentID = default(int);
					}
					this.SendPropertyChanged("Comment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserComment", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserComments.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserComments.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserRole")]
	public partial class UserRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _RoleID;
		
		private int _UserID;
		
		private EntitySet<UserRoleTournament> _UserRoleTournaments;
		
		private EntitySet<UserRoleGame> _UserRoleGames;
		
		private EntitySet<UserRoleGroup> _UserRoleGroups;
		
		private EntityRef<Role> _Role;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    #endregion
		
		public UserRole()
		{
			this._UserRoleTournaments = new EntitySet<UserRoleTournament>(new Action<UserRoleTournament>(this.attach_UserRoleTournaments), new Action<UserRoleTournament>(this.detach_UserRoleTournaments));
			this._UserRoleGames = new EntitySet<UserRoleGame>(new Action<UserRoleGame>(this.attach_UserRoleGames), new Action<UserRoleGame>(this.detach_UserRoleGames));
			this._UserRoleGroups = new EntitySet<UserRoleGroup>(new Action<UserRoleGroup>(this.attach_UserRoleGroups), new Action<UserRoleGroup>(this.detach_UserRoleGroups));
			this._Role = default(EntityRef<Role>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="Int NOT NULL")]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserRole_UserRoleTournament", Storage="_UserRoleTournaments", ThisKey="ID", OtherKey="UserRoleID")]
		public EntitySet<UserRoleTournament> UserRoleTournaments
		{
			get
			{
				return this._UserRoleTournaments;
			}
			set
			{
				this._UserRoleTournaments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserRole_UserRoleGame", Storage="_UserRoleGames", ThisKey="ID", OtherKey="UserRoleID")]
		public EntitySet<UserRoleGame> UserRoleGames
		{
			get
			{
				return this._UserRoleGames;
			}
			set
			{
				this._UserRoleGames.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserRole_UserRoleGroup", Storage="_UserRoleGroups", ThisKey="ID", OtherKey="UserRoleID")]
		public EntitySet<UserRoleGroup> UserRoleGroups
		{
			get
			{
				return this._UserRoleGroups;
			}
			set
			{
				this._UserRoleGroups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_UserRole", Storage="_Role", ThisKey="RoleID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.UserRoles.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.UserRoles.Add(this);
						this._RoleID = value.ID;
					}
					else
					{
						this._RoleID = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserRole", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserRoles.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserRoles.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserRoleTournaments(UserRoleTournament entity)
		{
			this.SendPropertyChanging();
			entity.UserRole = this;
		}
		
		private void detach_UserRoleTournaments(UserRoleTournament entity)
		{
			this.SendPropertyChanging();
			entity.UserRole = null;
		}
		
		private void attach_UserRoleGames(UserRoleGame entity)
		{
			this.SendPropertyChanging();
			entity.UserRole = this;
		}
		
		private void detach_UserRoleGames(UserRoleGame entity)
		{
			this.SendPropertyChanging();
			entity.UserRole = null;
		}
		
		private void attach_UserRoleGroups(UserRoleGroup entity)
		{
			this.SendPropertyChanging();
			entity.UserRole = this;
		}
		
		private void detach_UserRoleGroups(UserRoleGroup entity)
		{
			this.SendPropertyChanging();
			entity.UserRole = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserVideoComment")]
	public partial class UserVideoComment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserVideoID;
		
		private int _CommentID;
		
		private EntityRef<Comment> _Comment;
		
		private EntityRef<UserVideo> _UserVideo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserVideoIDChanging(int value);
    partial void OnUserVideoIDChanged();
    partial void OnCommentIDChanging(int value);
    partial void OnCommentIDChanged();
    #endregion
		
		public UserVideoComment()
		{
			this._Comment = default(EntityRef<Comment>);
			this._UserVideo = default(EntityRef<UserVideo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserVideoID", DbType="Int NOT NULL")]
		public int UserVideoID
		{
			get
			{
				return this._UserVideoID;
			}
			set
			{
				if ((this._UserVideoID != value))
				{
					if (this._UserVideo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserVideoIDChanging(value);
					this.SendPropertyChanging();
					this._UserVideoID = value;
					this.SendPropertyChanged("UserVideoID");
					this.OnUserVideoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentID", DbType="Int NOT NULL")]
		public int CommentID
		{
			get
			{
				return this._CommentID;
			}
			set
			{
				if ((this._CommentID != value))
				{
					if (this._Comment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommentIDChanging(value);
					this.SendPropertyChanging();
					this._CommentID = value;
					this.SendPropertyChanged("CommentID");
					this.OnCommentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comment_UserVideoComment", Storage="_Comment", ThisKey="CommentID", OtherKey="ID", IsForeignKey=true)]
		public Comment Comment
		{
			get
			{
				return this._Comment.Entity;
			}
			set
			{
				Comment previousValue = this._Comment.Entity;
				if (((previousValue != value) 
							|| (this._Comment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Comment.Entity = null;
						previousValue.UserVideoComments.Remove(this);
					}
					this._Comment.Entity = value;
					if ((value != null))
					{
						value.UserVideoComments.Add(this);
						this._CommentID = value.ID;
					}
					else
					{
						this._CommentID = default(int);
					}
					this.SendPropertyChanged("Comment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserVideo_UserVideoComment", Storage="_UserVideo", ThisKey="UserVideoID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public UserVideo UserVideo
		{
			get
			{
				return this._UserVideo.Entity;
			}
			set
			{
				UserVideo previousValue = this._UserVideo.Entity;
				if (((previousValue != value) 
							|| (this._UserVideo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserVideo.Entity = null;
						previousValue.UserVideoComments.Remove(this);
					}
					this._UserVideo.Entity = value;
					if ((value != null))
					{
						value.UserVideoComments.Add(this);
						this._UserVideoID = value.ID;
					}
					else
					{
						this._UserVideoID = default(int);
					}
					this.SendPropertyChanged("UserVideo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NewComment")]
	public partial class NewComment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _NewID;
		
		private int _CommentID;
		
		private EntityRef<Comment> _Comment;
		
		private EntityRef<New> _New;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNewIDChanging(int value);
    partial void OnNewIDChanged();
    partial void OnCommentIDChanging(int value);
    partial void OnCommentIDChanged();
    #endregion
		
		public NewComment()
		{
			this._Comment = default(EntityRef<Comment>);
			this._New = default(EntityRef<New>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewID", DbType="Int NOT NULL")]
		public int NewID
		{
			get
			{
				return this._NewID;
			}
			set
			{
				if ((this._NewID != value))
				{
					if (this._New.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNewIDChanging(value);
					this.SendPropertyChanging();
					this._NewID = value;
					this.SendPropertyChanged("NewID");
					this.OnNewIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentID", DbType="Int NOT NULL")]
		public int CommentID
		{
			get
			{
				return this._CommentID;
			}
			set
			{
				if ((this._CommentID != value))
				{
					if (this._Comment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommentIDChanging(value);
					this.SendPropertyChanging();
					this._CommentID = value;
					this.SendPropertyChanged("CommentID");
					this.OnCommentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comment_NewComment", Storage="_Comment", ThisKey="CommentID", OtherKey="ID", IsForeignKey=true)]
		public Comment Comment
		{
			get
			{
				return this._Comment.Entity;
			}
			set
			{
				Comment previousValue = this._Comment.Entity;
				if (((previousValue != value) 
							|| (this._Comment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Comment.Entity = null;
						previousValue.NewComments.Remove(this);
					}
					this._Comment.Entity = value;
					if ((value != null))
					{
						value.NewComments.Add(this);
						this._CommentID = value.ID;
					}
					else
					{
						this._CommentID = default(int);
					}
					this.SendPropertyChanged("Comment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="New_NewComment", Storage="_New", ThisKey="NewID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public New New
		{
			get
			{
				return this._New.Entity;
			}
			set
			{
				New previousValue = this._New.Entity;
				if (((previousValue != value) 
							|| (this._New.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._New.Entity = null;
						previousValue.NewComments.Remove(this);
					}
					this._New.Entity = value;
					if ((value != null))
					{
						value.NewComments.Add(this);
						this._NewID = value.ID;
					}
					else
					{
						this._NewID = default(int);
					}
					this.SendPropertyChanged("New");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Subject")]
	public partial class Subject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<Message> _Messages;
		
		private EntitySet<Notice> _Notices;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Subject()
		{
			this._Messages = new EntitySet<Message>(new Action<Message>(this.attach_Messages), new Action<Message>(this.detach_Messages));
			this._Notices = new EntitySet<Notice>(new Action<Notice>(this.attach_Notices), new Action<Notice>(this.detach_Notices));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Message", Storage="_Messages", ThisKey="ID", OtherKey="SubjectID")]
		public EntitySet<Message> Messages
		{
			get
			{
				return this._Messages;
			}
			set
			{
				this._Messages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Notice", Storage="_Notices", ThisKey="ID", OtherKey="SubjectID")]
		public EntitySet<Notice> Notices
		{
			get
			{
				return this._Notices;
			}
			set
			{
				this._Notices.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
		
		private void attach_Notices(Notice entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_Notices(Notice entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserGame")]
	public partial class UserGame : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private int _GameID;
		
		private EntityRef<Game> _Game;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnGameIDChanging(int value);
    partial void OnGameIDChanged();
    #endregion
		
		public UserGame()
		{
			this._Game = default(EntityRef<Game>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameID", DbType="Int NOT NULL")]
		public int GameID
		{
			get
			{
				return this._GameID;
			}
			set
			{
				if ((this._GameID != value))
				{
					if (this._Game.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameIDChanging(value);
					this.SendPropertyChanging();
					this._GameID = value;
					this.SendPropertyChanged("GameID");
					this.OnGameIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_UserGame", Storage="_Game", ThisKey="GameID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Game Game
		{
			get
			{
				return this._Game.Entity;
			}
			set
			{
				Game previousValue = this._Game.Entity;
				if (((previousValue != value) 
							|| (this._Game.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Game.Entity = null;
						previousValue.UserGames.Remove(this);
					}
					this._Game.Entity = value;
					if ((value != null))
					{
						value.UserGames.Add(this);
						this._GameID = value.ID;
					}
					else
					{
						this._GameID = default(int);
					}
					this.SendPropertyChanged("Game");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserGame", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserGames.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserGames.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TournamentGroup")]
	public partial class TournamentGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _TournamentID;
		
		private string _Name;
		
		private EntitySet<Participant> _Participants;
		
		private EntitySet<Match> _Matches;
		
		private EntityRef<Tournament> _Tournament;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTournamentIDChanging(int value);
    partial void OnTournamentIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public TournamentGroup()
		{
			this._Participants = new EntitySet<Participant>(new Action<Participant>(this.attach_Participants), new Action<Participant>(this.detach_Participants));
			this._Matches = new EntitySet<Match>(new Action<Match>(this.attach_Matches), new Action<Match>(this.detach_Matches));
			this._Tournament = default(EntityRef<Tournament>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentID", DbType="Int NOT NULL")]
		public int TournamentID
		{
			get
			{
				return this._TournamentID;
			}
			set
			{
				if ((this._TournamentID != value))
				{
					if (this._Tournament.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTournamentIDChanging(value);
					this.SendPropertyChanging();
					this._TournamentID = value;
					this.SendPropertyChanged("TournamentID");
					this.OnTournamentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TournamentGroup_Participant", Storage="_Participants", ThisKey="ID", OtherKey="TournamentGroupID")]
		public EntitySet<Participant> Participants
		{
			get
			{
				return this._Participants;
			}
			set
			{
				this._Participants.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TournamentGroup_Match", Storage="_Matches", ThisKey="ID", OtherKey="TournamentGroupID")]
		public EntitySet<Match> Matches
		{
			get
			{
				return this._Matches;
			}
			set
			{
				this._Matches.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tournament_TournamentGroup", Storage="_Tournament", ThisKey="TournamentID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Tournament Tournament
		{
			get
			{
				return this._Tournament.Entity;
			}
			set
			{
				Tournament previousValue = this._Tournament.Entity;
				if (((previousValue != value) 
							|| (this._Tournament.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tournament.Entity = null;
						previousValue.TournamentGroups.Remove(this);
					}
					this._Tournament.Entity = value;
					if ((value != null))
					{
						value.TournamentGroups.Add(this);
						this._TournamentID = value.ID;
					}
					else
					{
						this._TournamentID = default(int);
					}
					this.SendPropertyChanged("Tournament");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Participants(Participant entity)
		{
			this.SendPropertyChanging();
			entity.TournamentGroup = this;
		}
		
		private void detach_Participants(Participant entity)
		{
			this.SendPropertyChanging();
			entity.TournamentGroup = null;
		}
		
		private void attach_Matches(Match entity)
		{
			this.SendPropertyChanging();
			entity.TournamentGroup = this;
		}
		
		private void detach_Matches(Match entity)
		{
			this.SendPropertyChanging();
			entity.TournamentGroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tour")]
	public partial class Tour : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _TournamentID;
		
		private int _TourType;
		
		private System.Nullable<System.DateTime> _RecommendDate;
		
		private string _Name;
		
		private EntitySet<Match> _Matches;
		
		private EntityRef<Tournament> _Tournament;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTournamentIDChanging(int value);
    partial void OnTournamentIDChanged();
    partial void OnTourTypeChanging(int value);
    partial void OnTourTypeChanged();
    partial void OnRecommendDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRecommendDateChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Tour()
		{
			this._Matches = new EntitySet<Match>(new Action<Match>(this.attach_Matches), new Action<Match>(this.detach_Matches));
			this._Tournament = default(EntityRef<Tournament>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentID", DbType="Int NOT NULL")]
		public int TournamentID
		{
			get
			{
				return this._TournamentID;
			}
			set
			{
				if ((this._TournamentID != value))
				{
					if (this._Tournament.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTournamentIDChanging(value);
					this.SendPropertyChanging();
					this._TournamentID = value;
					this.SendPropertyChanged("TournamentID");
					this.OnTournamentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TourType", DbType="Int NOT NULL")]
		public int TourType
		{
			get
			{
				return this._TourType;
			}
			set
			{
				if ((this._TourType != value))
				{
					this.OnTourTypeChanging(value);
					this.SendPropertyChanging();
					this._TourType = value;
					this.SendPropertyChanged("TourType");
					this.OnTourTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecommendDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> RecommendDate
		{
			get
			{
				return this._RecommendDate;
			}
			set
			{
				if ((this._RecommendDate != value))
				{
					this.OnRecommendDateChanging(value);
					this.SendPropertyChanging();
					this._RecommendDate = value;
					this.SendPropertyChanged("RecommendDate");
					this.OnRecommendDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tour_Match", Storage="_Matches", ThisKey="ID", OtherKey="TourID")]
		public EntitySet<Match> Matches
		{
			get
			{
				return this._Matches;
			}
			set
			{
				this._Matches.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tournament_Tour", Storage="_Tournament", ThisKey="TournamentID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Tournament Tournament
		{
			get
			{
				return this._Tournament.Entity;
			}
			set
			{
				Tournament previousValue = this._Tournament.Entity;
				if (((previousValue != value) 
							|| (this._Tournament.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tournament.Entity = null;
						previousValue.Tours.Remove(this);
					}
					this._Tournament.Entity = value;
					if ((value != null))
					{
						value.Tours.Add(this);
						this._TournamentID = value.ID;
					}
					else
					{
						this._TournamentID = default(int);
					}
					this.SendPropertyChanged("Tournament");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Matches(Match entity)
		{
			this.SendPropertyChanging();
			entity.Tour = this;
		}
		
		private void detach_Matches(Match entity)
		{
			this.SendPropertyChanging();
			entity.Tour = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Rating")]
	public partial class Rating : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private int _GameID;
		
		private int _Level;
		
		private int _TotalScore;
		
		private bool _IsActive;
		
		private EntitySet<RatingDetail> _RatingDetails;
		
		private EntityRef<Game> _Game;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnGameIDChanging(int value);
    partial void OnGameIDChanged();
    partial void OnLevelChanging(int value);
    partial void OnLevelChanged();
    partial void OnTotalScoreChanging(int value);
    partial void OnTotalScoreChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public Rating()
		{
			this._RatingDetails = new EntitySet<RatingDetail>(new Action<RatingDetail>(this.attach_RatingDetails), new Action<RatingDetail>(this.detach_RatingDetails));
			this._Game = default(EntityRef<Game>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameID", DbType="Int NOT NULL")]
		public int GameID
		{
			get
			{
				return this._GameID;
			}
			set
			{
				if ((this._GameID != value))
				{
					if (this._Game.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameIDChanging(value);
					this.SendPropertyChanging();
					this._GameID = value;
					this.SendPropertyChanged("GameID");
					this.OnGameIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Level]", Storage="_Level", DbType="Int NOT NULL")]
		public int Level
		{
			get
			{
				return this._Level;
			}
			set
			{
				if ((this._Level != value))
				{
					this.OnLevelChanging(value);
					this.SendPropertyChanging();
					this._Level = value;
					this.SendPropertyChanged("Level");
					this.OnLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalScore", DbType="Int NOT NULL")]
		public int TotalScore
		{
			get
			{
				return this._TotalScore;
			}
			set
			{
				if ((this._TotalScore != value))
				{
					this.OnTotalScoreChanging(value);
					this.SendPropertyChanging();
					this._TotalScore = value;
					this.SendPropertyChanged("TotalScore");
					this.OnTotalScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rating_RatingDetail", Storage="_RatingDetails", ThisKey="ID", OtherKey="RatingID")]
		public EntitySet<RatingDetail> RatingDetails
		{
			get
			{
				return this._RatingDetails;
			}
			set
			{
				this._RatingDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_Rating", Storage="_Game", ThisKey="GameID", OtherKey="ID", IsForeignKey=true)]
		public Game Game
		{
			get
			{
				return this._Game.Entity;
			}
			set
			{
				Game previousValue = this._Game.Entity;
				if (((previousValue != value) 
							|| (this._Game.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Game.Entity = null;
						previousValue.Ratings.Remove(this);
					}
					this._Game.Entity = value;
					if ((value != null))
					{
						value.Ratings.Add(this);
						this._GameID = value.ID;
					}
					else
					{
						this._GameID = default(int);
					}
					this.SendPropertyChanged("Game");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Rating", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Ratings.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Ratings.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RatingDetails(RatingDetail entity)
		{
			this.SendPropertyChanging();
			entity.Rating = this;
		}
		
		private void detach_RatingDetails(RatingDetail entity)
		{
			this.SendPropertyChanging();
			entity.Rating = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Comment")]
	public partial class Comment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _ParentID;
		
		private int _UserID;
		
		private string _Text;
		
		private string _VideoUrl;
		
		private string _VideoCode;
		
		private string _ImagePath;
		
		private System.DateTime _AddedDate;
		
		private bool _IsBanned;
		
		private string _BanDescription;
		
		private EntitySet<VideoComment> _VideoComments;
		
		private EntitySet<BlogComment> _BlogComments;
		
		private EntitySet<PhotoComment> _PhotoComments;
		
		private EntitySet<UserComment> _UserComments;
		
		private EntitySet<UserVideoComment> _UserVideoComments;
		
		private EntitySet<NewComment> _NewComments;
		
		private EntitySet<Comment> _Comments;
		
		private EntitySet<MatchComment> _MatchComments;
		
		private EntityRef<Comment> _Comment1;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnParentIDChanging(System.Nullable<int> value);
    partial void OnParentIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnVideoUrlChanging(string value);
    partial void OnVideoUrlChanged();
    partial void OnVideoCodeChanging(string value);
    partial void OnVideoCodeChanged();
    partial void OnImagePathChanging(string value);
    partial void OnImagePathChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnIsBannedChanging(bool value);
    partial void OnIsBannedChanged();
    partial void OnBanDescriptionChanging(string value);
    partial void OnBanDescriptionChanged();
    #endregion
		
		public Comment()
		{
			this._VideoComments = new EntitySet<VideoComment>(new Action<VideoComment>(this.attach_VideoComments), new Action<VideoComment>(this.detach_VideoComments));
			this._BlogComments = new EntitySet<BlogComment>(new Action<BlogComment>(this.attach_BlogComments), new Action<BlogComment>(this.detach_BlogComments));
			this._PhotoComments = new EntitySet<PhotoComment>(new Action<PhotoComment>(this.attach_PhotoComments), new Action<PhotoComment>(this.detach_PhotoComments));
			this._UserComments = new EntitySet<UserComment>(new Action<UserComment>(this.attach_UserComments), new Action<UserComment>(this.detach_UserComments));
			this._UserVideoComments = new EntitySet<UserVideoComment>(new Action<UserVideoComment>(this.attach_UserVideoComments), new Action<UserVideoComment>(this.detach_UserVideoComments));
			this._NewComments = new EntitySet<NewComment>(new Action<NewComment>(this.attach_NewComments), new Action<NewComment>(this.detach_NewComments));
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._MatchComments = new EntitySet<MatchComment>(new Action<MatchComment>(this.attach_MatchComments), new Action<MatchComment>(this.detach_MatchComments));
			this._Comment1 = default(EntityRef<Comment>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentID", DbType="Int")]
		public System.Nullable<int> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					if (this._Comment1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VideoUrl", DbType="NVarChar(500)")]
		public string VideoUrl
		{
			get
			{
				return this._VideoUrl;
			}
			set
			{
				if ((this._VideoUrl != value))
				{
					this.OnVideoUrlChanging(value);
					this.SendPropertyChanging();
					this._VideoUrl = value;
					this.SendPropertyChanged("VideoUrl");
					this.OnVideoUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VideoCode", DbType="NVarChar(MAX)")]
		public string VideoCode
		{
			get
			{
				return this._VideoCode;
			}
			set
			{
				if ((this._VideoCode != value))
				{
					this.OnVideoCodeChanging(value);
					this.SendPropertyChanging();
					this._VideoCode = value;
					this.SendPropertyChanged("VideoCode");
					this.OnVideoCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImagePath", DbType="NVarChar(150)")]
		public string ImagePath
		{
			get
			{
				return this._ImagePath;
			}
			set
			{
				if ((this._ImagePath != value))
				{
					this.OnImagePathChanging(value);
					this.SendPropertyChanging();
					this._ImagePath = value;
					this.SendPropertyChanged("ImagePath");
					this.OnImagePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsBanned", DbType="Bit NOT NULL")]
		public bool IsBanned
		{
			get
			{
				return this._IsBanned;
			}
			set
			{
				if ((this._IsBanned != value))
				{
					this.OnIsBannedChanging(value);
					this.SendPropertyChanging();
					this._IsBanned = value;
					this.SendPropertyChanged("IsBanned");
					this.OnIsBannedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BanDescription", DbType="NVarChar(500)")]
		public string BanDescription
		{
			get
			{
				return this._BanDescription;
			}
			set
			{
				if ((this._BanDescription != value))
				{
					this.OnBanDescriptionChanging(value);
					this.SendPropertyChanging();
					this._BanDescription = value;
					this.SendPropertyChanged("BanDescription");
					this.OnBanDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comment_VideoComment", Storage="_VideoComments", ThisKey="ID", OtherKey="CommentID")]
		public EntitySet<VideoComment> VideoComments
		{
			get
			{
				return this._VideoComments;
			}
			set
			{
				this._VideoComments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comment_BlogComment", Storage="_BlogComments", ThisKey="ID", OtherKey="CommentID")]
		public EntitySet<BlogComment> BlogComments
		{
			get
			{
				return this._BlogComments;
			}
			set
			{
				this._BlogComments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comment_PhotoComment", Storage="_PhotoComments", ThisKey="ID", OtherKey="CommentID")]
		public EntitySet<PhotoComment> PhotoComments
		{
			get
			{
				return this._PhotoComments;
			}
			set
			{
				this._PhotoComments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comment_UserComment", Storage="_UserComments", ThisKey="ID", OtherKey="CommentID")]
		public EntitySet<UserComment> UserComments
		{
			get
			{
				return this._UserComments;
			}
			set
			{
				this._UserComments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comment_UserVideoComment", Storage="_UserVideoComments", ThisKey="ID", OtherKey="CommentID")]
		public EntitySet<UserVideoComment> UserVideoComments
		{
			get
			{
				return this._UserVideoComments;
			}
			set
			{
				this._UserVideoComments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comment_NewComment", Storage="_NewComments", ThisKey="ID", OtherKey="CommentID")]
		public EntitySet<NewComment> NewComments
		{
			get
			{
				return this._NewComments;
			}
			set
			{
				this._NewComments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comment_Comment", Storage="_Comments", ThisKey="ID", OtherKey="ParentID")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comment_MatchComment", Storage="_MatchComments", ThisKey="ID", OtherKey="CommentID")]
		public EntitySet<MatchComment> MatchComments
		{
			get
			{
				return this._MatchComments;
			}
			set
			{
				this._MatchComments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comment_Comment", Storage="_Comment1", ThisKey="ParentID", OtherKey="ID", IsForeignKey=true)]
		public Comment Comment1
		{
			get
			{
				return this._Comment1.Entity;
			}
			set
			{
				Comment previousValue = this._Comment1.Entity;
				if (((previousValue != value) 
							|| (this._Comment1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Comment1.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._Comment1.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._ParentID = value.ID;
					}
					else
					{
						this._ParentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Comment1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Comment", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_VideoComments(VideoComment entity)
		{
			this.SendPropertyChanging();
			entity.Comment = this;
		}
		
		private void detach_VideoComments(VideoComment entity)
		{
			this.SendPropertyChanging();
			entity.Comment = null;
		}
		
		private void attach_BlogComments(BlogComment entity)
		{
			this.SendPropertyChanging();
			entity.Comment = this;
		}
		
		private void detach_BlogComments(BlogComment entity)
		{
			this.SendPropertyChanging();
			entity.Comment = null;
		}
		
		private void attach_PhotoComments(PhotoComment entity)
		{
			this.SendPropertyChanging();
			entity.Comment = this;
		}
		
		private void detach_PhotoComments(PhotoComment entity)
		{
			this.SendPropertyChanging();
			entity.Comment = null;
		}
		
		private void attach_UserComments(UserComment entity)
		{
			this.SendPropertyChanging();
			entity.Comment = this;
		}
		
		private void detach_UserComments(UserComment entity)
		{
			this.SendPropertyChanging();
			entity.Comment = null;
		}
		
		private void attach_UserVideoComments(UserVideoComment entity)
		{
			this.SendPropertyChanging();
			entity.Comment = this;
		}
		
		private void detach_UserVideoComments(UserVideoComment entity)
		{
			this.SendPropertyChanging();
			entity.Comment = null;
		}
		
		private void attach_NewComments(NewComment entity)
		{
			this.SendPropertyChanging();
			entity.Comment = this;
		}
		
		private void detach_NewComments(NewComment entity)
		{
			this.SendPropertyChanging();
			entity.Comment = null;
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Comment1 = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Comment1 = null;
		}
		
		private void attach_MatchComments(MatchComment entity)
		{
			this.SendPropertyChanging();
			entity.Comment = this;
		}
		
		private void detach_MatchComments(MatchComment entity)
		{
			this.SendPropertyChanging();
			entity.Comment = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MatchComment")]
	public partial class MatchComment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _MatchID;
		
		private int _CommentID;
		
		private EntityRef<Comment> _Comment;
		
		private EntityRef<Match> _Match;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMatchIDChanging(int value);
    partial void OnMatchIDChanged();
    partial void OnCommentIDChanging(int value);
    partial void OnCommentIDChanged();
    #endregion
		
		public MatchComment()
		{
			this._Comment = default(EntityRef<Comment>);
			this._Match = default(EntityRef<Match>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchID", DbType="Int NOT NULL")]
		public int MatchID
		{
			get
			{
				return this._MatchID;
			}
			set
			{
				if ((this._MatchID != value))
				{
					if (this._Match.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatchIDChanging(value);
					this.SendPropertyChanging();
					this._MatchID = value;
					this.SendPropertyChanged("MatchID");
					this.OnMatchIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentID", DbType="Int NOT NULL")]
		public int CommentID
		{
			get
			{
				return this._CommentID;
			}
			set
			{
				if ((this._CommentID != value))
				{
					if (this._Comment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommentIDChanging(value);
					this.SendPropertyChanging();
					this._CommentID = value;
					this.SendPropertyChanged("CommentID");
					this.OnCommentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comment_MatchComment", Storage="_Comment", ThisKey="CommentID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Comment Comment
		{
			get
			{
				return this._Comment.Entity;
			}
			set
			{
				Comment previousValue = this._Comment.Entity;
				if (((previousValue != value) 
							|| (this._Comment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Comment.Entity = null;
						previousValue.MatchComments.Remove(this);
					}
					this._Comment.Entity = value;
					if ((value != null))
					{
						value.MatchComments.Add(this);
						this._CommentID = value.ID;
					}
					else
					{
						this._CommentID = default(int);
					}
					this.SendPropertyChanged("Comment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Match_MatchComment", Storage="_Match", ThisKey="MatchID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Match Match
		{
			get
			{
				return this._Match.Entity;
			}
			set
			{
				Match previousValue = this._Match.Entity;
				if (((previousValue != value) 
							|| (this._Match.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Match.Entity = null;
						previousValue.MatchComments.Remove(this);
					}
					this._Match.Entity = value;
					if ((value != null))
					{
						value.MatchComments.Add(this);
						this._MatchID = value.ID;
					}
					else
					{
						this._MatchID = default(int);
					}
					this.SendPropertyChanged("Match");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Page")]
	public partial class Page : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Url;
		
		private string _Text;
		
		private string _Description;
		
		private string _Keywords;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnKeywordsChanging(string value);
    partial void OnKeywordsChanged();
    #endregion
		
		public Page()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Keywords", DbType="NVarChar(MAX)")]
		public string Keywords
		{
			get
			{
				return this._Keywords;
			}
			set
			{
				if ((this._Keywords != value))
				{
					this.OnKeywordsChanging(value);
					this.SendPropertyChanging();
					this._Keywords = value;
					this.SendPropertyChanged("Keywords");
					this.OnKeywordsChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ForumLog")]
	public partial class ForumLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ForumID;
		
		private int _UserID;
		
		private System.DateTime _ReadDate;
		
		private EntityRef<Forum> _Forum;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnForumIDChanging(int value);
    partial void OnForumIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnReadDateChanging(System.DateTime value);
    partial void OnReadDateChanged();
    #endregion
		
		public ForumLog()
		{
			this._Forum = default(EntityRef<Forum>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ForumID", DbType="Int NOT NULL")]
		public int ForumID
		{
			get
			{
				return this._ForumID;
			}
			set
			{
				if ((this._ForumID != value))
				{
					if (this._Forum.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnForumIDChanging(value);
					this.SendPropertyChanging();
					this._ForumID = value;
					this.SendPropertyChanged("ForumID");
					this.OnForumIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReadDate", DbType="DateTime NOT NULL")]
		public System.DateTime ReadDate
		{
			get
			{
				return this._ReadDate;
			}
			set
			{
				if ((this._ReadDate != value))
				{
					this.OnReadDateChanging(value);
					this.SendPropertyChanging();
					this._ReadDate = value;
					this.SendPropertyChanged("ReadDate");
					this.OnReadDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forum_ForumLog", Storage="_Forum", ThisKey="ForumID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Forum Forum
		{
			get
			{
				return this._Forum.Entity;
			}
			set
			{
				Forum previousValue = this._Forum.Entity;
				if (((previousValue != value) 
							|| (this._Forum.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Forum.Entity = null;
						previousValue.ForumLogs.Remove(this);
					}
					this._Forum.Entity = value;
					if ((value != null))
					{
						value.ForumLogs.Add(this);
						this._ForumID = value.ID;
					}
					else
					{
						this._ForumID = default(int);
					}
					this.SendPropertyChanged("Forum");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ForumLog", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.ForumLogs.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.ForumLogs.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PollItem")]
	public partial class PollItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _PollID;
		
		private string _Description;
		
		private int _CountVotes;
		
		private EntitySet<PollVote> _PollVotes;
		
		private EntityRef<Poll> _Poll;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPollIDChanging(int value);
    partial void OnPollIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCountVotesChanging(int value);
    partial void OnCountVotesChanged();
    #endregion
		
		public PollItem()
		{
			this._PollVotes = new EntitySet<PollVote>(new Action<PollVote>(this.attach_PollVotes), new Action<PollVote>(this.detach_PollVotes));
			this._Poll = default(EntityRef<Poll>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PollID", DbType="Int NOT NULL")]
		public int PollID
		{
			get
			{
				return this._PollID;
			}
			set
			{
				if ((this._PollID != value))
				{
					if (this._Poll.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPollIDChanging(value);
					this.SendPropertyChanging();
					this._PollID = value;
					this.SendPropertyChanged("PollID");
					this.OnPollIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountVotes", DbType="Int NOT NULL")]
		public int CountVotes
		{
			get
			{
				return this._CountVotes;
			}
			set
			{
				if ((this._CountVotes != value))
				{
					this.OnCountVotesChanging(value);
					this.SendPropertyChanging();
					this._CountVotes = value;
					this.SendPropertyChanged("CountVotes");
					this.OnCountVotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PollItem_PollVote", Storage="_PollVotes", ThisKey="ID", OtherKey="PollItemID")]
		public EntitySet<PollVote> PollVotes
		{
			get
			{
				return this._PollVotes;
			}
			set
			{
				this._PollVotes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Poll_PollItem", Storage="_Poll", ThisKey="PollID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Poll Poll
		{
			get
			{
				return this._Poll.Entity;
			}
			set
			{
				Poll previousValue = this._Poll.Entity;
				if (((previousValue != value) 
							|| (this._Poll.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Poll.Entity = null;
						previousValue.PollItems.Remove(this);
					}
					this._Poll.Entity = value;
					if ((value != null))
					{
						value.PollItems.Add(this);
						this._PollID = value.ID;
					}
					else
					{
						this._PollID = default(int);
					}
					this.SendPropertyChanged("Poll");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PollVotes(PollVote entity)
		{
			this.SendPropertyChanging();
			entity.PollItem = this;
		}
		
		private void detach_PollVotes(PollVote entity)
		{
			this.SendPropertyChanging();
			entity.PollItem = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PollVote")]
	public partial class PollVote : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _PollID;
		
		private System.Nullable<int> _PollItemID;
		
		private int _UserID;
		
		private System.DateTime _AddedDate;
		
		private EntityRef<PollItem> _PollItem;
		
		private EntityRef<Poll> _Poll;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPollIDChanging(int value);
    partial void OnPollIDChanged();
    partial void OnPollItemIDChanging(System.Nullable<int> value);
    partial void OnPollItemIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    #endregion
		
		public PollVote()
		{
			this._PollItem = default(EntityRef<PollItem>);
			this._Poll = default(EntityRef<Poll>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PollID", DbType="Int NOT NULL")]
		public int PollID
		{
			get
			{
				return this._PollID;
			}
			set
			{
				if ((this._PollID != value))
				{
					if (this._Poll.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPollIDChanging(value);
					this.SendPropertyChanging();
					this._PollID = value;
					this.SendPropertyChanged("PollID");
					this.OnPollIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PollItemID", DbType="Int")]
		public System.Nullable<int> PollItemID
		{
			get
			{
				return this._PollItemID;
			}
			set
			{
				if ((this._PollItemID != value))
				{
					if (this._PollItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPollItemIDChanging(value);
					this.SendPropertyChanging();
					this._PollItemID = value;
					this.SendPropertyChanged("PollItemID");
					this.OnPollItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PollItem_PollVote", Storage="_PollItem", ThisKey="PollItemID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public PollItem PollItem
		{
			get
			{
				return this._PollItem.Entity;
			}
			set
			{
				PollItem previousValue = this._PollItem.Entity;
				if (((previousValue != value) 
							|| (this._PollItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PollItem.Entity = null;
						previousValue.PollVotes.Remove(this);
					}
					this._PollItem.Entity = value;
					if ((value != null))
					{
						value.PollVotes.Add(this);
						this._PollItemID = value.ID;
					}
					else
					{
						this._PollItemID = default(Nullable<int>);
					}
					this.SendPropertyChanged("PollItem");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Poll_PollVote", Storage="_Poll", ThisKey="PollID", OtherKey="ID", IsForeignKey=true)]
		public Poll Poll
		{
			get
			{
				return this._Poll.Entity;
			}
			set
			{
				Poll previousValue = this._Poll.Entity;
				if (((previousValue != value) 
							|| (this._Poll.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Poll.Entity = null;
						previousValue.PollVotes.Remove(this);
					}
					this._Poll.Entity = value;
					if ((value != null))
					{
						value.PollVotes.Add(this);
						this._PollID = value.ID;
					}
					else
					{
						this._PollID = default(int);
					}
					this.SendPropertyChanged("Poll");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_PollVote", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.PollVotes.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.PollVotes.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserRoleTournament")]
	public partial class UserRoleTournament : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserRoleID;
		
		private int _TournamentID;
		
		private EntityRef<UserRole> _UserRole;
		
		private EntityRef<Tournament> _Tournament;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserRoleIDChanging(int value);
    partial void OnUserRoleIDChanged();
    partial void OnTournamentIDChanging(int value);
    partial void OnTournamentIDChanged();
    #endregion
		
		public UserRoleTournament()
		{
			this._UserRole = default(EntityRef<UserRole>);
			this._Tournament = default(EntityRef<Tournament>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserRoleID", DbType="Int NOT NULL")]
		public int UserRoleID
		{
			get
			{
				return this._UserRoleID;
			}
			set
			{
				if ((this._UserRoleID != value))
				{
					if (this._UserRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserRoleIDChanging(value);
					this.SendPropertyChanging();
					this._UserRoleID = value;
					this.SendPropertyChanged("UserRoleID");
					this.OnUserRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentID", DbType="Int NOT NULL")]
		public int TournamentID
		{
			get
			{
				return this._TournamentID;
			}
			set
			{
				if ((this._TournamentID != value))
				{
					if (this._Tournament.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTournamentIDChanging(value);
					this.SendPropertyChanging();
					this._TournamentID = value;
					this.SendPropertyChanged("TournamentID");
					this.OnTournamentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserRole_UserRoleTournament", Storage="_UserRole", ThisKey="UserRoleID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public UserRole UserRole
		{
			get
			{
				return this._UserRole.Entity;
			}
			set
			{
				UserRole previousValue = this._UserRole.Entity;
				if (((previousValue != value) 
							|| (this._UserRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserRole.Entity = null;
						previousValue.UserRoleTournaments.Remove(this);
					}
					this._UserRole.Entity = value;
					if ((value != null))
					{
						value.UserRoleTournaments.Add(this);
						this._UserRoleID = value.ID;
					}
					else
					{
						this._UserRoleID = default(int);
					}
					this.SendPropertyChanged("UserRole");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tournament_UserRoleTournament", Storage="_Tournament", ThisKey="TournamentID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Tournament Tournament
		{
			get
			{
				return this._Tournament.Entity;
			}
			set
			{
				Tournament previousValue = this._Tournament.Entity;
				if (((previousValue != value) 
							|| (this._Tournament.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tournament.Entity = null;
						previousValue.UserRoleTournaments.Remove(this);
					}
					this._Tournament.Entity = value;
					if ((value != null))
					{
						value.UserRoleTournaments.Add(this);
						this._TournamentID = value.ID;
					}
					else
					{
						this._TournamentID = default(int);
					}
					this.SendPropertyChanged("Tournament");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserRoleGame")]
	public partial class UserRoleGame : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserRoleID;
		
		private int _GameID;
		
		private EntityRef<UserRole> _UserRole;
		
		private EntityRef<Game> _Game;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserRoleIDChanging(int value);
    partial void OnUserRoleIDChanged();
    partial void OnGameIDChanging(int value);
    partial void OnGameIDChanged();
    #endregion
		
		public UserRoleGame()
		{
			this._UserRole = default(EntityRef<UserRole>);
			this._Game = default(EntityRef<Game>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserRoleID", DbType="Int NOT NULL")]
		public int UserRoleID
		{
			get
			{
				return this._UserRoleID;
			}
			set
			{
				if ((this._UserRoleID != value))
				{
					if (this._UserRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserRoleIDChanging(value);
					this.SendPropertyChanging();
					this._UserRoleID = value;
					this.SendPropertyChanged("UserRoleID");
					this.OnUserRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameID", DbType="Int NOT NULL")]
		public int GameID
		{
			get
			{
				return this._GameID;
			}
			set
			{
				if ((this._GameID != value))
				{
					if (this._Game.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameIDChanging(value);
					this.SendPropertyChanging();
					this._GameID = value;
					this.SendPropertyChanged("GameID");
					this.OnGameIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserRole_UserRoleGame", Storage="_UserRole", ThisKey="UserRoleID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public UserRole UserRole
		{
			get
			{
				return this._UserRole.Entity;
			}
			set
			{
				UserRole previousValue = this._UserRole.Entity;
				if (((previousValue != value) 
							|| (this._UserRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserRole.Entity = null;
						previousValue.UserRoleGames.Remove(this);
					}
					this._UserRole.Entity = value;
					if ((value != null))
					{
						value.UserRoleGames.Add(this);
						this._UserRoleID = value.ID;
					}
					else
					{
						this._UserRoleID = default(int);
					}
					this.SendPropertyChanged("UserRole");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_UserRoleGame", Storage="_Game", ThisKey="GameID", OtherKey="ID", IsForeignKey=true)]
		public Game Game
		{
			get
			{
				return this._Game.Entity;
			}
			set
			{
				Game previousValue = this._Game.Entity;
				if (((previousValue != value) 
							|| (this._Game.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Game.Entity = null;
						previousValue.UserRoleGames.Remove(this);
					}
					this._Game.Entity = value;
					if ((value != null))
					{
						value.UserRoleGames.Add(this);
						this._GameID = value.ID;
					}
					else
					{
						this._GameID = default(int);
					}
					this.SendPropertyChanged("Game");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Mail")]
	public partial class Mail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private int _DistributionID;
		
		private int _UserID;
		
		private string _Email;
		
		private string _Subject;
		
		private string _Body;
		
		private bool _Delivered;
		
		private System.DateTime _AddedDate;
		
		private EntityRef<Distribution> _Distribution;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnDistributionIDChanging(int value);
    partial void OnDistributionIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnSubjectChanging(string value);
    partial void OnSubjectChanged();
    partial void OnBodyChanging(string value);
    partial void OnBodyChanged();
    partial void OnDeliveredChanging(bool value);
    partial void OnDeliveredChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    #endregion
		
		public Mail()
		{
			this._Distribution = default(EntityRef<Distribution>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistributionID", DbType="Int NOT NULL")]
		public int DistributionID
		{
			get
			{
				return this._DistributionID;
			}
			set
			{
				if ((this._DistributionID != value))
				{
					if (this._Distribution.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDistributionIDChanging(value);
					this.SendPropertyChanging();
					this._DistributionID = value;
					this.SendPropertyChanged("DistributionID");
					this.OnDistributionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subject", DbType="NVarChar(500)")]
		public string Subject
		{
			get
			{
				return this._Subject;
			}
			set
			{
				if ((this._Subject != value))
				{
					this.OnSubjectChanging(value);
					this.SendPropertyChanging();
					this._Subject = value;
					this.SendPropertyChanged("Subject");
					this.OnSubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Body", DbType="NVarChar(MAX)")]
		public string Body
		{
			get
			{
				return this._Body;
			}
			set
			{
				if ((this._Body != value))
				{
					this.OnBodyChanging(value);
					this.SendPropertyChanging();
					this._Body = value;
					this.SendPropertyChanged("Body");
					this.OnBodyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Delivered", DbType="Bit NOT NULL")]
		public bool Delivered
		{
			get
			{
				return this._Delivered;
			}
			set
			{
				if ((this._Delivered != value))
				{
					this.OnDeliveredChanging(value);
					this.SendPropertyChanging();
					this._Delivered = value;
					this.SendPropertyChanged("Delivered");
					this.OnDeliveredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Distribution_Mail", Storage="_Distribution", ThisKey="DistributionID", OtherKey="ID", IsForeignKey=true)]
		public Distribution Distribution
		{
			get
			{
				return this._Distribution.Entity;
			}
			set
			{
				Distribution previousValue = this._Distribution.Entity;
				if (((previousValue != value) 
							|| (this._Distribution.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Distribution.Entity = null;
						previousValue.Mails.Remove(this);
					}
					this._Distribution.Entity = value;
					if ((value != null))
					{
						value.Mails.Add(this);
						this._DistributionID = value.ID;
					}
					else
					{
						this._DistributionID = default(int);
					}
					this.SendPropertyChanged("Distribution");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Mail", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Mails.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Mails.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Distribution")]
	public partial class Distribution : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private System.DateTime _AddedDate;
		
		private string _Name;
		
		private string _Subject;
		
		private string _Body;
		
		private bool _IsStart;
		
		private EntitySet<Mail> _Mails;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSubjectChanging(string value);
    partial void OnSubjectChanged();
    partial void OnBodyChanging(string value);
    partial void OnBodyChanged();
    partial void OnIsStartChanging(bool value);
    partial void OnIsStartChanged();
    #endregion
		
		public Distribution()
		{
			this._Mails = new EntitySet<Mail>(new Action<Mail>(this.attach_Mails), new Action<Mail>(this.detach_Mails));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subject", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Subject
		{
			get
			{
				return this._Subject;
			}
			set
			{
				if ((this._Subject != value))
				{
					this.OnSubjectChanging(value);
					this.SendPropertyChanging();
					this._Subject = value;
					this.SendPropertyChanged("Subject");
					this.OnSubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Body", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Body
		{
			get
			{
				return this._Body;
			}
			set
			{
				if ((this._Body != value))
				{
					this.OnBodyChanging(value);
					this.SendPropertyChanging();
					this._Body = value;
					this.SendPropertyChanged("Body");
					this.OnBodyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsStart", DbType="Bit NOT NULL")]
		public bool IsStart
		{
			get
			{
				return this._IsStart;
			}
			set
			{
				if ((this._IsStart != value))
				{
					this.OnIsStartChanging(value);
					this.SendPropertyChanging();
					this._IsStart = value;
					this.SendPropertyChanged("IsStart");
					this.OnIsStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Distribution_Mail", Storage="_Mails", ThisKey="ID", OtherKey="DistributionID")]
		public EntitySet<Mail> Mails
		{
			get
			{
				return this._Mails;
			}
			set
			{
				this._Mails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Distribution", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Distributions.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Distributions.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Mails(Mail entity)
		{
			this.SendPropertyChanging();
			entity.Distribution = this;
		}
		
		private void detach_Mails(Mail entity)
		{
			this.SendPropertyChanging();
			entity.Distribution = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ChatMessage")]
	public partial class ChatMessage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ChatRoomID;
		
		private int _UserID;
		
		private int _Type;
		
		private System.DateTime _AddedDate;
		
		private string _Message;
		
		private EntityRef<ChatRoom> _ChatRoom;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnChatRoomIDChanging(int value);
    partial void OnChatRoomIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    #endregion
		
		public ChatMessage()
		{
			this._ChatRoom = default(EntityRef<ChatRoom>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChatRoomID", DbType="Int NOT NULL")]
		public int ChatRoomID
		{
			get
			{
				return this._ChatRoomID;
			}
			set
			{
				if ((this._ChatRoomID != value))
				{
					if (this._ChatRoom.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChatRoomIDChanging(value);
					this.SendPropertyChanging();
					this._ChatRoomID = value;
					this.SendPropertyChanged("ChatRoomID");
					this.OnChatRoomIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Message", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChatRoom_ChatMessage", Storage="_ChatRoom", ThisKey="ChatRoomID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ChatRoom ChatRoom
		{
			get
			{
				return this._ChatRoom.Entity;
			}
			set
			{
				ChatRoom previousValue = this._ChatRoom.Entity;
				if (((previousValue != value) 
							|| (this._ChatRoom.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChatRoom.Entity = null;
						previousValue.ChatMessages.Remove(this);
					}
					this._ChatRoom.Entity = value;
					if ((value != null))
					{
						value.ChatMessages.Add(this);
						this._ChatRoomID = value.ID;
					}
					else
					{
						this._ChatRoomID = default(int);
					}
					this.SendPropertyChanged("ChatRoom");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ChatMessage", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.ChatMessages.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.ChatMessages.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ChatBannedUser")]
	public partial class ChatBannedUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ChatRoomID;
		
		private int _UserID;
		
		private System.Nullable<System.DateTime> _DateTill;
		
		private string _Reason;
		
		private EntityRef<ChatRoom> _ChatRoom;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnChatRoomIDChanging(int value);
    partial void OnChatRoomIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnDateTillChanging(System.Nullable<System.DateTime> value);
    partial void OnDateTillChanged();
    partial void OnReasonChanging(string value);
    partial void OnReasonChanged();
    #endregion
		
		public ChatBannedUser()
		{
			this._ChatRoom = default(EntityRef<ChatRoom>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChatRoomID", DbType="Int NOT NULL")]
		public int ChatRoomID
		{
			get
			{
				return this._ChatRoomID;
			}
			set
			{
				if ((this._ChatRoomID != value))
				{
					if (this._ChatRoom.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChatRoomIDChanging(value);
					this.SendPropertyChanging();
					this._ChatRoomID = value;
					this.SendPropertyChanged("ChatRoomID");
					this.OnChatRoomIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTill", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateTill
		{
			get
			{
				return this._DateTill;
			}
			set
			{
				if ((this._DateTill != value))
				{
					this.OnDateTillChanging(value);
					this.SendPropertyChanging();
					this._DateTill = value;
					this.SendPropertyChanged("DateTill");
					this.OnDateTillChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reason", DbType="NVarChar(MAX)")]
		public string Reason
		{
			get
			{
				return this._Reason;
			}
			set
			{
				if ((this._Reason != value))
				{
					this.OnReasonChanging(value);
					this.SendPropertyChanging();
					this._Reason = value;
					this.SendPropertyChanged("Reason");
					this.OnReasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChatRoom_ChatBannedUser", Storage="_ChatRoom", ThisKey="ChatRoomID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ChatRoom ChatRoom
		{
			get
			{
				return this._ChatRoom.Entity;
			}
			set
			{
				ChatRoom previousValue = this._ChatRoom.Entity;
				if (((previousValue != value) 
							|| (this._ChatRoom.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChatRoom.Entity = null;
						previousValue.ChatBannedUsers.Remove(this);
					}
					this._ChatRoom.Entity = value;
					if ((value != null))
					{
						value.ChatBannedUsers.Add(this);
						this._ChatRoomID = value.ID;
					}
					else
					{
						this._ChatRoomID = default(int);
					}
					this.SendPropertyChanged("ChatRoom");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ChatBannedUser", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.ChatBannedUsers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.ChatBannedUsers.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Round")]
	public partial class Round : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _Participant1ID;
		
		private System.Nullable<int> _Participant2ID;
		
		private int _MatchID;
		
		private int _Number;
		
		private int _Score1;
		
		private int _Score2;
		
		private System.Nullable<int> _IntroducedResultID;
		
		private string _ScreenshotPath;
		
		private int _Status;
		
		private System.DateTime _AddedDate;
		
		private System.Nullable<System.DateTime> _PlayedDate;
		
		private System.Nullable<System.DateTime> _ScheduleDate;
		
		private bool _Player1IsHost;
		
		private bool _IsAdditional;
		
		private string _Score1Text;
		
		private string _Score2Text;
		
		private bool _Extended;
		
		private bool _Technical;
		
		private EntityRef<Participant> _Participant;
		
		private EntityRef<Participant> _Participant1;
		
		private EntityRef<User> _User;
		
		private EntityRef<Match> _Match;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnParticipant1IDChanging(System.Nullable<int> value);
    partial void OnParticipant1IDChanged();
    partial void OnParticipant2IDChanging(System.Nullable<int> value);
    partial void OnParticipant2IDChanged();
    partial void OnMatchIDChanging(int value);
    partial void OnMatchIDChanged();
    partial void OnNumberChanging(int value);
    partial void OnNumberChanged();
    partial void OnScore1Changing(int value);
    partial void OnScore1Changed();
    partial void OnScore2Changing(int value);
    partial void OnScore2Changed();
    partial void OnIntroducedResultIDChanging(System.Nullable<int> value);
    partial void OnIntroducedResultIDChanged();
    partial void OnScreenshotPathChanging(string value);
    partial void OnScreenshotPathChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnPlayedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPlayedDateChanged();
    partial void OnScheduleDateChanging(System.Nullable<System.DateTime> value);
    partial void OnScheduleDateChanged();
    partial void OnPlayer1IsHostChanging(bool value);
    partial void OnPlayer1IsHostChanged();
    partial void OnIsAdditionalChanging(bool value);
    partial void OnIsAdditionalChanged();
    partial void OnScore1TextChanging(string value);
    partial void OnScore1TextChanged();
    partial void OnScore2TextChanging(string value);
    partial void OnScore2TextChanged();
    partial void OnExtendedChanging(bool value);
    partial void OnExtendedChanged();
    partial void OnTechnicalChanging(bool value);
    partial void OnTechnicalChanged();
    #endregion
		
		public Round()
		{
			this._Participant = default(EntityRef<Participant>);
			this._Participant1 = default(EntityRef<Participant>);
			this._User = default(EntityRef<User>);
			this._Match = default(EntityRef<Match>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Participant1ID", DbType="Int")]
		public System.Nullable<int> Participant1ID
		{
			get
			{
				return this._Participant1ID;
			}
			set
			{
				if ((this._Participant1ID != value))
				{
					if (this._Participant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParticipant1IDChanging(value);
					this.SendPropertyChanging();
					this._Participant1ID = value;
					this.SendPropertyChanged("Participant1ID");
					this.OnParticipant1IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Participant2ID", DbType="Int")]
		public System.Nullable<int> Participant2ID
		{
			get
			{
				return this._Participant2ID;
			}
			set
			{
				if ((this._Participant2ID != value))
				{
					if (this._Participant1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParticipant2IDChanging(value);
					this.SendPropertyChanging();
					this._Participant2ID = value;
					this.SendPropertyChanged("Participant2ID");
					this.OnParticipant2IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchID", DbType="Int NOT NULL")]
		public int MatchID
		{
			get
			{
				return this._MatchID;
			}
			set
			{
				if ((this._MatchID != value))
				{
					if (this._Match.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatchIDChanging(value);
					this.SendPropertyChanging();
					this._MatchID = value;
					this.SendPropertyChanged("MatchID");
					this.OnMatchIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="Int NOT NULL")]
		public int Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score1", DbType="Int NOT NULL")]
		public int Score1
		{
			get
			{
				return this._Score1;
			}
			set
			{
				if ((this._Score1 != value))
				{
					this.OnScore1Changing(value);
					this.SendPropertyChanging();
					this._Score1 = value;
					this.SendPropertyChanged("Score1");
					this.OnScore1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score2", DbType="Int NOT NULL")]
		public int Score2
		{
			get
			{
				return this._Score2;
			}
			set
			{
				if ((this._Score2 != value))
				{
					this.OnScore2Changing(value);
					this.SendPropertyChanging();
					this._Score2 = value;
					this.SendPropertyChanged("Score2");
					this.OnScore2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IntroducedResultID", DbType="Int")]
		public System.Nullable<int> IntroducedResultID
		{
			get
			{
				return this._IntroducedResultID;
			}
			set
			{
				if ((this._IntroducedResultID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIntroducedResultIDChanging(value);
					this.SendPropertyChanging();
					this._IntroducedResultID = value;
					this.SendPropertyChanged("IntroducedResultID");
					this.OnIntroducedResultIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScreenshotPath", DbType="NVarChar(150)")]
		public string ScreenshotPath
		{
			get
			{
				return this._ScreenshotPath;
			}
			set
			{
				if ((this._ScreenshotPath != value))
				{
					this.OnScreenshotPathChanging(value);
					this.SendPropertyChanging();
					this._ScreenshotPath = value;
					this.SendPropertyChanged("ScreenshotPath");
					this.OnScreenshotPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> PlayedDate
		{
			get
			{
				return this._PlayedDate;
			}
			set
			{
				if ((this._PlayedDate != value))
				{
					this.OnPlayedDateChanging(value);
					this.SendPropertyChanging();
					this._PlayedDate = value;
					this.SendPropertyChanged("PlayedDate");
					this.OnPlayedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScheduleDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ScheduleDate
		{
			get
			{
				return this._ScheduleDate;
			}
			set
			{
				if ((this._ScheduleDate != value))
				{
					this.OnScheduleDateChanging(value);
					this.SendPropertyChanging();
					this._ScheduleDate = value;
					this.SendPropertyChanged("ScheduleDate");
					this.OnScheduleDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Player1IsHost", DbType="Bit NOT NULL")]
		public bool Player1IsHost
		{
			get
			{
				return this._Player1IsHost;
			}
			set
			{
				if ((this._Player1IsHost != value))
				{
					this.OnPlayer1IsHostChanging(value);
					this.SendPropertyChanging();
					this._Player1IsHost = value;
					this.SendPropertyChanged("Player1IsHost");
					this.OnPlayer1IsHostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAdditional", DbType="Bit NOT NULL")]
		public bool IsAdditional
		{
			get
			{
				return this._IsAdditional;
			}
			set
			{
				if ((this._IsAdditional != value))
				{
					this.OnIsAdditionalChanging(value);
					this.SendPropertyChanging();
					this._IsAdditional = value;
					this.SendPropertyChanged("IsAdditional");
					this.OnIsAdditionalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score1Text", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Score1Text
		{
			get
			{
				return this._Score1Text;
			}
			set
			{
				if ((this._Score1Text != value))
				{
					this.OnScore1TextChanging(value);
					this.SendPropertyChanging();
					this._Score1Text = value;
					this.SendPropertyChanged("Score1Text");
					this.OnScore1TextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score2Text", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Score2Text
		{
			get
			{
				return this._Score2Text;
			}
			set
			{
				if ((this._Score2Text != value))
				{
					this.OnScore2TextChanging(value);
					this.SendPropertyChanging();
					this._Score2Text = value;
					this.SendPropertyChanged("Score2Text");
					this.OnScore2TextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Extended", DbType="Bit NOT NULL")]
		public bool Extended
		{
			get
			{
				return this._Extended;
			}
			set
			{
				if ((this._Extended != value))
				{
					this.OnExtendedChanging(value);
					this.SendPropertyChanging();
					this._Extended = value;
					this.SendPropertyChanged("Extended");
					this.OnExtendedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Technical", DbType="Bit NOT NULL")]
		public bool Technical
		{
			get
			{
				return this._Technical;
			}
			set
			{
				if ((this._Technical != value))
				{
					this.OnTechnicalChanging(value);
					this.SendPropertyChanging();
					this._Technical = value;
					this.SendPropertyChanged("Technical");
					this.OnTechnicalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Participant_Round", Storage="_Participant", ThisKey="Participant1ID", OtherKey="ID", IsForeignKey=true)]
		public Participant Participant
		{
			get
			{
				return this._Participant.Entity;
			}
			set
			{
				Participant previousValue = this._Participant.Entity;
				if (((previousValue != value) 
							|| (this._Participant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Participant.Entity = null;
						previousValue.Rounds.Remove(this);
					}
					this._Participant.Entity = value;
					if ((value != null))
					{
						value.Rounds.Add(this);
						this._Participant1ID = value.ID;
					}
					else
					{
						this._Participant1ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Participant");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Participant_Round1", Storage="_Participant1", ThisKey="Participant2ID", OtherKey="ID", IsForeignKey=true)]
		public Participant Participant1
		{
			get
			{
				return this._Participant1.Entity;
			}
			set
			{
				Participant previousValue = this._Participant1.Entity;
				if (((previousValue != value) 
							|| (this._Participant1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Participant1.Entity = null;
						previousValue.Rounds1.Remove(this);
					}
					this._Participant1.Entity = value;
					if ((value != null))
					{
						value.Rounds1.Add(this);
						this._Participant2ID = value.ID;
					}
					else
					{
						this._Participant2ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Participant1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Round", Storage="_User", ThisKey="IntroducedResultID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Rounds.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Rounds.Add(this);
						this._IntroducedResultID = value.ID;
					}
					else
					{
						this._IntroducedResultID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Match_Round", Storage="_Match", ThisKey="MatchID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Match Match
		{
			get
			{
				return this._Match.Entity;
			}
			set
			{
				Match previousValue = this._Match.Entity;
				if (((previousValue != value) 
							|| (this._Match.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Match.Entity = null;
						previousValue.Rounds.Remove(this);
					}
					this._Match.Entity = value;
					if ((value != null))
					{
						value.Rounds.Add(this);
						this._MatchID = value.ID;
					}
					else
					{
						this._MatchID = default(int);
					}
					this.SendPropertyChanged("Match");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserTeam")]
	public partial class UserTeam : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _TeamID;
		
		private int _UserID;
		
		private bool _IsCaptain;
		
		private bool _Accepted;
		
		private EntityRef<Team> _Team;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTeamIDChanging(int value);
    partial void OnTeamIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnIsCaptainChanging(bool value);
    partial void OnIsCaptainChanged();
    partial void OnAcceptedChanging(bool value);
    partial void OnAcceptedChanged();
    #endregion
		
		public UserTeam()
		{
			this._Team = default(EntityRef<Team>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamID", DbType="Int NOT NULL")]
		public int TeamID
		{
			get
			{
				return this._TeamID;
			}
			set
			{
				if ((this._TeamID != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIDChanging(value);
					this.SendPropertyChanging();
					this._TeamID = value;
					this.SendPropertyChanged("TeamID");
					this.OnTeamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCaptain", DbType="Bit NOT NULL")]
		public bool IsCaptain
		{
			get
			{
				return this._IsCaptain;
			}
			set
			{
				if ((this._IsCaptain != value))
				{
					this.OnIsCaptainChanging(value);
					this.SendPropertyChanging();
					this._IsCaptain = value;
					this.SendPropertyChanged("IsCaptain");
					this.OnIsCaptainChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Accepted", DbType="Bit NOT NULL")]
		public bool Accepted
		{
			get
			{
				return this._Accepted;
			}
			set
			{
				if ((this._Accepted != value))
				{
					this.OnAcceptedChanging(value);
					this.SendPropertyChanging();
					this._Accepted = value;
					this.SendPropertyChanged("Accepted");
					this.OnAcceptedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_UserTeam", Storage="_Team", ThisKey="TeamID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.UserTeams.Remove(this);
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.UserTeams.Add(this);
						this._TeamID = value.ID;
					}
					else
					{
						this._TeamID = default(int);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserTeam", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserTeams.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserTeams.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserAward")]
	public partial class UserAward : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _AwardID;
		
		private int _UserID;
		
		private System.DateTime _AddedDate;
		
		private EntityRef<Award> _Award;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAwardIDChanging(int value);
    partial void OnAwardIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    #endregion
		
		public UserAward()
		{
			this._Award = default(EntityRef<Award>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AwardID", DbType="Int NOT NULL")]
		public int AwardID
		{
			get
			{
				return this._AwardID;
			}
			set
			{
				if ((this._AwardID != value))
				{
					if (this._Award.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAwardIDChanging(value);
					this.SendPropertyChanging();
					this._AwardID = value;
					this.SendPropertyChanged("AwardID");
					this.OnAwardIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Award_UserAward", Storage="_Award", ThisKey="AwardID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Award Award
		{
			get
			{
				return this._Award.Entity;
			}
			set
			{
				Award previousValue = this._Award.Entity;
				if (((previousValue != value) 
							|| (this._Award.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Award.Entity = null;
						previousValue.UserAwards.Remove(this);
					}
					this._Award.Entity = value;
					if ((value != null))
					{
						value.UserAwards.Add(this);
						this._AwardID = value.ID;
					}
					else
					{
						this._AwardID = default(int);
					}
					this.SendPropertyChanged("Award");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserAward", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserAwards.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserAwards.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Participant")]
	public partial class Participant : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _TournamentID;
		
		private int _UserID;
		
		private System.Nullable<int> _TeamID;
		
		private System.Nullable<int> _TournamentGroupID;
		
		private System.DateTime _AddedDate;
		
		private string _Name;
		
		private string _ImagePath18;
		
		private string _ImagePath26;
		
		private string _ImagePath30;
		
		private EntitySet<Round> _Rounds;
		
		private EntitySet<Round> _Rounds1;
		
		private EntitySet<Match> _Matches;
		
		private EntitySet<Match> _Matches1;
		
		private EntitySet<Match> _Matches2;
		
		private EntitySet<LeagueParticipant> _LeagueParticipants;
		
		private EntityRef<TournamentGroup> _TournamentGroup;
		
		private EntityRef<Team> _Team;
		
		private EntityRef<User> _User;
		
		private EntityRef<Tournament> _Tournament;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTournamentIDChanging(System.Nullable<int> value);
    partial void OnTournamentIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnTeamIDChanging(System.Nullable<int> value);
    partial void OnTeamIDChanged();
    partial void OnTournamentGroupIDChanging(System.Nullable<int> value);
    partial void OnTournamentGroupIDChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnImagePath18Changing(string value);
    partial void OnImagePath18Changed();
    partial void OnImagePath26Changing(string value);
    partial void OnImagePath26Changed();
    partial void OnImagePath30Changing(string value);
    partial void OnImagePath30Changed();
    #endregion
		
		public Participant()
		{
			this._Rounds = new EntitySet<Round>(new Action<Round>(this.attach_Rounds), new Action<Round>(this.detach_Rounds));
			this._Rounds1 = new EntitySet<Round>(new Action<Round>(this.attach_Rounds1), new Action<Round>(this.detach_Rounds1));
			this._Matches = new EntitySet<Match>(new Action<Match>(this.attach_Matches), new Action<Match>(this.detach_Matches));
			this._Matches1 = new EntitySet<Match>(new Action<Match>(this.attach_Matches1), new Action<Match>(this.detach_Matches1));
			this._Matches2 = new EntitySet<Match>(new Action<Match>(this.attach_Matches2), new Action<Match>(this.detach_Matches2));
			this._LeagueParticipants = new EntitySet<LeagueParticipant>(new Action<LeagueParticipant>(this.attach_LeagueParticipants), new Action<LeagueParticipant>(this.detach_LeagueParticipants));
			this._TournamentGroup = default(EntityRef<TournamentGroup>);
			this._Team = default(EntityRef<Team>);
			this._User = default(EntityRef<User>);
			this._Tournament = default(EntityRef<Tournament>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentID", DbType="Int")]
		public System.Nullable<int> TournamentID
		{
			get
			{
				return this._TournamentID;
			}
			set
			{
				if ((this._TournamentID != value))
				{
					if (this._Tournament.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTournamentIDChanging(value);
					this.SendPropertyChanging();
					this._TournamentID = value;
					this.SendPropertyChanged("TournamentID");
					this.OnTournamentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamID", DbType="Int")]
		public System.Nullable<int> TeamID
		{
			get
			{
				return this._TeamID;
			}
			set
			{
				if ((this._TeamID != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIDChanging(value);
					this.SendPropertyChanging();
					this._TeamID = value;
					this.SendPropertyChanged("TeamID");
					this.OnTeamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentGroupID", DbType="Int")]
		public System.Nullable<int> TournamentGroupID
		{
			get
			{
				return this._TournamentGroupID;
			}
			set
			{
				if ((this._TournamentGroupID != value))
				{
					if (this._TournamentGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTournamentGroupIDChanging(value);
					this.SendPropertyChanging();
					this._TournamentGroupID = value;
					this.SendPropertyChanged("TournamentGroupID");
					this.OnTournamentGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(500)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImagePath18", DbType="NVarChar(150)")]
		public string ImagePath18
		{
			get
			{
				return this._ImagePath18;
			}
			set
			{
				if ((this._ImagePath18 != value))
				{
					this.OnImagePath18Changing(value);
					this.SendPropertyChanging();
					this._ImagePath18 = value;
					this.SendPropertyChanged("ImagePath18");
					this.OnImagePath18Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImagePath26", DbType="NVarChar(150)")]
		public string ImagePath26
		{
			get
			{
				return this._ImagePath26;
			}
			set
			{
				if ((this._ImagePath26 != value))
				{
					this.OnImagePath26Changing(value);
					this.SendPropertyChanging();
					this._ImagePath26 = value;
					this.SendPropertyChanged("ImagePath26");
					this.OnImagePath26Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImagePath30", DbType="NVarChar(150)")]
		public string ImagePath30
		{
			get
			{
				return this._ImagePath30;
			}
			set
			{
				if ((this._ImagePath30 != value))
				{
					this.OnImagePath30Changing(value);
					this.SendPropertyChanging();
					this._ImagePath30 = value;
					this.SendPropertyChanged("ImagePath30");
					this.OnImagePath30Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Participant_Round", Storage="_Rounds", ThisKey="ID", OtherKey="Participant1ID")]
		public EntitySet<Round> Rounds
		{
			get
			{
				return this._Rounds;
			}
			set
			{
				this._Rounds.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Participant_Round1", Storage="_Rounds1", ThisKey="ID", OtherKey="Participant2ID")]
		public EntitySet<Round> Rounds1
		{
			get
			{
				return this._Rounds1;
			}
			set
			{
				this._Rounds1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Participant_Match", Storage="_Matches", ThisKey="ID", OtherKey="Participant1ID")]
		public EntitySet<Match> Matches
		{
			get
			{
				return this._Matches;
			}
			set
			{
				this._Matches.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Participant_Match1", Storage="_Matches1", ThisKey="ID", OtherKey="Participant2ID")]
		public EntitySet<Match> Matches1
		{
			get
			{
				return this._Matches1;
			}
			set
			{
				this._Matches1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Participant_Match2", Storage="_Matches2", ThisKey="ID", OtherKey="WinnerID")]
		public EntitySet<Match> Matches2
		{
			get
			{
				return this._Matches2;
			}
			set
			{
				this._Matches2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Participant_LeagueParticipant", Storage="_LeagueParticipants", ThisKey="ID", OtherKey="ParticipantID")]
		public EntitySet<LeagueParticipant> LeagueParticipants
		{
			get
			{
				return this._LeagueParticipants;
			}
			set
			{
				this._LeagueParticipants.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TournamentGroup_Participant", Storage="_TournamentGroup", ThisKey="TournamentGroupID", OtherKey="ID", IsForeignKey=true)]
		public TournamentGroup TournamentGroup
		{
			get
			{
				return this._TournamentGroup.Entity;
			}
			set
			{
				TournamentGroup previousValue = this._TournamentGroup.Entity;
				if (((previousValue != value) 
							|| (this._TournamentGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TournamentGroup.Entity = null;
						previousValue.Participants.Remove(this);
					}
					this._TournamentGroup.Entity = value;
					if ((value != null))
					{
						value.Participants.Add(this);
						this._TournamentGroupID = value.ID;
					}
					else
					{
						this._TournamentGroupID = default(Nullable<int>);
					}
					this.SendPropertyChanged("TournamentGroup");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Participant", Storage="_Team", ThisKey="TeamID", OtherKey="ID", IsForeignKey=true)]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.Participants.Remove(this);
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.Participants.Add(this);
						this._TeamID = value.ID;
					}
					else
					{
						this._TeamID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Participant", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Participants.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Participants.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tournament_Participant", Storage="_Tournament", ThisKey="TournamentID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Tournament Tournament
		{
			get
			{
				return this._Tournament.Entity;
			}
			set
			{
				Tournament previousValue = this._Tournament.Entity;
				if (((previousValue != value) 
							|| (this._Tournament.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tournament.Entity = null;
						previousValue.Participants.Remove(this);
					}
					this._Tournament.Entity = value;
					if ((value != null))
					{
						value.Participants.Add(this);
						this._TournamentID = value.ID;
					}
					else
					{
						this._TournamentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Tournament");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Rounds(Round entity)
		{
			this.SendPropertyChanging();
			entity.Participant = this;
		}
		
		private void detach_Rounds(Round entity)
		{
			this.SendPropertyChanging();
			entity.Participant = null;
		}
		
		private void attach_Rounds1(Round entity)
		{
			this.SendPropertyChanging();
			entity.Participant1 = this;
		}
		
		private void detach_Rounds1(Round entity)
		{
			this.SendPropertyChanging();
			entity.Participant1 = null;
		}
		
		private void attach_Matches(Match entity)
		{
			this.SendPropertyChanging();
			entity.Participant = this;
		}
		
		private void detach_Matches(Match entity)
		{
			this.SendPropertyChanging();
			entity.Participant = null;
		}
		
		private void attach_Matches1(Match entity)
		{
			this.SendPropertyChanging();
			entity.Participant1 = this;
		}
		
		private void detach_Matches1(Match entity)
		{
			this.SendPropertyChanging();
			entity.Participant1 = null;
		}
		
		private void attach_Matches2(Match entity)
		{
			this.SendPropertyChanging();
			entity.Participant2 = this;
		}
		
		private void detach_Matches2(Match entity)
		{
			this.SendPropertyChanging();
			entity.Participant2 = null;
		}
		
		private void attach_LeagueParticipants(LeagueParticipant entity)
		{
			this.SendPropertyChanging();
			entity.Participant = this;
		}
		
		private void detach_LeagueParticipants(LeagueParticipant entity)
		{
			this.SendPropertyChanging();
			entity.Participant = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Camera")]
	public partial class Camera : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _TournamentID;
		
		private System.Nullable<int> _MatchID;
		
		private string _Name;
		
		private string _Code;
		
		private System.DateTime _AddedDate;
		
		private bool _Enabled;
		
		private EntitySet<MainCamera> _MainCameras;
		
		private EntityRef<Match> _Match;
		
		private EntityRef<Tournament> _Tournament;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTournamentIDChanging(int value);
    partial void OnTournamentIDChanged();
    partial void OnMatchIDChanging(System.Nullable<int> value);
    partial void OnMatchIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnEnabledChanging(bool value);
    partial void OnEnabledChanged();
    #endregion
		
		public Camera()
		{
			this._MainCameras = new EntitySet<MainCamera>(new Action<MainCamera>(this.attach_MainCameras), new Action<MainCamera>(this.detach_MainCameras));
			this._Match = default(EntityRef<Match>);
			this._Tournament = default(EntityRef<Tournament>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentID", DbType="Int NOT NULL")]
		public int TournamentID
		{
			get
			{
				return this._TournamentID;
			}
			set
			{
				if ((this._TournamentID != value))
				{
					if (this._Tournament.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTournamentIDChanging(value);
					this.SendPropertyChanging();
					this._TournamentID = value;
					this.SendPropertyChanged("TournamentID");
					this.OnTournamentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchID", DbType="Int")]
		public System.Nullable<int> MatchID
		{
			get
			{
				return this._MatchID;
			}
			set
			{
				if ((this._MatchID != value))
				{
					if (this._Match.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatchIDChanging(value);
					this.SendPropertyChanging();
					this._MatchID = value;
					this.SendPropertyChanged("MatchID");
					this.OnMatchIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Enabled", DbType="Bit NOT NULL")]
		public bool Enabled
		{
			get
			{
				return this._Enabled;
			}
			set
			{
				if ((this._Enabled != value))
				{
					this.OnEnabledChanging(value);
					this.SendPropertyChanging();
					this._Enabled = value;
					this.SendPropertyChanged("Enabled");
					this.OnEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Camera_MainCamera", Storage="_MainCameras", ThisKey="ID", OtherKey="CameraID")]
		public EntitySet<MainCamera> MainCameras
		{
			get
			{
				return this._MainCameras;
			}
			set
			{
				this._MainCameras.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Match_Camera", Storage="_Match", ThisKey="MatchID", OtherKey="ID", IsForeignKey=true)]
		public Match Match
		{
			get
			{
				return this._Match.Entity;
			}
			set
			{
				Match previousValue = this._Match.Entity;
				if (((previousValue != value) 
							|| (this._Match.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Match.Entity = null;
						previousValue.Cameras.Remove(this);
					}
					this._Match.Entity = value;
					if ((value != null))
					{
						value.Cameras.Add(this);
						this._MatchID = value.ID;
					}
					else
					{
						this._MatchID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Match");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tournament_Camera", Storage="_Tournament", ThisKey="TournamentID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Tournament Tournament
		{
			get
			{
				return this._Tournament.Entity;
			}
			set
			{
				Tournament previousValue = this._Tournament.Entity;
				if (((previousValue != value) 
							|| (this._Tournament.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tournament.Entity = null;
						previousValue.Cameras.Remove(this);
					}
					this._Tournament.Entity = value;
					if ((value != null))
					{
						value.Cameras.Add(this);
						this._TournamentID = value.ID;
					}
					else
					{
						this._TournamentID = default(int);
					}
					this.SendPropertyChanged("Tournament");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MainCameras(MainCamera entity)
		{
			this.SendPropertyChanging();
			entity.Camera = this;
		}
		
		private void detach_MainCameras(MainCamera entity)
		{
			this.SendPropertyChanging();
			entity.Camera = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserRoleGroup")]
	public partial class UserRoleGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserRoleID;
		
		private int _GroupID;
		
		private EntityRef<UserRole> _UserRole;
		
		private EntityRef<Group> _Group;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserRoleIDChanging(int value);
    partial void OnUserRoleIDChanged();
    partial void OnGroupIDChanging(int value);
    partial void OnGroupIDChanged();
    #endregion
		
		public UserRoleGroup()
		{
			this._UserRole = default(EntityRef<UserRole>);
			this._Group = default(EntityRef<Group>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserRoleID", DbType="Int NOT NULL")]
		public int UserRoleID
		{
			get
			{
				return this._UserRoleID;
			}
			set
			{
				if ((this._UserRoleID != value))
				{
					if (this._UserRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserRoleIDChanging(value);
					this.SendPropertyChanging();
					this._UserRoleID = value;
					this.SendPropertyChanged("UserRoleID");
					this.OnUserRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="Int NOT NULL")]
		public int GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserRole_UserRoleGroup", Storage="_UserRole", ThisKey="UserRoleID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public UserRole UserRole
		{
			get
			{
				return this._UserRole.Entity;
			}
			set
			{
				UserRole previousValue = this._UserRole.Entity;
				if (((previousValue != value) 
							|| (this._UserRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserRole.Entity = null;
						previousValue.UserRoleGroups.Remove(this);
					}
					this._UserRole.Entity = value;
					if ((value != null))
					{
						value.UserRoleGroups.Add(this);
						this._UserRoleID = value.ID;
					}
					else
					{
						this._UserRoleID = default(int);
					}
					this.SendPropertyChanged("UserRole");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_UserRoleGroup", Storage="_Group", ThisKey="GroupID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.UserRoleGroups.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.UserRoleGroups.Add(this);
						this._GroupID = value.ID;
					}
					else
					{
						this._GroupID = default(int);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TournamentCondition")]
	public partial class TournamentCondition : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private bool _FirstName;
		
		private bool _LastName;
		
		private bool _PlaystationID;
		
		private bool _XboxGametag;
		
		private bool _EAAccount;
		
		private bool _SteamAccount;
		
		private bool _GarenaAccount;
		
		private bool _ICQ;
		
		private bool _Skype;
		
		private bool _Vk;
		
		private EntitySet<Tournament> _Tournaments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFirstNameChanging(bool value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(bool value);
    partial void OnLastNameChanged();
    partial void OnPlaystationIDChanging(bool value);
    partial void OnPlaystationIDChanged();
    partial void OnXboxGametagChanging(bool value);
    partial void OnXboxGametagChanged();
    partial void OnEAAccountChanging(bool value);
    partial void OnEAAccountChanged();
    partial void OnSteamAccountChanging(bool value);
    partial void OnSteamAccountChanged();
    partial void OnGarenaAccountChanging(bool value);
    partial void OnGarenaAccountChanged();
    partial void OnICQChanging(bool value);
    partial void OnICQChanged();
    partial void OnSkypeChanging(bool value);
    partial void OnSkypeChanged();
    partial void OnVkChanging(bool value);
    partial void OnVkChanged();
    #endregion
		
		public TournamentCondition()
		{
			this._Tournaments = new EntitySet<Tournament>(new Action<Tournament>(this.attach_Tournaments), new Action<Tournament>(this.detach_Tournaments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="Bit NOT NULL")]
		public bool FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="Bit NOT NULL")]
		public bool LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlaystationID", DbType="Bit NOT NULL")]
		public bool PlaystationID
		{
			get
			{
				return this._PlaystationID;
			}
			set
			{
				if ((this._PlaystationID != value))
				{
					this.OnPlaystationIDChanging(value);
					this.SendPropertyChanging();
					this._PlaystationID = value;
					this.SendPropertyChanged("PlaystationID");
					this.OnPlaystationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_XboxGametag", DbType="Bit NOT NULL")]
		public bool XboxGametag
		{
			get
			{
				return this._XboxGametag;
			}
			set
			{
				if ((this._XboxGametag != value))
				{
					this.OnXboxGametagChanging(value);
					this.SendPropertyChanging();
					this._XboxGametag = value;
					this.SendPropertyChanged("XboxGametag");
					this.OnXboxGametagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EAAccount", DbType="Bit NOT NULL")]
		public bool EAAccount
		{
			get
			{
				return this._EAAccount;
			}
			set
			{
				if ((this._EAAccount != value))
				{
					this.OnEAAccountChanging(value);
					this.SendPropertyChanging();
					this._EAAccount = value;
					this.SendPropertyChanged("EAAccount");
					this.OnEAAccountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SteamAccount", DbType="Bit NOT NULL")]
		public bool SteamAccount
		{
			get
			{
				return this._SteamAccount;
			}
			set
			{
				if ((this._SteamAccount != value))
				{
					this.OnSteamAccountChanging(value);
					this.SendPropertyChanging();
					this._SteamAccount = value;
					this.SendPropertyChanged("SteamAccount");
					this.OnSteamAccountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GarenaAccount", DbType="Bit NOT NULL")]
		public bool GarenaAccount
		{
			get
			{
				return this._GarenaAccount;
			}
			set
			{
				if ((this._GarenaAccount != value))
				{
					this.OnGarenaAccountChanging(value);
					this.SendPropertyChanging();
					this._GarenaAccount = value;
					this.SendPropertyChanged("GarenaAccount");
					this.OnGarenaAccountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ICQ", DbType="Bit NOT NULL")]
		public bool ICQ
		{
			get
			{
				return this._ICQ;
			}
			set
			{
				if ((this._ICQ != value))
				{
					this.OnICQChanging(value);
					this.SendPropertyChanging();
					this._ICQ = value;
					this.SendPropertyChanged("ICQ");
					this.OnICQChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Skype", DbType="Bit NOT NULL")]
		public bool Skype
		{
			get
			{
				return this._Skype;
			}
			set
			{
				if ((this._Skype != value))
				{
					this.OnSkypeChanging(value);
					this.SendPropertyChanging();
					this._Skype = value;
					this.SendPropertyChanged("Skype");
					this.OnSkypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Vk", DbType="Bit NOT NULL")]
		public bool Vk
		{
			get
			{
				return this._Vk;
			}
			set
			{
				if ((this._Vk != value))
				{
					this.OnVkChanging(value);
					this.SendPropertyChanging();
					this._Vk = value;
					this.SendPropertyChanged("Vk");
					this.OnVkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TournamentCondition_Tournament", Storage="_Tournaments", ThisKey="ID", OtherKey="TournamentConditionID")]
		public EntitySet<Tournament> Tournaments
		{
			get
			{
				return this._Tournaments;
			}
			set
			{
				this._Tournaments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tournaments(Tournament entity)
		{
			this.SendPropertyChanging();
			entity.TournamentCondition = this;
		}
		
		private void detach_Tournaments(Tournament entity)
		{
			this.SendPropertyChanging();
			entity.TournamentCondition = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GroupRating")]
	public partial class GroupRating : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _GroupID;
		
		private int _MatchID;
		
		private int _Score;
		
		private System.DateTime _AddedDate;
		
		private string _Description;
		
		private EntityRef<Group> _Group;
		
		private EntityRef<Match> _Match;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnGroupIDChanging(int value);
    partial void OnGroupIDChanged();
    partial void OnMatchIDChanging(int value);
    partial void OnMatchIDChanged();
    partial void OnScoreChanging(int value);
    partial void OnScoreChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public GroupRating()
		{
			this._Group = default(EntityRef<Group>);
			this._Match = default(EntityRef<Match>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="Int NOT NULL")]
		public int GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchID", DbType="Int NOT NULL")]
		public int MatchID
		{
			get
			{
				return this._MatchID;
			}
			set
			{
				if ((this._MatchID != value))
				{
					if (this._Match.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatchIDChanging(value);
					this.SendPropertyChanging();
					this._MatchID = value;
					this.SendPropertyChanged("MatchID");
					this.OnMatchIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score", DbType="Int NOT NULL")]
		public int Score
		{
			get
			{
				return this._Score;
			}
			set
			{
				if ((this._Score != value))
				{
					this.OnScoreChanging(value);
					this.SendPropertyChanging();
					this._Score = value;
					this.SendPropertyChanged("Score");
					this.OnScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_GroupRating", Storage="_Group", ThisKey="GroupID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.GroupRatings.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.GroupRatings.Add(this);
						this._GroupID = value.ID;
					}
					else
					{
						this._GroupID = default(int);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Match_GroupRating", Storage="_Match", ThisKey="MatchID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Match Match
		{
			get
			{
				return this._Match.Entity;
			}
			set
			{
				Match previousValue = this._Match.Entity;
				if (((previousValue != value) 
							|| (this._Match.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Match.Entity = null;
						previousValue.GroupRatings.Remove(this);
					}
					this._Match.Entity = value;
					if ((value != null))
					{
						value.GroupRatings.Add(this);
						this._MatchID = value.ID;
					}
					else
					{
						this._MatchID = default(int);
					}
					this.SendPropertyChanged("Match");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserGroup")]
	public partial class UserGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private int _GroupID;
		
		private System.DateTime _AddedDate;
		
		private int _Status;
		
		private EntityRef<Group> _Group;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnGroupIDChanging(int value);
    partial void OnGroupIDChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    #endregion
		
		public UserGroup()
		{
			this._Group = default(EntityRef<Group>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="Int NOT NULL")]
		public int GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_UserGroup", Storage="_Group", ThisKey="GroupID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.UserGroups.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.UserGroups.Add(this);
						this._GroupID = value.ID;
					}
					else
					{
						this._GroupID = default(int);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserGroup", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserGroups.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserGroups.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Message")]
	public partial class Message : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _SenderID;
		
		private int _ReceiverID;
		
		private System.Nullable<int> _GameID;
		
		private System.Nullable<int> _MatchID;
		
		private System.Nullable<int> _GroupID;
		
		private System.DateTime _AddedDate;
		
		private string _Text;
		
		private int _SubjectID;
		
		private bool _IsSend;
		
		private System.Nullable<System.DateTime> _ReadedDate;
		
		private bool _IsDeleted;
		
		private EntitySet<Match> _Matches;
		
		private EntityRef<Subject> _Subject;
		
		private EntityRef<Game> _Game;
		
		private EntityRef<Group> _Group;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
		private EntityRef<Match> _Match;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSenderIDChanging(int value);
    partial void OnSenderIDChanged();
    partial void OnReceiverIDChanging(int value);
    partial void OnReceiverIDChanged();
    partial void OnGameIDChanging(System.Nullable<int> value);
    partial void OnGameIDChanged();
    partial void OnMatchIDChanging(System.Nullable<int> value);
    partial void OnMatchIDChanged();
    partial void OnGroupIDChanging(System.Nullable<int> value);
    partial void OnGroupIDChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnSubjectIDChanging(int value);
    partial void OnSubjectIDChanged();
    partial void OnIsSendChanging(bool value);
    partial void OnIsSendChanged();
    partial void OnReadedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnReadedDateChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public Message()
		{
			this._Matches = new EntitySet<Match>(new Action<Match>(this.attach_Matches), new Action<Match>(this.detach_Matches));
			this._Subject = default(EntityRef<Subject>);
			this._Game = default(EntityRef<Game>);
			this._Group = default(EntityRef<Group>);
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			this._Match = default(EntityRef<Match>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SenderID", DbType="Int NOT NULL")]
		public int SenderID
		{
			get
			{
				return this._SenderID;
			}
			set
			{
				if ((this._SenderID != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSenderIDChanging(value);
					this.SendPropertyChanging();
					this._SenderID = value;
					this.SendPropertyChanged("SenderID");
					this.OnSenderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceiverID", DbType="Int NOT NULL")]
		public int ReceiverID
		{
			get
			{
				return this._ReceiverID;
			}
			set
			{
				if ((this._ReceiverID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReceiverIDChanging(value);
					this.SendPropertyChanging();
					this._ReceiverID = value;
					this.SendPropertyChanged("ReceiverID");
					this.OnReceiverIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameID", DbType="Int")]
		public System.Nullable<int> GameID
		{
			get
			{
				return this._GameID;
			}
			set
			{
				if ((this._GameID != value))
				{
					if (this._Game.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameIDChanging(value);
					this.SendPropertyChanging();
					this._GameID = value;
					this.SendPropertyChanged("GameID");
					this.OnGameIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchID", DbType="Int")]
		public System.Nullable<int> MatchID
		{
			get
			{
				return this._MatchID;
			}
			set
			{
				if ((this._MatchID != value))
				{
					if (this._Match.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatchIDChanging(value);
					this.SendPropertyChanging();
					this._MatchID = value;
					this.SendPropertyChanged("MatchID");
					this.OnMatchIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="Int")]
		public System.Nullable<int> GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectID", DbType="Int NOT NULL")]
		public int SubjectID
		{
			get
			{
				return this._SubjectID;
			}
			set
			{
				if ((this._SubjectID != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectID = value;
					this.SendPropertyChanged("SubjectID");
					this.OnSubjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSend", DbType="Bit NOT NULL")]
		public bool IsSend
		{
			get
			{
				return this._IsSend;
			}
			set
			{
				if ((this._IsSend != value))
				{
					this.OnIsSendChanging(value);
					this.SendPropertyChanging();
					this._IsSend = value;
					this.SendPropertyChanged("IsSend");
					this.OnIsSendChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReadedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ReadedDate
		{
			get
			{
				return this._ReadedDate;
			}
			set
			{
				if ((this._ReadedDate != value))
				{
					this.OnReadedDateChanging(value);
					this.SendPropertyChanging();
					this._ReadedDate = value;
					this.SendPropertyChanged("ReadedDate");
					this.OnReadedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Message_Match", Storage="_Matches", ThisKey="ID", OtherKey="MessageID")]
		public EntitySet<Match> Matches
		{
			get
			{
				return this._Matches;
			}
			set
			{
				this._Matches.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Message", Storage="_Subject", ThisKey="SubjectID", OtherKey="ID", IsForeignKey=true)]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.Messages.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.Messages.Add(this);
						this._SubjectID = value.ID;
					}
					else
					{
						this._SubjectID = default(int);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_Message", Storage="_Game", ThisKey="GameID", OtherKey="ID", IsForeignKey=true)]
		public Game Game
		{
			get
			{
				return this._Game.Entity;
			}
			set
			{
				Game previousValue = this._Game.Entity;
				if (((previousValue != value) 
							|| (this._Game.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Game.Entity = null;
						previousValue.Messages.Remove(this);
					}
					this._Game.Entity = value;
					if ((value != null))
					{
						value.Messages.Add(this);
						this._GameID = value.ID;
					}
					else
					{
						this._GameID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Game");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_Message", Storage="_Group", ThisKey="GroupID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.Messages.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.Messages.Add(this);
						this._GroupID = value.ID;
					}
					else
					{
						this._GroupID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Message", Storage="_User", ThisKey="ReceiverID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Messages.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Messages.Add(this);
						this._ReceiverID = value.ID;
					}
					else
					{
						this._ReceiverID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Message1", Storage="_User1", ThisKey="SenderID", OtherKey="ID", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.Messages1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.Messages1.Add(this);
						this._SenderID = value.ID;
					}
					else
					{
						this._SenderID = default(int);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Match_Message", Storage="_Match", ThisKey="MatchID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Match Match
		{
			get
			{
				return this._Match.Entity;
			}
			set
			{
				Match previousValue = this._Match.Entity;
				if (((previousValue != value) 
							|| (this._Match.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Match.Entity = null;
						previousValue.Messages.Remove(this);
					}
					this._Match.Entity = value;
					if ((value != null))
					{
						value.Messages.Add(this);
						this._MatchID = value.ID;
					}
					else
					{
						this._MatchID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Match");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Matches(Match entity)
		{
			this.SendPropertyChanging();
			entity.Message = this;
		}
		
		private void detach_Matches(Match entity)
		{
			this.SendPropertyChanging();
			entity.Message = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserGroupHistory")]
	public partial class UserGroupHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private int _GroupID;
		
		private System.DateTime _AddedDate;
		
		private System.Nullable<System.DateTime> _ExitDate;
		
		private EntityRef<Group> _Group;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnGroupIDChanging(int value);
    partial void OnGroupIDChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnExitDateChanging(System.Nullable<System.DateTime> value);
    partial void OnExitDateChanged();
    #endregion
		
		public UserGroupHistory()
		{
			this._Group = default(EntityRef<Group>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="Int NOT NULL")]
		public int GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExitDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ExitDate
		{
			get
			{
				return this._ExitDate;
			}
			set
			{
				if ((this._ExitDate != value))
				{
					this.OnExitDateChanging(value);
					this.SendPropertyChanging();
					this._ExitDate = value;
					this.SendPropertyChanged("ExitDate");
					this.OnExitDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_UserGroupHistory", Storage="_Group", ThisKey="GroupID", OtherKey="ID", IsForeignKey=true)]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.UserGroupHistories.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.UserGroupHistories.Add(this);
						this._GroupID = value.ID;
					}
					else
					{
						this._GroupID = default(int);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserGroupHistory", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserGroupHistories.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserGroupHistories.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Team")]
	public partial class Team : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _ImagePath18;
		
		private string _ImagePath26;
		
		private string _ImagePath30;
		
		private System.Nullable<int> _HotReplacement;
		
		private System.DateTime _AddedDate;
		
		private bool _IsClosed;
		
		private EntitySet<UserTeam> _UserTeams;
		
		private EntitySet<Participant> _Participants;
		
		private EntitySet<TeamReplacement> _TeamReplacements;
		
		private EntitySet<MatchRoaster> _MatchRoasters;
		
		private EntitySet<Award> _Awards;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnImagePath18Changing(string value);
    partial void OnImagePath18Changed();
    partial void OnImagePath26Changing(string value);
    partial void OnImagePath26Changed();
    partial void OnImagePath30Changing(string value);
    partial void OnImagePath30Changed();
    partial void OnHotReplacementChanging(System.Nullable<int> value);
    partial void OnHotReplacementChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnIsClosedChanging(bool value);
    partial void OnIsClosedChanged();
    #endregion
		
		public Team()
		{
			this._UserTeams = new EntitySet<UserTeam>(new Action<UserTeam>(this.attach_UserTeams), new Action<UserTeam>(this.detach_UserTeams));
			this._Participants = new EntitySet<Participant>(new Action<Participant>(this.attach_Participants), new Action<Participant>(this.detach_Participants));
			this._TeamReplacements = new EntitySet<TeamReplacement>(new Action<TeamReplacement>(this.attach_TeamReplacements), new Action<TeamReplacement>(this.detach_TeamReplacements));
			this._MatchRoasters = new EntitySet<MatchRoaster>(new Action<MatchRoaster>(this.attach_MatchRoasters), new Action<MatchRoaster>(this.detach_MatchRoasters));
			this._Awards = new EntitySet<Award>(new Action<Award>(this.attach_Awards), new Action<Award>(this.detach_Awards));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImagePath18", DbType="NVarChar(150)")]
		public string ImagePath18
		{
			get
			{
				return this._ImagePath18;
			}
			set
			{
				if ((this._ImagePath18 != value))
				{
					this.OnImagePath18Changing(value);
					this.SendPropertyChanging();
					this._ImagePath18 = value;
					this.SendPropertyChanged("ImagePath18");
					this.OnImagePath18Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImagePath26", DbType="NVarChar(150)")]
		public string ImagePath26
		{
			get
			{
				return this._ImagePath26;
			}
			set
			{
				if ((this._ImagePath26 != value))
				{
					this.OnImagePath26Changing(value);
					this.SendPropertyChanging();
					this._ImagePath26 = value;
					this.SendPropertyChanged("ImagePath26");
					this.OnImagePath26Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImagePath30", DbType="NVarChar(150)")]
		public string ImagePath30
		{
			get
			{
				return this._ImagePath30;
			}
			set
			{
				if ((this._ImagePath30 != value))
				{
					this.OnImagePath30Changing(value);
					this.SendPropertyChanging();
					this._ImagePath30 = value;
					this.SendPropertyChanged("ImagePath30");
					this.OnImagePath30Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HotReplacement", DbType="Int")]
		public System.Nullable<int> HotReplacement
		{
			get
			{
				return this._HotReplacement;
			}
			set
			{
				if ((this._HotReplacement != value))
				{
					this.OnHotReplacementChanging(value);
					this.SendPropertyChanging();
					this._HotReplacement = value;
					this.SendPropertyChanged("HotReplacement");
					this.OnHotReplacementChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsClosed", DbType="Bit NOT NULL")]
		public bool IsClosed
		{
			get
			{
				return this._IsClosed;
			}
			set
			{
				if ((this._IsClosed != value))
				{
					this.OnIsClosedChanging(value);
					this.SendPropertyChanging();
					this._IsClosed = value;
					this.SendPropertyChanged("IsClosed");
					this.OnIsClosedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_UserTeam", Storage="_UserTeams", ThisKey="ID", OtherKey="TeamID")]
		public EntitySet<UserTeam> UserTeams
		{
			get
			{
				return this._UserTeams;
			}
			set
			{
				this._UserTeams.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Participant", Storage="_Participants", ThisKey="ID", OtherKey="TeamID")]
		public EntitySet<Participant> Participants
		{
			get
			{
				return this._Participants;
			}
			set
			{
				this._Participants.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_TeamReplacement", Storage="_TeamReplacements", ThisKey="ID", OtherKey="TeamID")]
		public EntitySet<TeamReplacement> TeamReplacements
		{
			get
			{
				return this._TeamReplacements;
			}
			set
			{
				this._TeamReplacements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_MatchRoaster", Storage="_MatchRoasters", ThisKey="ID", OtherKey="TeamID")]
		public EntitySet<MatchRoaster> MatchRoasters
		{
			get
			{
				return this._MatchRoasters;
			}
			set
			{
				this._MatchRoasters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Award", Storage="_Awards", ThisKey="ID", OtherKey="TeamID")]
		public EntitySet<Award> Awards
		{
			get
			{
				return this._Awards;
			}
			set
			{
				this._Awards.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserTeams(UserTeam entity)
		{
			this.SendPropertyChanging();
			entity.Team = this;
		}
		
		private void detach_UserTeams(UserTeam entity)
		{
			this.SendPropertyChanging();
			entity.Team = null;
		}
		
		private void attach_Participants(Participant entity)
		{
			this.SendPropertyChanging();
			entity.Team = this;
		}
		
		private void detach_Participants(Participant entity)
		{
			this.SendPropertyChanging();
			entity.Team = null;
		}
		
		private void attach_TeamReplacements(TeamReplacement entity)
		{
			this.SendPropertyChanging();
			entity.Team = this;
		}
		
		private void detach_TeamReplacements(TeamReplacement entity)
		{
			this.SendPropertyChanging();
			entity.Team = null;
		}
		
		private void attach_MatchRoasters(MatchRoaster entity)
		{
			this.SendPropertyChanging();
			entity.Team = this;
		}
		
		private void detach_MatchRoasters(MatchRoaster entity)
		{
			this.SendPropertyChanging();
			entity.Team = null;
		}
		
		private void attach_Awards(Award entity)
		{
			this.SendPropertyChanging();
			entity.Team = this;
		}
		
		private void detach_Awards(Award entity)
		{
			this.SendPropertyChanging();
			entity.Team = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TeamReplacement")]
	public partial class TeamReplacement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _TeamID;
		
		private int _UserOutID;
		
		private int _UserInID;
		
		private System.DateTime _AddedDate;
		
		private EntityRef<Team> _Team;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTeamIDChanging(int value);
    partial void OnTeamIDChanged();
    partial void OnUserOutIDChanging(int value);
    partial void OnUserOutIDChanged();
    partial void OnUserInIDChanging(int value);
    partial void OnUserInIDChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    #endregion
		
		public TeamReplacement()
		{
			this._Team = default(EntityRef<Team>);
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamID", DbType="Int NOT NULL")]
		public int TeamID
		{
			get
			{
				return this._TeamID;
			}
			set
			{
				if ((this._TeamID != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIDChanging(value);
					this.SendPropertyChanging();
					this._TeamID = value;
					this.SendPropertyChanged("TeamID");
					this.OnTeamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserOutID", DbType="Int NOT NULL")]
		public int UserOutID
		{
			get
			{
				return this._UserOutID;
			}
			set
			{
				if ((this._UserOutID != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserOutIDChanging(value);
					this.SendPropertyChanging();
					this._UserOutID = value;
					this.SendPropertyChanged("UserOutID");
					this.OnUserOutIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserInID", DbType="Int NOT NULL")]
		public int UserInID
		{
			get
			{
				return this._UserInID;
			}
			set
			{
				if ((this._UserInID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserInIDChanging(value);
					this.SendPropertyChanging();
					this._UserInID = value;
					this.SendPropertyChanged("UserInID");
					this.OnUserInIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_TeamReplacement", Storage="_Team", ThisKey="TeamID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.TeamReplacements.Remove(this);
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.TeamReplacements.Add(this);
						this._TeamID = value.ID;
					}
					else
					{
						this._TeamID = default(int);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_TeamReplacement", Storage="_User", ThisKey="UserInID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.TeamReplacements.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.TeamReplacements.Add(this);
						this._UserInID = value.ID;
					}
					else
					{
						this._UserInID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_TeamReplacement1", Storage="_User1", ThisKey="UserOutID", OtherKey="ID", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.TeamReplacements1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.TeamReplacements1.Add(this);
						this._UserOutID = value.ID;
					}
					else
					{
						this._UserOutID = default(int);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MatchRoaster")]
	public partial class MatchRoaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _MatchID;
		
		private int _TeamID;
		
		private int _UserID;
		
		private EntityRef<Team> _Team;
		
		private EntityRef<User> _User;
		
		private EntityRef<Match> _Match;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMatchIDChanging(int value);
    partial void OnMatchIDChanged();
    partial void OnTeamIDChanging(int value);
    partial void OnTeamIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    #endregion
		
		public MatchRoaster()
		{
			this._Team = default(EntityRef<Team>);
			this._User = default(EntityRef<User>);
			this._Match = default(EntityRef<Match>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchID", DbType="Int NOT NULL")]
		public int MatchID
		{
			get
			{
				return this._MatchID;
			}
			set
			{
				if ((this._MatchID != value))
				{
					if (this._Match.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatchIDChanging(value);
					this.SendPropertyChanging();
					this._MatchID = value;
					this.SendPropertyChanged("MatchID");
					this.OnMatchIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamID", DbType="Int NOT NULL")]
		public int TeamID
		{
			get
			{
				return this._TeamID;
			}
			set
			{
				if ((this._TeamID != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIDChanging(value);
					this.SendPropertyChanging();
					this._TeamID = value;
					this.SendPropertyChanged("TeamID");
					this.OnTeamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_MatchRoaster", Storage="_Team", ThisKey="TeamID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.MatchRoasters.Remove(this);
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.MatchRoasters.Add(this);
						this._TeamID = value.ID;
					}
					else
					{
						this._TeamID = default(int);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_MatchRoaster", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.MatchRoasters.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.MatchRoasters.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Match_MatchRoaster", Storage="_Match", ThisKey="MatchID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Match Match
		{
			get
			{
				return this._Match.Entity;
			}
			set
			{
				Match previousValue = this._Match.Entity;
				if (((previousValue != value) 
							|| (this._Match.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Match.Entity = null;
						previousValue.MatchRoasters.Remove(this);
					}
					this._Match.Entity = value;
					if ((value != null))
					{
						value.MatchRoasters.Add(this);
						this._MatchID = value.ID;
					}
					else
					{
						this._MatchID = default(int);
					}
					this.SendPropertyChanged("Match");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BannerStatistic")]
	public partial class BannerStatistic : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _BannerID;
		
		private System.DateTime _AddedDate;
		
		private EntityRef<Banner> _Banner;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnBannerIDChanging(int value);
    partial void OnBannerIDChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    #endregion
		
		public BannerStatistic()
		{
			this._Banner = default(EntityRef<Banner>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BannerID", DbType="Int NOT NULL")]
		public int BannerID
		{
			get
			{
				return this._BannerID;
			}
			set
			{
				if ((this._BannerID != value))
				{
					if (this._Banner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBannerIDChanging(value);
					this.SendPropertyChanging();
					this._BannerID = value;
					this.SendPropertyChanged("BannerID");
					this.OnBannerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Banner_BannerStatistic", Storage="_Banner", ThisKey="BannerID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Banner Banner
		{
			get
			{
				return this._Banner.Entity;
			}
			set
			{
				Banner previousValue = this._Banner.Entity;
				if (((previousValue != value) 
							|| (this._Banner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Banner.Entity = null;
						previousValue.BannerStatistics.Remove(this);
					}
					this._Banner.Entity = value;
					if ((value != null))
					{
						value.BannerStatistics.Add(this);
						this._BannerID = value.ID;
					}
					else
					{
						this._BannerID = default(int);
					}
					this.SendPropertyChanged("Banner");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Background")]
	public partial class Background : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Path;
		
		private string _ImagePath;
		
		private bool _IsOn;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPathChanging(string value);
    partial void OnPathChanged();
    partial void OnImagePathChanging(string value);
    partial void OnImagePathChanged();
    partial void OnIsOnChanging(bool value);
    partial void OnIsOnChanged();
    #endregion
		
		public Background()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Path", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Path
		{
			get
			{
				return this._Path;
			}
			set
			{
				if ((this._Path != value))
				{
					this.OnPathChanging(value);
					this.SendPropertyChanging();
					this._Path = value;
					this.SendPropertyChanged("Path");
					this.OnPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImagePath", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string ImagePath
		{
			get
			{
				return this._ImagePath;
			}
			set
			{
				if ((this._ImagePath != value))
				{
					this.OnImagePathChanging(value);
					this.SendPropertyChanging();
					this._ImagePath = value;
					this.SendPropertyChanged("ImagePath");
					this.OnImagePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsOn", DbType="Bit NOT NULL")]
		public bool IsOn
		{
			get
			{
				return this._IsOn;
			}
			set
			{
				if ((this._IsOn != value))
				{
					this.OnIsOnChanging(value);
					this.SendPropertyChanging();
					this._IsOn = value;
					this.SendPropertyChanged("IsOn");
					this.OnIsOnChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Banner")]
	public partial class Banner : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Path;
		
		private int _Type;
		
		private string _ImagePath;
		
		private string _Url;
		
		private bool _IsOn;
		
		private int _TotalViews;
		
		private int _TotalClicks;
		
		private EntitySet<BannerStatistic> _BannerStatistics;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPathChanging(string value);
    partial void OnPathChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnImagePathChanging(string value);
    partial void OnImagePathChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnIsOnChanging(bool value);
    partial void OnIsOnChanged();
    partial void OnTotalViewsChanging(int value);
    partial void OnTotalViewsChanged();
    partial void OnTotalClicksChanging(int value);
    partial void OnTotalClicksChanged();
    #endregion
		
		public Banner()
		{
			this._BannerStatistics = new EntitySet<BannerStatistic>(new Action<BannerStatistic>(this.attach_BannerStatistics), new Action<BannerStatistic>(this.detach_BannerStatistics));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Path", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Path
		{
			get
			{
				return this._Path;
			}
			set
			{
				if ((this._Path != value))
				{
					this.OnPathChanging(value);
					this.SendPropertyChanging();
					this._Path = value;
					this.SendPropertyChanged("Path");
					this.OnPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImagePath", DbType="NVarChar(150)")]
		public string ImagePath
		{
			get
			{
				return this._ImagePath;
			}
			set
			{
				if ((this._ImagePath != value))
				{
					this.OnImagePathChanging(value);
					this.SendPropertyChanging();
					this._ImagePath = value;
					this.SendPropertyChanged("ImagePath");
					this.OnImagePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(MAX)")]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsOn", DbType="Bit NOT NULL")]
		public bool IsOn
		{
			get
			{
				return this._IsOn;
			}
			set
			{
				if ((this._IsOn != value))
				{
					this.OnIsOnChanging(value);
					this.SendPropertyChanging();
					this._IsOn = value;
					this.SendPropertyChanged("IsOn");
					this.OnIsOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalViews", DbType="Int NOT NULL")]
		public int TotalViews
		{
			get
			{
				return this._TotalViews;
			}
			set
			{
				if ((this._TotalViews != value))
				{
					this.OnTotalViewsChanging(value);
					this.SendPropertyChanging();
					this._TotalViews = value;
					this.SendPropertyChanged("TotalViews");
					this.OnTotalViewsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalClicks", DbType="Int NOT NULL")]
		public int TotalClicks
		{
			get
			{
				return this._TotalClicks;
			}
			set
			{
				if ((this._TotalClicks != value))
				{
					this.OnTotalClicksChanging(value);
					this.SendPropertyChanging();
					this._TotalClicks = value;
					this.SendPropertyChanged("TotalClicks");
					this.OnTotalClicksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Banner_BannerStatistic", Storage="_BannerStatistics", ThisKey="ID", OtherKey="BannerID")]
		public EntitySet<BannerStatistic> BannerStatistics
		{
			get
			{
				return this._BannerStatistics;
			}
			set
			{
				this._BannerStatistics.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BannerStatistics(BannerStatistic entity)
		{
			this.SendPropertyChanging();
			entity.Banner = this;
		}
		
		private void detach_BannerStatistics(BannerStatistic entity)
		{
			this.SendPropertyChanging();
			entity.Banner = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NewLike")]
	public partial class NewLike : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _NewID;
		
		private int _UserID;
		
		private EntityRef<New> _New;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNewIDChanging(int value);
    partial void OnNewIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    #endregion
		
		public NewLike()
		{
			this._New = default(EntityRef<New>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewID", DbType="Int NOT NULL")]
		public int NewID
		{
			get
			{
				return this._NewID;
			}
			set
			{
				if ((this._NewID != value))
				{
					if (this._New.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNewIDChanging(value);
					this.SendPropertyChanging();
					this._NewID = value;
					this.SendPropertyChanged("NewID");
					this.OnNewIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="New_NewLike", Storage="_New", ThisKey="NewID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public New New
		{
			get
			{
				return this._New.Entity;
			}
			set
			{
				New previousValue = this._New.Entity;
				if (((previousValue != value) 
							|| (this._New.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._New.Entity = null;
						previousValue.NewLikes.Remove(this);
					}
					this._New.Entity = value;
					if ((value != null))
					{
						value.NewLikes.Add(this);
						this._NewID = value.ID;
					}
					else
					{
						this._NewID = default(int);
					}
					this.SendPropertyChanged("New");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_NewLike", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.NewLikes.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.NewLikes.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BlogLike")]
	public partial class BlogLike : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _BlogID;
		
		private int _UserID;
		
		private EntityRef<Blog> _Blog;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnBlogIDChanging(int value);
    partial void OnBlogIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    #endregion
		
		public BlogLike()
		{
			this._Blog = default(EntityRef<Blog>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlogID", DbType="Int NOT NULL")]
		public int BlogID
		{
			get
			{
				return this._BlogID;
			}
			set
			{
				if ((this._BlogID != value))
				{
					if (this._Blog.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBlogIDChanging(value);
					this.SendPropertyChanging();
					this._BlogID = value;
					this.SendPropertyChanged("BlogID");
					this.OnBlogIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Blog_BlogLike", Storage="_Blog", ThisKey="BlogID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Blog Blog
		{
			get
			{
				return this._Blog.Entity;
			}
			set
			{
				Blog previousValue = this._Blog.Entity;
				if (((previousValue != value) 
							|| (this._Blog.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Blog.Entity = null;
						previousValue.BlogLikes.Remove(this);
					}
					this._Blog.Entity = value;
					if ((value != null))
					{
						value.BlogLikes.Add(this);
						this._BlogID = value.ID;
					}
					else
					{
						this._BlogID = default(int);
					}
					this.SendPropertyChanged("Blog");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_BlogLike", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.BlogLikes.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.BlogLikes.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Photo")]
	public partial class Photo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _UserID;
		
		private System.Nullable<int> _PhotoAlbumID;
		
		private string _FilePath;
		
		private string _AlbumPreviewPath;
		
		private string _AvatarPath;
		
		private string _SmallPath;
		
		private string _Name;
		
		private string _Description;
		
		private bool _IsBanned;
		
		private string _BanDescription;
		
		private int _CommentsCount;
		
		private bool _IsAlbumPreview;
		
		private int _VisitCount;
		
		private System.DateTime _AddedDate;
		
		private System.Nullable<int> _Width;
		
		private System.Nullable<int> _Height;
		
		private int _Likes;
		
		private EntitySet<PhotoComment> _PhotoComments;
		
		private EntitySet<PhotoLike> _PhotoLikes;
		
		private EntityRef<PhotoAlbum> _PhotoAlbum;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(System.Nullable<int> value);
    partial void OnUserIDChanged();
    partial void OnPhotoAlbumIDChanging(System.Nullable<int> value);
    partial void OnPhotoAlbumIDChanged();
    partial void OnFilePathChanging(string value);
    partial void OnFilePathChanged();
    partial void OnAlbumPreviewPathChanging(string value);
    partial void OnAlbumPreviewPathChanged();
    partial void OnAvatarPathChanging(string value);
    partial void OnAvatarPathChanged();
    partial void OnSmallPathChanging(string value);
    partial void OnSmallPathChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIsBannedChanging(bool value);
    partial void OnIsBannedChanged();
    partial void OnBanDescriptionChanging(string value);
    partial void OnBanDescriptionChanged();
    partial void OnCommentsCountChanging(int value);
    partial void OnCommentsCountChanged();
    partial void OnIsAlbumPreviewChanging(bool value);
    partial void OnIsAlbumPreviewChanged();
    partial void OnVisitCountChanging(int value);
    partial void OnVisitCountChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnWidthChanging(System.Nullable<int> value);
    partial void OnWidthChanged();
    partial void OnHeightChanging(System.Nullable<int> value);
    partial void OnHeightChanged();
    partial void OnLikesChanging(int value);
    partial void OnLikesChanged();
    #endregion
		
		public Photo()
		{
			this._PhotoComments = new EntitySet<PhotoComment>(new Action<PhotoComment>(this.attach_PhotoComments), new Action<PhotoComment>(this.detach_PhotoComments));
			this._PhotoLikes = new EntitySet<PhotoLike>(new Action<PhotoLike>(this.attach_PhotoLikes), new Action<PhotoLike>(this.detach_PhotoLikes));
			this._PhotoAlbum = default(EntityRef<PhotoAlbum>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int")]
		public System.Nullable<int> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhotoAlbumID", DbType="Int")]
		public System.Nullable<int> PhotoAlbumID
		{
			get
			{
				return this._PhotoAlbumID;
			}
			set
			{
				if ((this._PhotoAlbumID != value))
				{
					if (this._PhotoAlbum.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhotoAlbumIDChanging(value);
					this.SendPropertyChanging();
					this._PhotoAlbumID = value;
					this.SendPropertyChanged("PhotoAlbumID");
					this.OnPhotoAlbumIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FilePath", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string FilePath
		{
			get
			{
				return this._FilePath;
			}
			set
			{
				if ((this._FilePath != value))
				{
					this.OnFilePathChanging(value);
					this.SendPropertyChanging();
					this._FilePath = value;
					this.SendPropertyChanged("FilePath");
					this.OnFilePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlbumPreviewPath", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string AlbumPreviewPath
		{
			get
			{
				return this._AlbumPreviewPath;
			}
			set
			{
				if ((this._AlbumPreviewPath != value))
				{
					this.OnAlbumPreviewPathChanging(value);
					this.SendPropertyChanging();
					this._AlbumPreviewPath = value;
					this.SendPropertyChanged("AlbumPreviewPath");
					this.OnAlbumPreviewPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AvatarPath", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string AvatarPath
		{
			get
			{
				return this._AvatarPath;
			}
			set
			{
				if ((this._AvatarPath != value))
				{
					this.OnAvatarPathChanging(value);
					this.SendPropertyChanging();
					this._AvatarPath = value;
					this.SendPropertyChanged("AvatarPath");
					this.OnAvatarPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SmallPath", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string SmallPath
		{
			get
			{
				return this._SmallPath;
			}
			set
			{
				if ((this._SmallPath != value))
				{
					this.OnSmallPathChanging(value);
					this.SendPropertyChanging();
					this._SmallPath = value;
					this.SendPropertyChanged("SmallPath");
					this.OnSmallPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsBanned", DbType="Bit NOT NULL")]
		public bool IsBanned
		{
			get
			{
				return this._IsBanned;
			}
			set
			{
				if ((this._IsBanned != value))
				{
					this.OnIsBannedChanging(value);
					this.SendPropertyChanging();
					this._IsBanned = value;
					this.SendPropertyChanged("IsBanned");
					this.OnIsBannedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BanDescription", DbType="NVarChar(500)")]
		public string BanDescription
		{
			get
			{
				return this._BanDescription;
			}
			set
			{
				if ((this._BanDescription != value))
				{
					this.OnBanDescriptionChanging(value);
					this.SendPropertyChanging();
					this._BanDescription = value;
					this.SendPropertyChanged("BanDescription");
					this.OnBanDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentsCount", DbType="Int NOT NULL")]
		public int CommentsCount
		{
			get
			{
				return this._CommentsCount;
			}
			set
			{
				if ((this._CommentsCount != value))
				{
					this.OnCommentsCountChanging(value);
					this.SendPropertyChanging();
					this._CommentsCount = value;
					this.SendPropertyChanged("CommentsCount");
					this.OnCommentsCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAlbumPreview", DbType="Bit NOT NULL")]
		public bool IsAlbumPreview
		{
			get
			{
				return this._IsAlbumPreview;
			}
			set
			{
				if ((this._IsAlbumPreview != value))
				{
					this.OnIsAlbumPreviewChanging(value);
					this.SendPropertyChanging();
					this._IsAlbumPreview = value;
					this.SendPropertyChanged("IsAlbumPreview");
					this.OnIsAlbumPreviewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisitCount", DbType="Int NOT NULL")]
		public int VisitCount
		{
			get
			{
				return this._VisitCount;
			}
			set
			{
				if ((this._VisitCount != value))
				{
					this.OnVisitCountChanging(value);
					this.SendPropertyChanging();
					this._VisitCount = value;
					this.SendPropertyChanged("VisitCount");
					this.OnVisitCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Width", DbType="Int")]
		public System.Nullable<int> Width
		{
			get
			{
				return this._Width;
			}
			set
			{
				if ((this._Width != value))
				{
					this.OnWidthChanging(value);
					this.SendPropertyChanging();
					this._Width = value;
					this.SendPropertyChanged("Width");
					this.OnWidthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Height", DbType="Int")]
		public System.Nullable<int> Height
		{
			get
			{
				return this._Height;
			}
			set
			{
				if ((this._Height != value))
				{
					this.OnHeightChanging(value);
					this.SendPropertyChanging();
					this._Height = value;
					this.SendPropertyChanged("Height");
					this.OnHeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Likes", DbType="Int NOT NULL")]
		public int Likes
		{
			get
			{
				return this._Likes;
			}
			set
			{
				if ((this._Likes != value))
				{
					this.OnLikesChanging(value);
					this.SendPropertyChanging();
					this._Likes = value;
					this.SendPropertyChanged("Likes");
					this.OnLikesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photo_PhotoComment", Storage="_PhotoComments", ThisKey="ID", OtherKey="PhotoID")]
		public EntitySet<PhotoComment> PhotoComments
		{
			get
			{
				return this._PhotoComments;
			}
			set
			{
				this._PhotoComments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photo_PhotoLike", Storage="_PhotoLikes", ThisKey="ID", OtherKey="PhotoID")]
		public EntitySet<PhotoLike> PhotoLikes
		{
			get
			{
				return this._PhotoLikes;
			}
			set
			{
				this._PhotoLikes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PhotoAlbum_Photo", Storage="_PhotoAlbum", ThisKey="PhotoAlbumID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public PhotoAlbum PhotoAlbum
		{
			get
			{
				return this._PhotoAlbum.Entity;
			}
			set
			{
				PhotoAlbum previousValue = this._PhotoAlbum.Entity;
				if (((previousValue != value) 
							|| (this._PhotoAlbum.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PhotoAlbum.Entity = null;
						previousValue.Photos.Remove(this);
					}
					this._PhotoAlbum.Entity = value;
					if ((value != null))
					{
						value.Photos.Add(this);
						this._PhotoAlbumID = value.ID;
					}
					else
					{
						this._PhotoAlbumID = default(Nullable<int>);
					}
					this.SendPropertyChanged("PhotoAlbum");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Photo", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Photos.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Photos.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PhotoComments(PhotoComment entity)
		{
			this.SendPropertyChanging();
			entity.Photo = this;
		}
		
		private void detach_PhotoComments(PhotoComment entity)
		{
			this.SendPropertyChanging();
			entity.Photo = null;
		}
		
		private void attach_PhotoLikes(PhotoLike entity)
		{
			this.SendPropertyChanging();
			entity.Photo = this;
		}
		
		private void detach_PhotoLikes(PhotoLike entity)
		{
			this.SendPropertyChanging();
			entity.Photo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PhotoLike")]
	public partial class PhotoLike : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _PhotoID;
		
		private int _UserID;
		
		private EntityRef<Photo> _Photo;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPhotoIDChanging(int value);
    partial void OnPhotoIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    #endregion
		
		public PhotoLike()
		{
			this._Photo = default(EntityRef<Photo>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhotoID", DbType="Int NOT NULL")]
		public int PhotoID
		{
			get
			{
				return this._PhotoID;
			}
			set
			{
				if ((this._PhotoID != value))
				{
					if (this._Photo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhotoIDChanging(value);
					this.SendPropertyChanging();
					this._PhotoID = value;
					this.SendPropertyChanged("PhotoID");
					this.OnPhotoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photo_PhotoLike", Storage="_Photo", ThisKey="PhotoID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Photo Photo
		{
			get
			{
				return this._Photo.Entity;
			}
			set
			{
				Photo previousValue = this._Photo.Entity;
				if (((previousValue != value) 
							|| (this._Photo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Photo.Entity = null;
						previousValue.PhotoLikes.Remove(this);
					}
					this._Photo.Entity = value;
					if ((value != null))
					{
						value.PhotoLikes.Add(this);
						this._PhotoID = value.ID;
					}
					else
					{
						this._PhotoID = default(int);
					}
					this.SendPropertyChanged("Photo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_PhotoLike", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.PhotoLikes.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.PhotoLikes.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RatingDetail")]
	public partial class RatingDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _RatingID;
		
		private System.Nullable<int> _MatchID;
		
		private System.Nullable<int> _TournamentID;
		
		private int _Score;
		
		private System.DateTime _AddedDate;
		
		private string _Description;
		
		private EntityRef<Rating> _Rating;
		
		private EntityRef<Match> _Match;
		
		private EntityRef<Tournament> _Tournament;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnRatingIDChanging(int value);
    partial void OnRatingIDChanged();
    partial void OnMatchIDChanging(System.Nullable<int> value);
    partial void OnMatchIDChanged();
    partial void OnTournamentIDChanging(System.Nullable<int> value);
    partial void OnTournamentIDChanged();
    partial void OnScoreChanging(int value);
    partial void OnScoreChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public RatingDetail()
		{
			this._Rating = default(EntityRef<Rating>);
			this._Match = default(EntityRef<Match>);
			this._Tournament = default(EntityRef<Tournament>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RatingID", DbType="Int NOT NULL")]
		public int RatingID
		{
			get
			{
				return this._RatingID;
			}
			set
			{
				if ((this._RatingID != value))
				{
					if (this._Rating.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRatingIDChanging(value);
					this.SendPropertyChanging();
					this._RatingID = value;
					this.SendPropertyChanged("RatingID");
					this.OnRatingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchID", DbType="Int")]
		public System.Nullable<int> MatchID
		{
			get
			{
				return this._MatchID;
			}
			set
			{
				if ((this._MatchID != value))
				{
					if (this._Match.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatchIDChanging(value);
					this.SendPropertyChanging();
					this._MatchID = value;
					this.SendPropertyChanged("MatchID");
					this.OnMatchIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentID", DbType="Int")]
		public System.Nullable<int> TournamentID
		{
			get
			{
				return this._TournamentID;
			}
			set
			{
				if ((this._TournamentID != value))
				{
					if (this._Tournament.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTournamentIDChanging(value);
					this.SendPropertyChanging();
					this._TournamentID = value;
					this.SendPropertyChanged("TournamentID");
					this.OnTournamentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score", DbType="Int NOT NULL")]
		public int Score
		{
			get
			{
				return this._Score;
			}
			set
			{
				if ((this._Score != value))
				{
					this.OnScoreChanging(value);
					this.SendPropertyChanging();
					this._Score = value;
					this.SendPropertyChanged("Score");
					this.OnScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rating_RatingDetail", Storage="_Rating", ThisKey="RatingID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Rating Rating
		{
			get
			{
				return this._Rating.Entity;
			}
			set
			{
				Rating previousValue = this._Rating.Entity;
				if (((previousValue != value) 
							|| (this._Rating.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rating.Entity = null;
						previousValue.RatingDetails.Remove(this);
					}
					this._Rating.Entity = value;
					if ((value != null))
					{
						value.RatingDetails.Add(this);
						this._RatingID = value.ID;
					}
					else
					{
						this._RatingID = default(int);
					}
					this.SendPropertyChanged("Rating");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Match_RatingDetail", Storage="_Match", ThisKey="MatchID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Match Match
		{
			get
			{
				return this._Match.Entity;
			}
			set
			{
				Match previousValue = this._Match.Entity;
				if (((previousValue != value) 
							|| (this._Match.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Match.Entity = null;
						previousValue.RatingDetails.Remove(this);
					}
					this._Match.Entity = value;
					if ((value != null))
					{
						value.RatingDetails.Add(this);
						this._MatchID = value.ID;
					}
					else
					{
						this._MatchID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Match");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tournament_RatingDetail", Storage="_Tournament", ThisKey="TournamentID", OtherKey="ID", IsForeignKey=true)]
		public Tournament Tournament
		{
			get
			{
				return this._Tournament.Entity;
			}
			set
			{
				Tournament previousValue = this._Tournament.Entity;
				if (((previousValue != value) 
							|| (this._Tournament.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tournament.Entity = null;
						previousValue.RatingDetails.Remove(this);
					}
					this._Tournament.Entity = value;
					if ((value != null))
					{
						value.RatingDetails.Add(this);
						this._TournamentID = value.ID;
					}
					else
					{
						this._TournamentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Tournament");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NoticeDistribution")]
	public partial class NoticeDistribution : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private System.DateTime _AddedDate;
		
		private string _Caption;
		
		private string _Text;
		
		private bool _IsCloseForRead;
		
		private EntitySet<Notice> _Notices;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnCaptionChanging(string value);
    partial void OnCaptionChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnIsCloseForReadChanging(bool value);
    partial void OnIsCloseForReadChanged();
    #endregion
		
		public NoticeDistribution()
		{
			this._Notices = new EntitySet<Notice>(new Action<Notice>(this.attach_Notices), new Action<Notice>(this.detach_Notices));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Caption", DbType="NVarChar(500)")]
		public string Caption
		{
			get
			{
				return this._Caption;
			}
			set
			{
				if ((this._Caption != value))
				{
					this.OnCaptionChanging(value);
					this.SendPropertyChanging();
					this._Caption = value;
					this.SendPropertyChanged("Caption");
					this.OnCaptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCloseForRead", DbType="Bit NOT NULL")]
		public bool IsCloseForRead
		{
			get
			{
				return this._IsCloseForRead;
			}
			set
			{
				if ((this._IsCloseForRead != value))
				{
					this.OnIsCloseForReadChanging(value);
					this.SendPropertyChanging();
					this._IsCloseForRead = value;
					this.SendPropertyChanged("IsCloseForRead");
					this.OnIsCloseForReadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NoticeDistribution_Notice", Storage="_Notices", ThisKey="ID", OtherKey="NoticeDistributionID")]
		public EntitySet<Notice> Notices
		{
			get
			{
				return this._Notices;
			}
			set
			{
				this._Notices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_NoticeDistribution", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.NoticeDistributions.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.NoticeDistributions.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Notices(Notice entity)
		{
			this.SendPropertyChanging();
			entity.NoticeDistribution = this;
		}
		
		private void detach_Notices(Notice entity)
		{
			this.SendPropertyChanging();
			entity.NoticeDistribution = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ChatRoomLog")]
	public partial class ChatRoomLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ChatRoomID;
		
		private int _UserID;
		
		private System.DateTime _ReadDate;
		
		private EntityRef<ChatRoom> _ChatRoom;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnChatRoomIDChanging(int value);
    partial void OnChatRoomIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnReadDateChanging(System.DateTime value);
    partial void OnReadDateChanged();
    #endregion
		
		public ChatRoomLog()
		{
			this._ChatRoom = default(EntityRef<ChatRoom>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChatRoomID", DbType="Int NOT NULL")]
		public int ChatRoomID
		{
			get
			{
				return this._ChatRoomID;
			}
			set
			{
				if ((this._ChatRoomID != value))
				{
					if (this._ChatRoom.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChatRoomIDChanging(value);
					this.SendPropertyChanging();
					this._ChatRoomID = value;
					this.SendPropertyChanged("ChatRoomID");
					this.OnChatRoomIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReadDate", DbType="DateTime NOT NULL")]
		public System.DateTime ReadDate
		{
			get
			{
				return this._ReadDate;
			}
			set
			{
				if ((this._ReadDate != value))
				{
					this.OnReadDateChanging(value);
					this.SendPropertyChanging();
					this._ReadDate = value;
					this.SendPropertyChanged("ReadDate");
					this.OnReadDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChatRoom_ChatRoomLog", Storage="_ChatRoom", ThisKey="ChatRoomID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ChatRoom ChatRoom
		{
			get
			{
				return this._ChatRoom.Entity;
			}
			set
			{
				ChatRoom previousValue = this._ChatRoom.Entity;
				if (((previousValue != value) 
							|| (this._ChatRoom.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChatRoom.Entity = null;
						previousValue.ChatRoomLogs.Remove(this);
					}
					this._ChatRoom.Entity = value;
					if ((value != null))
					{
						value.ChatRoomLogs.Add(this);
						this._ChatRoomID = value.ID;
					}
					else
					{
						this._ChatRoomID = default(int);
					}
					this.SendPropertyChanged("ChatRoom");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ChatRoomLog", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.ChatRoomLogs.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.ChatRoomLogs.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Poll")]
	public partial class Poll : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private string _Name;
		
		private int _PollType;
		
		private bool _IsClosed;
		
		private System.DateTime _AddedDate;
		
		private EntitySet<PollItem> _PollItems;
		
		private EntitySet<PollVote> _PollVotes;
		
		private EntitySet<Forum> _Forums;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPollTypeChanging(int value);
    partial void OnPollTypeChanged();
    partial void OnIsClosedChanging(bool value);
    partial void OnIsClosedChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    #endregion
		
		public Poll()
		{
			this._PollItems = new EntitySet<PollItem>(new Action<PollItem>(this.attach_PollItems), new Action<PollItem>(this.detach_PollItems));
			this._PollVotes = new EntitySet<PollVote>(new Action<PollVote>(this.attach_PollVotes), new Action<PollVote>(this.detach_PollVotes));
			this._Forums = new EntitySet<Forum>(new Action<Forum>(this.attach_Forums), new Action<Forum>(this.detach_Forums));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PollType", DbType="Int NOT NULL")]
		public int PollType
		{
			get
			{
				return this._PollType;
			}
			set
			{
				if ((this._PollType != value))
				{
					this.OnPollTypeChanging(value);
					this.SendPropertyChanging();
					this._PollType = value;
					this.SendPropertyChanged("PollType");
					this.OnPollTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsClosed", DbType="Bit NOT NULL")]
		public bool IsClosed
		{
			get
			{
				return this._IsClosed;
			}
			set
			{
				if ((this._IsClosed != value))
				{
					this.OnIsClosedChanging(value);
					this.SendPropertyChanging();
					this._IsClosed = value;
					this.SendPropertyChanged("IsClosed");
					this.OnIsClosedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Poll_PollItem", Storage="_PollItems", ThisKey="ID", OtherKey="PollID")]
		public EntitySet<PollItem> PollItems
		{
			get
			{
				return this._PollItems;
			}
			set
			{
				this._PollItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Poll_PollVote", Storage="_PollVotes", ThisKey="ID", OtherKey="PollID")]
		public EntitySet<PollVote> PollVotes
		{
			get
			{
				return this._PollVotes;
			}
			set
			{
				this._PollVotes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Poll_Forum", Storage="_Forums", ThisKey="ID", OtherKey="PollID")]
		public EntitySet<Forum> Forums
		{
			get
			{
				return this._Forums;
			}
			set
			{
				this._Forums.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Poll", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Polls.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Polls.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PollItems(PollItem entity)
		{
			this.SendPropertyChanging();
			entity.Poll = this;
		}
		
		private void detach_PollItems(PollItem entity)
		{
			this.SendPropertyChanging();
			entity.Poll = null;
		}
		
		private void attach_PollVotes(PollVote entity)
		{
			this.SendPropertyChanging();
			entity.Poll = this;
		}
		
		private void detach_PollVotes(PollVote entity)
		{
			this.SendPropertyChanging();
			entity.Poll = null;
		}
		
		private void attach_Forums(Forum entity)
		{
			this.SendPropertyChanging();
			entity.Poll = this;
		}
		
		private void detach_Forums(Forum entity)
		{
			this.SendPropertyChanging();
			entity.Poll = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Platform")]
	public partial class Platform : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Url;
		
		private EntitySet<Game> _Games;
		
		private EntitySet<ProductPrice> _ProductPrices;
		
		private EntitySet<Tournament> _Tournaments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    #endregion
		
		public Platform()
		{
			this._Games = new EntitySet<Game>(new Action<Game>(this.attach_Games), new Action<Game>(this.detach_Games));
			this._ProductPrices = new EntitySet<ProductPrice>(new Action<ProductPrice>(this.attach_ProductPrices), new Action<ProductPrice>(this.detach_ProductPrices));
			this._Tournaments = new EntitySet<Tournament>(new Action<Tournament>(this.attach_Tournaments), new Action<Tournament>(this.detach_Tournaments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Platform_Game", Storage="_Games", ThisKey="ID", OtherKey="PlatformID")]
		public EntitySet<Game> Games
		{
			get
			{
				return this._Games;
			}
			set
			{
				this._Games.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Platform_ProductPrice", Storage="_ProductPrices", ThisKey="ID", OtherKey="PlatformID")]
		public EntitySet<ProductPrice> ProductPrices
		{
			get
			{
				return this._ProductPrices;
			}
			set
			{
				this._ProductPrices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Platform_Tournament", Storage="_Tournaments", ThisKey="ID", OtherKey="PlatformID")]
		public EntitySet<Tournament> Tournaments
		{
			get
			{
				return this._Tournaments;
			}
			set
			{
				this._Tournaments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Games(Game entity)
		{
			this.SendPropertyChanging();
			entity.Platform = this;
		}
		
		private void detach_Games(Game entity)
		{
			this.SendPropertyChanging();
			entity.Platform = null;
		}
		
		private void attach_ProductPrices(ProductPrice entity)
		{
			this.SendPropertyChanging();
			entity.Platform = this;
		}
		
		private void detach_ProductPrices(ProductPrice entity)
		{
			this.SendPropertyChanging();
			entity.Platform = null;
		}
		
		private void attach_Tournaments(Tournament entity)
		{
			this.SendPropertyChanging();
			entity.Platform = this;
		}
		
		private void detach_Tournaments(Tournament entity)
		{
			this.SendPropertyChanging();
			entity.Platform = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserVideo")]
	public partial class UserVideo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private System.Nullable<int> _GroupID;
		
		private string _Header;
		
		private string _Url;
		
		private string _VideoThumb;
		
		private string _VideoCode;
		
		private string _VideoUrl;
		
		private string _Text;
		
		private System.DateTime _AddedDate;
		
		private int _VisitCount;
		
		private EntitySet<UserVideoComment> _UserVideoComments;
		
		private EntityRef<Group> _Group;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnGroupIDChanging(System.Nullable<int> value);
    partial void OnGroupIDChanged();
    partial void OnHeaderChanging(string value);
    partial void OnHeaderChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnVideoThumbChanging(string value);
    partial void OnVideoThumbChanged();
    partial void OnVideoCodeChanging(string value);
    partial void OnVideoCodeChanged();
    partial void OnVideoUrlChanging(string value);
    partial void OnVideoUrlChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnVisitCountChanging(int value);
    partial void OnVisitCountChanged();
    #endregion
		
		public UserVideo()
		{
			this._UserVideoComments = new EntitySet<UserVideoComment>(new Action<UserVideoComment>(this.attach_UserVideoComments), new Action<UserVideoComment>(this.detach_UserVideoComments));
			this._Group = default(EntityRef<Group>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="Int")]
		public System.Nullable<int> GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Header", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Header
		{
			get
			{
				return this._Header;
			}
			set
			{
				if ((this._Header != value))
				{
					this.OnHeaderChanging(value);
					this.SendPropertyChanging();
					this._Header = value;
					this.SendPropertyChanged("Header");
					this.OnHeaderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VideoThumb", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string VideoThumb
		{
			get
			{
				return this._VideoThumb;
			}
			set
			{
				if ((this._VideoThumb != value))
				{
					this.OnVideoThumbChanging(value);
					this.SendPropertyChanging();
					this._VideoThumb = value;
					this.SendPropertyChanged("VideoThumb");
					this.OnVideoThumbChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VideoCode", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string VideoCode
		{
			get
			{
				return this._VideoCode;
			}
			set
			{
				if ((this._VideoCode != value))
				{
					this.OnVideoCodeChanging(value);
					this.SendPropertyChanging();
					this._VideoCode = value;
					this.SendPropertyChanged("VideoCode");
					this.OnVideoCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VideoUrl", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string VideoUrl
		{
			get
			{
				return this._VideoUrl;
			}
			set
			{
				if ((this._VideoUrl != value))
				{
					this.OnVideoUrlChanging(value);
					this.SendPropertyChanging();
					this._VideoUrl = value;
					this.SendPropertyChanged("VideoUrl");
					this.OnVideoUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(MAX)")]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisitCount", DbType="Int NOT NULL")]
		public int VisitCount
		{
			get
			{
				return this._VisitCount;
			}
			set
			{
				if ((this._VisitCount != value))
				{
					this.OnVisitCountChanging(value);
					this.SendPropertyChanging();
					this._VisitCount = value;
					this.SendPropertyChanged("VisitCount");
					this.OnVisitCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserVideo_UserVideoComment", Storage="_UserVideoComments", ThisKey="ID", OtherKey="UserVideoID")]
		public EntitySet<UserVideoComment> UserVideoComments
		{
			get
			{
				return this._UserVideoComments;
			}
			set
			{
				this._UserVideoComments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_UserVideo", Storage="_Group", ThisKey="GroupID", OtherKey="ID", IsForeignKey=true, DeleteRule="SET NULL")]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.UserVideos.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.UserVideos.Add(this);
						this._GroupID = value.ID;
					}
					else
					{
						this._GroupID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserVideo", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserVideos.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserVideos.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserVideoComments(UserVideoComment entity)
		{
			this.SendPropertyChanging();
			entity.UserVideo = this;
		}
		
		private void detach_UserVideoComments(UserVideoComment entity)
		{
			this.SendPropertyChanging();
			entity.UserVideo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Forum")]
	public partial class Forum : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _ParentID;
		
		private System.Nullable<int> _UserID;
		
		private string _Name;
		
		private string _Url;
		
		private string _ImagePath;
		
		private string _SubTitle;
		
		private bool _IsDeleted;
		
		private bool _IsEnd;
		
		private int _VisitCount;
		
		private System.DateTime _AddedDate;
		
		private System.Nullable<System.DateTime> _LastUpdate;
		
		private System.Nullable<int> _PollID;
		
		private int _OrderBy;
		
		private EntitySet<ForumLog> _ForumLogs;
		
		private EntitySet<Forum> _Forums;
		
		private EntitySet<Game> _Games;
		
		private EntitySet<Notice> _Notices;
		
		private EntitySet<ForumMessage> _ForumMessages;
		
		private EntitySet<Tournament> _Tournaments;
		
		private EntitySet<LeagueLevel> _LeagueLevels;
		
		private EntitySet<League> _Leagues;
		
		private EntityRef<Forum> _Forum1;
		
		private EntityRef<Poll> _Poll;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnParentIDChanging(System.Nullable<int> value);
    partial void OnParentIDChanged();
    partial void OnUserIDChanging(System.Nullable<int> value);
    partial void OnUserIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnImagePathChanging(string value);
    partial void OnImagePathChanged();
    partial void OnSubTitleChanging(string value);
    partial void OnSubTitleChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnIsEndChanging(bool value);
    partial void OnIsEndChanged();
    partial void OnVisitCountChanging(int value);
    partial void OnVisitCountChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnLastUpdateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastUpdateChanged();
    partial void OnPollIDChanging(System.Nullable<int> value);
    partial void OnPollIDChanged();
    partial void OnOrderByChanging(int value);
    partial void OnOrderByChanged();
    #endregion
		
		public Forum()
		{
			this._ForumLogs = new EntitySet<ForumLog>(new Action<ForumLog>(this.attach_ForumLogs), new Action<ForumLog>(this.detach_ForumLogs));
			this._Forums = new EntitySet<Forum>(new Action<Forum>(this.attach_Forums), new Action<Forum>(this.detach_Forums));
			this._Games = new EntitySet<Game>(new Action<Game>(this.attach_Games), new Action<Game>(this.detach_Games));
			this._Notices = new EntitySet<Notice>(new Action<Notice>(this.attach_Notices), new Action<Notice>(this.detach_Notices));
			this._ForumMessages = new EntitySet<ForumMessage>(new Action<ForumMessage>(this.attach_ForumMessages), new Action<ForumMessage>(this.detach_ForumMessages));
			this._Tournaments = new EntitySet<Tournament>(new Action<Tournament>(this.attach_Tournaments), new Action<Tournament>(this.detach_Tournaments));
			this._LeagueLevels = new EntitySet<LeagueLevel>(new Action<LeagueLevel>(this.attach_LeagueLevels), new Action<LeagueLevel>(this.detach_LeagueLevels));
			this._Leagues = new EntitySet<League>(new Action<League>(this.attach_Leagues), new Action<League>(this.detach_Leagues));
			this._Forum1 = default(EntityRef<Forum>);
			this._Poll = default(EntityRef<Poll>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentID", DbType="Int")]
		public System.Nullable<int> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					if (this._Forum1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int")]
		public System.Nullable<int> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImagePath", DbType="NVarChar(150)")]
		public string ImagePath
		{
			get
			{
				return this._ImagePath;
			}
			set
			{
				if ((this._ImagePath != value))
				{
					this.OnImagePathChanging(value);
					this.SendPropertyChanging();
					this._ImagePath = value;
					this.SendPropertyChanged("ImagePath");
					this.OnImagePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubTitle", DbType="NVarChar(MAX)")]
		public string SubTitle
		{
			get
			{
				return this._SubTitle;
			}
			set
			{
				if ((this._SubTitle != value))
				{
					this.OnSubTitleChanging(value);
					this.SendPropertyChanging();
					this._SubTitle = value;
					this.SendPropertyChanged("SubTitle");
					this.OnSubTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsEnd", DbType="Bit NOT NULL")]
		public bool IsEnd
		{
			get
			{
				return this._IsEnd;
			}
			set
			{
				if ((this._IsEnd != value))
				{
					this.OnIsEndChanging(value);
					this.SendPropertyChanging();
					this._IsEnd = value;
					this.SendPropertyChanged("IsEnd");
					this.OnIsEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisitCount", DbType="Int NOT NULL")]
		public int VisitCount
		{
			get
			{
				return this._VisitCount;
			}
			set
			{
				if ((this._VisitCount != value))
				{
					this.OnVisitCountChanging(value);
					this.SendPropertyChanging();
					this._VisitCount = value;
					this.SendPropertyChanged("VisitCount");
					this.OnVisitCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PollID", DbType="Int")]
		public System.Nullable<int> PollID
		{
			get
			{
				return this._PollID;
			}
			set
			{
				if ((this._PollID != value))
				{
					if (this._Poll.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPollIDChanging(value);
					this.SendPropertyChanging();
					this._PollID = value;
					this.SendPropertyChanged("PollID");
					this.OnPollIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderBy", DbType="Int NOT NULL")]
		public int OrderBy
		{
			get
			{
				return this._OrderBy;
			}
			set
			{
				if ((this._OrderBy != value))
				{
					this.OnOrderByChanging(value);
					this.SendPropertyChanging();
					this._OrderBy = value;
					this.SendPropertyChanged("OrderBy");
					this.OnOrderByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forum_ForumLog", Storage="_ForumLogs", ThisKey="ID", OtherKey="ForumID")]
		public EntitySet<ForumLog> ForumLogs
		{
			get
			{
				return this._ForumLogs;
			}
			set
			{
				this._ForumLogs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forum_Forum", Storage="_Forums", ThisKey="ID", OtherKey="ParentID")]
		public EntitySet<Forum> Forums
		{
			get
			{
				return this._Forums;
			}
			set
			{
				this._Forums.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forum_Game", Storage="_Games", ThisKey="ID", OtherKey="ForumID")]
		public EntitySet<Game> Games
		{
			get
			{
				return this._Games;
			}
			set
			{
				this._Games.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forum_Notice", Storage="_Notices", ThisKey="ID", OtherKey="ForumID")]
		public EntitySet<Notice> Notices
		{
			get
			{
				return this._Notices;
			}
			set
			{
				this._Notices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forum_ForumMessage", Storage="_ForumMessages", ThisKey="ID", OtherKey="ForumID")]
		public EntitySet<ForumMessage> ForumMessages
		{
			get
			{
				return this._ForumMessages;
			}
			set
			{
				this._ForumMessages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forum_Tournament", Storage="_Tournaments", ThisKey="ID", OtherKey="ForumID")]
		public EntitySet<Tournament> Tournaments
		{
			get
			{
				return this._Tournaments;
			}
			set
			{
				this._Tournaments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forum_LeagueLevel", Storage="_LeagueLevels", ThisKey="ID", OtherKey="ForumID")]
		public EntitySet<LeagueLevel> LeagueLevels
		{
			get
			{
				return this._LeagueLevels;
			}
			set
			{
				this._LeagueLevels.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forum_League", Storage="_Leagues", ThisKey="ID", OtherKey="ForumID")]
		public EntitySet<League> Leagues
		{
			get
			{
				return this._Leagues;
			}
			set
			{
				this._Leagues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forum_Forum", Storage="_Forum1", ThisKey="ParentID", OtherKey="ID", IsForeignKey=true)]
		public Forum Forum1
		{
			get
			{
				return this._Forum1.Entity;
			}
			set
			{
				Forum previousValue = this._Forum1.Entity;
				if (((previousValue != value) 
							|| (this._Forum1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Forum1.Entity = null;
						previousValue.Forums.Remove(this);
					}
					this._Forum1.Entity = value;
					if ((value != null))
					{
						value.Forums.Add(this);
						this._ParentID = value.ID;
					}
					else
					{
						this._ParentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Forum1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Poll_Forum", Storage="_Poll", ThisKey="PollID", OtherKey="ID", IsForeignKey=true)]
		public Poll Poll
		{
			get
			{
				return this._Poll.Entity;
			}
			set
			{
				Poll previousValue = this._Poll.Entity;
				if (((previousValue != value) 
							|| (this._Poll.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Poll.Entity = null;
						previousValue.Forums.Remove(this);
					}
					this._Poll.Entity = value;
					if ((value != null))
					{
						value.Forums.Add(this);
						this._PollID = value.ID;
					}
					else
					{
						this._PollID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Poll");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Forum", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Forums.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Forums.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ForumLogs(ForumLog entity)
		{
			this.SendPropertyChanging();
			entity.Forum = this;
		}
		
		private void detach_ForumLogs(ForumLog entity)
		{
			this.SendPropertyChanging();
			entity.Forum = null;
		}
		
		private void attach_Forums(Forum entity)
		{
			this.SendPropertyChanging();
			entity.Forum1 = this;
		}
		
		private void detach_Forums(Forum entity)
		{
			this.SendPropertyChanging();
			entity.Forum1 = null;
		}
		
		private void attach_Games(Game entity)
		{
			this.SendPropertyChanging();
			entity.Forum = this;
		}
		
		private void detach_Games(Game entity)
		{
			this.SendPropertyChanging();
			entity.Forum = null;
		}
		
		private void attach_Notices(Notice entity)
		{
			this.SendPropertyChanging();
			entity.Forum = this;
		}
		
		private void detach_Notices(Notice entity)
		{
			this.SendPropertyChanging();
			entity.Forum = null;
		}
		
		private void attach_ForumMessages(ForumMessage entity)
		{
			this.SendPropertyChanging();
			entity.Forum = this;
		}
		
		private void detach_ForumMessages(ForumMessage entity)
		{
			this.SendPropertyChanging();
			entity.Forum = null;
		}
		
		private void attach_Tournaments(Tournament entity)
		{
			this.SendPropertyChanging();
			entity.Forum = this;
		}
		
		private void detach_Tournaments(Tournament entity)
		{
			this.SendPropertyChanging();
			entity.Forum = null;
		}
		
		private void attach_LeagueLevels(LeagueLevel entity)
		{
			this.SendPropertyChanging();
			entity.Forum = this;
		}
		
		private void detach_LeagueLevels(LeagueLevel entity)
		{
			this.SendPropertyChanging();
			entity.Forum = null;
		}
		
		private void attach_Leagues(League entity)
		{
			this.SendPropertyChanging();
			entity.Forum = this;
		}
		
		private void detach_Leagues(League entity)
		{
			this.SendPropertyChanging();
			entity.Forum = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PhotoAlbum")]
	public partial class PhotoAlbum : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private System.Nullable<int> _GroupID;
		
		private string _Name;
		
		private string _Url;
		
		private System.DateTime _AddedDate;
		
		private int _OrderBy;
		
		private bool _ShowOnMain;
		
		private EntitySet<Photo> _Photos;
		
		private EntitySet<PhotoAlbumSocialPost> _PhotoAlbumSocialPosts;
		
		private EntityRef<Group> _Group;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnGroupIDChanging(System.Nullable<int> value);
    partial void OnGroupIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnOrderByChanging(int value);
    partial void OnOrderByChanged();
    partial void OnShowOnMainChanging(bool value);
    partial void OnShowOnMainChanged();
    #endregion
		
		public PhotoAlbum()
		{
			this._Photos = new EntitySet<Photo>(new Action<Photo>(this.attach_Photos), new Action<Photo>(this.detach_Photos));
			this._PhotoAlbumSocialPosts = new EntitySet<PhotoAlbumSocialPost>(new Action<PhotoAlbumSocialPost>(this.attach_PhotoAlbumSocialPosts), new Action<PhotoAlbumSocialPost>(this.detach_PhotoAlbumSocialPosts));
			this._Group = default(EntityRef<Group>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="Int")]
		public System.Nullable<int> GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderBy", DbType="Int NOT NULL")]
		public int OrderBy
		{
			get
			{
				return this._OrderBy;
			}
			set
			{
				if ((this._OrderBy != value))
				{
					this.OnOrderByChanging(value);
					this.SendPropertyChanging();
					this._OrderBy = value;
					this.SendPropertyChanged("OrderBy");
					this.OnOrderByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShowOnMain", DbType="Bit NOT NULL")]
		public bool ShowOnMain
		{
			get
			{
				return this._ShowOnMain;
			}
			set
			{
				if ((this._ShowOnMain != value))
				{
					this.OnShowOnMainChanging(value);
					this.SendPropertyChanging();
					this._ShowOnMain = value;
					this.SendPropertyChanged("ShowOnMain");
					this.OnShowOnMainChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PhotoAlbum_Photo", Storage="_Photos", ThisKey="ID", OtherKey="PhotoAlbumID")]
		public EntitySet<Photo> Photos
		{
			get
			{
				return this._Photos;
			}
			set
			{
				this._Photos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PhotoAlbum_PhotoAlbumSocialPost", Storage="_PhotoAlbumSocialPosts", ThisKey="ID", OtherKey="PhotoAlbumID")]
		public EntitySet<PhotoAlbumSocialPost> PhotoAlbumSocialPosts
		{
			get
			{
				return this._PhotoAlbumSocialPosts;
			}
			set
			{
				this._PhotoAlbumSocialPosts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_PhotoAlbum", Storage="_Group", ThisKey="GroupID", OtherKey="ID", IsForeignKey=true, DeleteRule="SET NULL")]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.PhotoAlbums.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.PhotoAlbums.Add(this);
						this._GroupID = value.ID;
					}
					else
					{
						this._GroupID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_PhotoAlbum", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.PhotoAlbums.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.PhotoAlbums.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Photos(Photo entity)
		{
			this.SendPropertyChanging();
			entity.PhotoAlbum = this;
		}
		
		private void detach_Photos(Photo entity)
		{
			this.SendPropertyChanging();
			entity.PhotoAlbum = null;
		}
		
		private void attach_PhotoAlbumSocialPosts(PhotoAlbumSocialPost entity)
		{
			this.SendPropertyChanging();
			entity.PhotoAlbum = this;
		}
		
		private void detach_PhotoAlbumSocialPosts(PhotoAlbumSocialPost entity)
		{
			this.SendPropertyChanging();
			entity.PhotoAlbum = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Blog")]
	public partial class Blog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private System.Nullable<int> _GroupID;
		
		private string _Header;
		
		private string _Url;
		
		private string _Text;
		
		private string _PreviewUrl;
		
		private int _CommentsCount;
		
		private System.DateTime _AddedDate;
		
		private System.DateTime _LastModificateDate;
		
		private int _VisitCount;
		
		private bool _IsBanned;
		
		private string _BanDescription;
		
		private bool _ShowInMain;
		
		private int _Likes;
		
		private EntitySet<BlogComment> _BlogComments;
		
		private EntitySet<BlogLike> _BlogLikes;
		
		private EntitySet<BlogSocialPost> _BlogSocialPosts;
		
		private EntityRef<Group> _Group;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnGroupIDChanging(System.Nullable<int> value);
    partial void OnGroupIDChanged();
    partial void OnHeaderChanging(string value);
    partial void OnHeaderChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnPreviewUrlChanging(string value);
    partial void OnPreviewUrlChanged();
    partial void OnCommentsCountChanging(int value);
    partial void OnCommentsCountChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnLastModificateDateChanging(System.DateTime value);
    partial void OnLastModificateDateChanged();
    partial void OnVisitCountChanging(int value);
    partial void OnVisitCountChanged();
    partial void OnIsBannedChanging(bool value);
    partial void OnIsBannedChanged();
    partial void OnBanDescriptionChanging(string value);
    partial void OnBanDescriptionChanged();
    partial void OnShowInMainChanging(bool value);
    partial void OnShowInMainChanged();
    partial void OnLikesChanging(int value);
    partial void OnLikesChanged();
    #endregion
		
		public Blog()
		{
			this._BlogComments = new EntitySet<BlogComment>(new Action<BlogComment>(this.attach_BlogComments), new Action<BlogComment>(this.detach_BlogComments));
			this._BlogLikes = new EntitySet<BlogLike>(new Action<BlogLike>(this.attach_BlogLikes), new Action<BlogLike>(this.detach_BlogLikes));
			this._BlogSocialPosts = new EntitySet<BlogSocialPost>(new Action<BlogSocialPost>(this.attach_BlogSocialPosts), new Action<BlogSocialPost>(this.detach_BlogSocialPosts));
			this._Group = default(EntityRef<Group>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="Int")]
		public System.Nullable<int> GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Header", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Header
		{
			get
			{
				return this._Header;
			}
			set
			{
				if ((this._Header != value))
				{
					this.OnHeaderChanging(value);
					this.SendPropertyChanging();
					this._Header = value;
					this.SendPropertyChanged("Header");
					this.OnHeaderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreviewUrl", DbType="NVarChar(150)")]
		public string PreviewUrl
		{
			get
			{
				return this._PreviewUrl;
			}
			set
			{
				if ((this._PreviewUrl != value))
				{
					this.OnPreviewUrlChanging(value);
					this.SendPropertyChanging();
					this._PreviewUrl = value;
					this.SendPropertyChanged("PreviewUrl");
					this.OnPreviewUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentsCount", DbType="Int NOT NULL")]
		public int CommentsCount
		{
			get
			{
				return this._CommentsCount;
			}
			set
			{
				if ((this._CommentsCount != value))
				{
					this.OnCommentsCountChanging(value);
					this.SendPropertyChanging();
					this._CommentsCount = value;
					this.SendPropertyChanged("CommentsCount");
					this.OnCommentsCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModificateDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastModificateDate
		{
			get
			{
				return this._LastModificateDate;
			}
			set
			{
				if ((this._LastModificateDate != value))
				{
					this.OnLastModificateDateChanging(value);
					this.SendPropertyChanging();
					this._LastModificateDate = value;
					this.SendPropertyChanged("LastModificateDate");
					this.OnLastModificateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisitCount", DbType="Int NOT NULL")]
		public int VisitCount
		{
			get
			{
				return this._VisitCount;
			}
			set
			{
				if ((this._VisitCount != value))
				{
					this.OnVisitCountChanging(value);
					this.SendPropertyChanging();
					this._VisitCount = value;
					this.SendPropertyChanged("VisitCount");
					this.OnVisitCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsBanned", DbType="Bit NOT NULL")]
		public bool IsBanned
		{
			get
			{
				return this._IsBanned;
			}
			set
			{
				if ((this._IsBanned != value))
				{
					this.OnIsBannedChanging(value);
					this.SendPropertyChanging();
					this._IsBanned = value;
					this.SendPropertyChanged("IsBanned");
					this.OnIsBannedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BanDescription", DbType="NVarChar(500)")]
		public string BanDescription
		{
			get
			{
				return this._BanDescription;
			}
			set
			{
				if ((this._BanDescription != value))
				{
					this.OnBanDescriptionChanging(value);
					this.SendPropertyChanging();
					this._BanDescription = value;
					this.SendPropertyChanged("BanDescription");
					this.OnBanDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShowInMain", DbType="Bit NOT NULL")]
		public bool ShowInMain
		{
			get
			{
				return this._ShowInMain;
			}
			set
			{
				if ((this._ShowInMain != value))
				{
					this.OnShowInMainChanging(value);
					this.SendPropertyChanging();
					this._ShowInMain = value;
					this.SendPropertyChanged("ShowInMain");
					this.OnShowInMainChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Likes", DbType="Int NOT NULL")]
		public int Likes
		{
			get
			{
				return this._Likes;
			}
			set
			{
				if ((this._Likes != value))
				{
					this.OnLikesChanging(value);
					this.SendPropertyChanging();
					this._Likes = value;
					this.SendPropertyChanged("Likes");
					this.OnLikesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Blog_BlogComment", Storage="_BlogComments", ThisKey="ID", OtherKey="BlogID")]
		public EntitySet<BlogComment> BlogComments
		{
			get
			{
				return this._BlogComments;
			}
			set
			{
				this._BlogComments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Blog_BlogLike", Storage="_BlogLikes", ThisKey="ID", OtherKey="BlogID")]
		public EntitySet<BlogLike> BlogLikes
		{
			get
			{
				return this._BlogLikes;
			}
			set
			{
				this._BlogLikes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Blog_BlogSocialPost", Storage="_BlogSocialPosts", ThisKey="ID", OtherKey="BlogID")]
		public EntitySet<BlogSocialPost> BlogSocialPosts
		{
			get
			{
				return this._BlogSocialPosts;
			}
			set
			{
				this._BlogSocialPosts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_Blog", Storage="_Group", ThisKey="GroupID", OtherKey="ID", IsForeignKey=true, DeleteRule="SET NULL")]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.Blogs.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.Blogs.Add(this);
						this._GroupID = value.ID;
					}
					else
					{
						this._GroupID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Blog", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Blogs.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Blogs.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BlogComments(BlogComment entity)
		{
			this.SendPropertyChanging();
			entity.Blog = this;
		}
		
		private void detach_BlogComments(BlogComment entity)
		{
			this.SendPropertyChanging();
			entity.Blog = null;
		}
		
		private void attach_BlogLikes(BlogLike entity)
		{
			this.SendPropertyChanging();
			entity.Blog = this;
		}
		
		private void detach_BlogLikes(BlogLike entity)
		{
			this.SendPropertyChanging();
			entity.Blog = null;
		}
		
		private void attach_BlogSocialPosts(BlogSocialPost entity)
		{
			this.SendPropertyChanging();
			entity.Blog = this;
		}
		
		private void detach_BlogSocialPosts(BlogSocialPost entity)
		{
			this.SendPropertyChanging();
			entity.Blog = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.New")]
	public partial class New : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _NewTypeID;
		
		private bool _IsMain;
		
		private string _PreviewPath;
		
		private string _AvatarPreviewPath;
		
		private string _TitlePath;
		
		private string _AvatarTitlePath;
		
		private string _Header;
		
		private string _Url;
		
		private string _SubHeader;
		
		private string _Text;
		
		private System.DateTime _AddedDate;
		
		private int _VisitCount;
		
		private int _UserID;
		
		private int _Likes;
		
		private EntitySet<NewComment> _NewComments;
		
		private EntitySet<NewLike> _NewLikes;
		
		private EntitySet<NewSocialPost> _NewSocialPosts;
		
		private EntityRef<NewType> _NewType;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNewTypeIDChanging(int value);
    partial void OnNewTypeIDChanged();
    partial void OnIsMainChanging(bool value);
    partial void OnIsMainChanged();
    partial void OnPreviewPathChanging(string value);
    partial void OnPreviewPathChanged();
    partial void OnAvatarPreviewPathChanging(string value);
    partial void OnAvatarPreviewPathChanged();
    partial void OnTitlePathChanging(string value);
    partial void OnTitlePathChanged();
    partial void OnAvatarTitlePathChanging(string value);
    partial void OnAvatarTitlePathChanged();
    partial void OnHeaderChanging(string value);
    partial void OnHeaderChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnSubHeaderChanging(string value);
    partial void OnSubHeaderChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnVisitCountChanging(int value);
    partial void OnVisitCountChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnLikesChanging(int value);
    partial void OnLikesChanged();
    #endregion
		
		public New()
		{
			this._NewComments = new EntitySet<NewComment>(new Action<NewComment>(this.attach_NewComments), new Action<NewComment>(this.detach_NewComments));
			this._NewLikes = new EntitySet<NewLike>(new Action<NewLike>(this.attach_NewLikes), new Action<NewLike>(this.detach_NewLikes));
			this._NewSocialPosts = new EntitySet<NewSocialPost>(new Action<NewSocialPost>(this.attach_NewSocialPosts), new Action<NewSocialPost>(this.detach_NewSocialPosts));
			this._NewType = default(EntityRef<NewType>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewTypeID", DbType="Int NOT NULL")]
		public int NewTypeID
		{
			get
			{
				return this._NewTypeID;
			}
			set
			{
				if ((this._NewTypeID != value))
				{
					if (this._NewType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNewTypeIDChanging(value);
					this.SendPropertyChanging();
					this._NewTypeID = value;
					this.SendPropertyChanged("NewTypeID");
					this.OnNewTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsMain", DbType="Bit NOT NULL")]
		public bool IsMain
		{
			get
			{
				return this._IsMain;
			}
			set
			{
				if ((this._IsMain != value))
				{
					this.OnIsMainChanging(value);
					this.SendPropertyChanging();
					this._IsMain = value;
					this.SendPropertyChanged("IsMain");
					this.OnIsMainChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreviewPath", DbType="NVarChar(150)")]
		public string PreviewPath
		{
			get
			{
				return this._PreviewPath;
			}
			set
			{
				if ((this._PreviewPath != value))
				{
					this.OnPreviewPathChanging(value);
					this.SendPropertyChanging();
					this._PreviewPath = value;
					this.SendPropertyChanged("PreviewPath");
					this.OnPreviewPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AvatarPreviewPath", DbType="NVarChar(150)")]
		public string AvatarPreviewPath
		{
			get
			{
				return this._AvatarPreviewPath;
			}
			set
			{
				if ((this._AvatarPreviewPath != value))
				{
					this.OnAvatarPreviewPathChanging(value);
					this.SendPropertyChanging();
					this._AvatarPreviewPath = value;
					this.SendPropertyChanged("AvatarPreviewPath");
					this.OnAvatarPreviewPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TitlePath", DbType="NVarChar(150)")]
		public string TitlePath
		{
			get
			{
				return this._TitlePath;
			}
			set
			{
				if ((this._TitlePath != value))
				{
					this.OnTitlePathChanging(value);
					this.SendPropertyChanging();
					this._TitlePath = value;
					this.SendPropertyChanged("TitlePath");
					this.OnTitlePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AvatarTitlePath", DbType="NVarChar(150)")]
		public string AvatarTitlePath
		{
			get
			{
				return this._AvatarTitlePath;
			}
			set
			{
				if ((this._AvatarTitlePath != value))
				{
					this.OnAvatarTitlePathChanging(value);
					this.SendPropertyChanging();
					this._AvatarTitlePath = value;
					this.SendPropertyChanged("AvatarTitlePath");
					this.OnAvatarTitlePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Header", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Header
		{
			get
			{
				return this._Header;
			}
			set
			{
				if ((this._Header != value))
				{
					this.OnHeaderChanging(value);
					this.SendPropertyChanging();
					this._Header = value;
					this.SendPropertyChanged("Header");
					this.OnHeaderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubHeader", DbType="NVarChar(1000)")]
		public string SubHeader
		{
			get
			{
				return this._SubHeader;
			}
			set
			{
				if ((this._SubHeader != value))
				{
					this.OnSubHeaderChanging(value);
					this.SendPropertyChanging();
					this._SubHeader = value;
					this.SendPropertyChanged("SubHeader");
					this.OnSubHeaderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisitCount", DbType="Int NOT NULL")]
		public int VisitCount
		{
			get
			{
				return this._VisitCount;
			}
			set
			{
				if ((this._VisitCount != value))
				{
					this.OnVisitCountChanging(value);
					this.SendPropertyChanging();
					this._VisitCount = value;
					this.SendPropertyChanged("VisitCount");
					this.OnVisitCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Likes", DbType="Int NOT NULL")]
		public int Likes
		{
			get
			{
				return this._Likes;
			}
			set
			{
				if ((this._Likes != value))
				{
					this.OnLikesChanging(value);
					this.SendPropertyChanging();
					this._Likes = value;
					this.SendPropertyChanged("Likes");
					this.OnLikesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="New_NewComment", Storage="_NewComments", ThisKey="ID", OtherKey="NewID")]
		public EntitySet<NewComment> NewComments
		{
			get
			{
				return this._NewComments;
			}
			set
			{
				this._NewComments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="New_NewLike", Storage="_NewLikes", ThisKey="ID", OtherKey="NewID")]
		public EntitySet<NewLike> NewLikes
		{
			get
			{
				return this._NewLikes;
			}
			set
			{
				this._NewLikes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="New_NewSocialPost", Storage="_NewSocialPosts", ThisKey="ID", OtherKey="NewID")]
		public EntitySet<NewSocialPost> NewSocialPosts
		{
			get
			{
				return this._NewSocialPosts;
			}
			set
			{
				this._NewSocialPosts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NewType_New", Storage="_NewType", ThisKey="NewTypeID", OtherKey="ID", IsForeignKey=true)]
		public NewType NewType
		{
			get
			{
				return this._NewType.Entity;
			}
			set
			{
				NewType previousValue = this._NewType.Entity;
				if (((previousValue != value) 
							|| (this._NewType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NewType.Entity = null;
						previousValue.News.Remove(this);
					}
					this._NewType.Entity = value;
					if ((value != null))
					{
						value.News.Add(this);
						this._NewTypeID = value.ID;
					}
					else
					{
						this._NewTypeID = default(int);
					}
					this.SendPropertyChanged("NewType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_New", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.News.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.News.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_NewComments(NewComment entity)
		{
			this.SendPropertyChanging();
			entity.New = this;
		}
		
		private void detach_NewComments(NewComment entity)
		{
			this.SendPropertyChanging();
			entity.New = null;
		}
		
		private void attach_NewLikes(NewLike entity)
		{
			this.SendPropertyChanging();
			entity.New = this;
		}
		
		private void detach_NewLikes(NewLike entity)
		{
			this.SendPropertyChanging();
			entity.New = null;
		}
		
		private void attach_NewSocialPosts(NewSocialPost entity)
		{
			this.SendPropertyChanging();
			entity.New = this;
		}
		
		private void detach_NewSocialPosts(NewSocialPost entity)
		{
			this.SendPropertyChanging();
			entity.New = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Video")]
	public partial class Video : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Header;
		
		private string _Url;
		
		private string _VideoUrl;
		
		private string _VideoThumb;
		
		private string _VideoCode;
		
		private string _Text;
		
		private System.DateTime _AddedDate;
		
		private int _VisitCount;
		
		private int _UserID;
		
		private EntitySet<VideoComment> _VideoComments;
		
		private EntitySet<VideoSocialPost> _VideoSocialPosts;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnHeaderChanging(string value);
    partial void OnHeaderChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnVideoUrlChanging(string value);
    partial void OnVideoUrlChanged();
    partial void OnVideoThumbChanging(string value);
    partial void OnVideoThumbChanged();
    partial void OnVideoCodeChanging(string value);
    partial void OnVideoCodeChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnVisitCountChanging(int value);
    partial void OnVisitCountChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    #endregion
		
		public Video()
		{
			this._VideoComments = new EntitySet<VideoComment>(new Action<VideoComment>(this.attach_VideoComments), new Action<VideoComment>(this.detach_VideoComments));
			this._VideoSocialPosts = new EntitySet<VideoSocialPost>(new Action<VideoSocialPost>(this.attach_VideoSocialPosts), new Action<VideoSocialPost>(this.detach_VideoSocialPosts));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Header", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Header
		{
			get
			{
				return this._Header;
			}
			set
			{
				if ((this._Header != value))
				{
					this.OnHeaderChanging(value);
					this.SendPropertyChanging();
					this._Header = value;
					this.SendPropertyChanged("Header");
					this.OnHeaderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VideoUrl", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string VideoUrl
		{
			get
			{
				return this._VideoUrl;
			}
			set
			{
				if ((this._VideoUrl != value))
				{
					this.OnVideoUrlChanging(value);
					this.SendPropertyChanging();
					this._VideoUrl = value;
					this.SendPropertyChanged("VideoUrl");
					this.OnVideoUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VideoThumb", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string VideoThumb
		{
			get
			{
				return this._VideoThumb;
			}
			set
			{
				if ((this._VideoThumb != value))
				{
					this.OnVideoThumbChanging(value);
					this.SendPropertyChanging();
					this._VideoThumb = value;
					this.SendPropertyChanged("VideoThumb");
					this.OnVideoThumbChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VideoCode", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string VideoCode
		{
			get
			{
				return this._VideoCode;
			}
			set
			{
				if ((this._VideoCode != value))
				{
					this.OnVideoCodeChanging(value);
					this.SendPropertyChanging();
					this._VideoCode = value;
					this.SendPropertyChanged("VideoCode");
					this.OnVideoCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(MAX)")]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisitCount", DbType="Int NOT NULL")]
		public int VisitCount
		{
			get
			{
				return this._VisitCount;
			}
			set
			{
				if ((this._VisitCount != value))
				{
					this.OnVisitCountChanging(value);
					this.SendPropertyChanging();
					this._VisitCount = value;
					this.SendPropertyChanged("VisitCount");
					this.OnVisitCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Video_VideoComment", Storage="_VideoComments", ThisKey="ID", OtherKey="VideoID")]
		public EntitySet<VideoComment> VideoComments
		{
			get
			{
				return this._VideoComments;
			}
			set
			{
				this._VideoComments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Video_VideoSocialPost", Storage="_VideoSocialPosts", ThisKey="ID", OtherKey="VideoID")]
		public EntitySet<VideoSocialPost> VideoSocialPosts
		{
			get
			{
				return this._VideoSocialPosts;
			}
			set
			{
				this._VideoSocialPosts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Video", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Videos.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Videos.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_VideoComments(VideoComment entity)
		{
			this.SendPropertyChanging();
			entity.Video = this;
		}
		
		private void detach_VideoComments(VideoComment entity)
		{
			this.SendPropertyChanging();
			entity.Video = null;
		}
		
		private void attach_VideoSocialPosts(VideoSocialPost entity)
		{
			this.SendPropertyChanging();
			entity.Video = this;
		}
		
		private void detach_VideoSocialPosts(VideoSocialPost entity)
		{
			this.SendPropertyChanging();
			entity.Video = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Game")]
	public partial class Game : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _PlatformID;
		
		private string _Name;
		
		private string _Url;
		
		private string _Description;
		
		private string _ImagePath189;
		
		private string _ImagePath103;
		
		private string _ImagePath144v;
		
		private string _ImagePath47;
		
		private string _ImagePath22;
		
		private string _HowToPlay;
		
		private bool _IsMain;
		
		private int _GameType;
		
		private System.Nullable<int> _ForumID;
		
		private int _GameCategory;
		
		private bool _IsCommand;
		
		private System.Nullable<int> _MaxCountPlayer;
		
		private string _Keywords;
		
		private string _MetaDescription;
		
		private EntitySet<UserGame> _UserGames;
		
		private EntitySet<Rating> _Ratings;
		
		private EntitySet<UserRoleGame> _UserRoleGames;
		
		private EntitySet<Message> _Messages;
		
		private EntitySet<Notice> _Notices;
		
		private EntitySet<Group> _Groups;
		
		private EntitySet<Product> _Products;
		
		private EntitySet<Match> _Matches;
		
		private EntitySet<Tournament> _Tournaments;
		
		private EntitySet<League> _Leagues;
		
		private EntityRef<Forum> _Forum;
		
		private EntityRef<Platform> _Platform;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPlatformIDChanging(int value);
    partial void OnPlatformIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnImagePath189Changing(string value);
    partial void OnImagePath189Changed();
    partial void OnImagePath103Changing(string value);
    partial void OnImagePath103Changed();
    partial void OnImagePath144vChanging(string value);
    partial void OnImagePath144vChanged();
    partial void OnImagePath47Changing(string value);
    partial void OnImagePath47Changed();
    partial void OnImagePath22Changing(string value);
    partial void OnImagePath22Changed();
    partial void OnHowToPlayChanging(string value);
    partial void OnHowToPlayChanged();
    partial void OnIsMainChanging(bool value);
    partial void OnIsMainChanged();
    partial void OnGameTypeChanging(int value);
    partial void OnGameTypeChanged();
    partial void OnForumIDChanging(System.Nullable<int> value);
    partial void OnForumIDChanged();
    partial void OnGameCategoryChanging(int value);
    partial void OnGameCategoryChanged();
    partial void OnIsCommandChanging(bool value);
    partial void OnIsCommandChanged();
    partial void OnMaxCountPlayerChanging(System.Nullable<int> value);
    partial void OnMaxCountPlayerChanged();
    partial void OnKeywordsChanging(string value);
    partial void OnKeywordsChanged();
    partial void OnMetaDescriptionChanging(string value);
    partial void OnMetaDescriptionChanged();
    #endregion
		
		public Game()
		{
			this._UserGames = new EntitySet<UserGame>(new Action<UserGame>(this.attach_UserGames), new Action<UserGame>(this.detach_UserGames));
			this._Ratings = new EntitySet<Rating>(new Action<Rating>(this.attach_Ratings), new Action<Rating>(this.detach_Ratings));
			this._UserRoleGames = new EntitySet<UserRoleGame>(new Action<UserRoleGame>(this.attach_UserRoleGames), new Action<UserRoleGame>(this.detach_UserRoleGames));
			this._Messages = new EntitySet<Message>(new Action<Message>(this.attach_Messages), new Action<Message>(this.detach_Messages));
			this._Notices = new EntitySet<Notice>(new Action<Notice>(this.attach_Notices), new Action<Notice>(this.detach_Notices));
			this._Groups = new EntitySet<Group>(new Action<Group>(this.attach_Groups), new Action<Group>(this.detach_Groups));
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			this._Matches = new EntitySet<Match>(new Action<Match>(this.attach_Matches), new Action<Match>(this.detach_Matches));
			this._Tournaments = new EntitySet<Tournament>(new Action<Tournament>(this.attach_Tournaments), new Action<Tournament>(this.detach_Tournaments));
			this._Leagues = new EntitySet<League>(new Action<League>(this.attach_Leagues), new Action<League>(this.detach_Leagues));
			this._Forum = default(EntityRef<Forum>);
			this._Platform = default(EntityRef<Platform>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlatformID", DbType="Int NOT NULL")]
		public int PlatformID
		{
			get
			{
				return this._PlatformID;
			}
			set
			{
				if ((this._PlatformID != value))
				{
					if (this._Platform.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlatformIDChanging(value);
					this.SendPropertyChanging();
					this._PlatformID = value;
					this.SendPropertyChanged("PlatformID");
					this.OnPlatformIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImagePath189", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ImagePath189
		{
			get
			{
				return this._ImagePath189;
			}
			set
			{
				if ((this._ImagePath189 != value))
				{
					this.OnImagePath189Changing(value);
					this.SendPropertyChanging();
					this._ImagePath189 = value;
					this.SendPropertyChanged("ImagePath189");
					this.OnImagePath189Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImagePath103", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ImagePath103
		{
			get
			{
				return this._ImagePath103;
			}
			set
			{
				if ((this._ImagePath103 != value))
				{
					this.OnImagePath103Changing(value);
					this.SendPropertyChanging();
					this._ImagePath103 = value;
					this.SendPropertyChanged("ImagePath103");
					this.OnImagePath103Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImagePath144v", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ImagePath144v
		{
			get
			{
				return this._ImagePath144v;
			}
			set
			{
				if ((this._ImagePath144v != value))
				{
					this.OnImagePath144vChanging(value);
					this.SendPropertyChanging();
					this._ImagePath144v = value;
					this.SendPropertyChanged("ImagePath144v");
					this.OnImagePath144vChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImagePath47", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ImagePath47
		{
			get
			{
				return this._ImagePath47;
			}
			set
			{
				if ((this._ImagePath47 != value))
				{
					this.OnImagePath47Changing(value);
					this.SendPropertyChanging();
					this._ImagePath47 = value;
					this.SendPropertyChanged("ImagePath47");
					this.OnImagePath47Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImagePath22", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ImagePath22
		{
			get
			{
				return this._ImagePath22;
			}
			set
			{
				if ((this._ImagePath22 != value))
				{
					this.OnImagePath22Changing(value);
					this.SendPropertyChanging();
					this._ImagePath22 = value;
					this.SendPropertyChanged("ImagePath22");
					this.OnImagePath22Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HowToPlay", DbType="NVarChar(MAX)")]
		public string HowToPlay
		{
			get
			{
				return this._HowToPlay;
			}
			set
			{
				if ((this._HowToPlay != value))
				{
					this.OnHowToPlayChanging(value);
					this.SendPropertyChanging();
					this._HowToPlay = value;
					this.SendPropertyChanged("HowToPlay");
					this.OnHowToPlayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsMain", DbType="Bit NOT NULL")]
		public bool IsMain
		{
			get
			{
				return this._IsMain;
			}
			set
			{
				if ((this._IsMain != value))
				{
					this.OnIsMainChanging(value);
					this.SendPropertyChanging();
					this._IsMain = value;
					this.SendPropertyChanged("IsMain");
					this.OnIsMainChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameType", DbType="Int NOT NULL")]
		public int GameType
		{
			get
			{
				return this._GameType;
			}
			set
			{
				if ((this._GameType != value))
				{
					this.OnGameTypeChanging(value);
					this.SendPropertyChanging();
					this._GameType = value;
					this.SendPropertyChanged("GameType");
					this.OnGameTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ForumID", DbType="Int")]
		public System.Nullable<int> ForumID
		{
			get
			{
				return this._ForumID;
			}
			set
			{
				if ((this._ForumID != value))
				{
					if (this._Forum.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnForumIDChanging(value);
					this.SendPropertyChanging();
					this._ForumID = value;
					this.SendPropertyChanged("ForumID");
					this.OnForumIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameCategory", DbType="Int NOT NULL")]
		public int GameCategory
		{
			get
			{
				return this._GameCategory;
			}
			set
			{
				if ((this._GameCategory != value))
				{
					this.OnGameCategoryChanging(value);
					this.SendPropertyChanging();
					this._GameCategory = value;
					this.SendPropertyChanged("GameCategory");
					this.OnGameCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCommand", DbType="Bit NOT NULL")]
		public bool IsCommand
		{
			get
			{
				return this._IsCommand;
			}
			set
			{
				if ((this._IsCommand != value))
				{
					this.OnIsCommandChanging(value);
					this.SendPropertyChanging();
					this._IsCommand = value;
					this.SendPropertyChanged("IsCommand");
					this.OnIsCommandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxCountPlayer", DbType="Int")]
		public System.Nullable<int> MaxCountPlayer
		{
			get
			{
				return this._MaxCountPlayer;
			}
			set
			{
				if ((this._MaxCountPlayer != value))
				{
					this.OnMaxCountPlayerChanging(value);
					this.SendPropertyChanging();
					this._MaxCountPlayer = value;
					this.SendPropertyChanged("MaxCountPlayer");
					this.OnMaxCountPlayerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Keywords", DbType="NVarChar(MAX)")]
		public string Keywords
		{
			get
			{
				return this._Keywords;
			}
			set
			{
				if ((this._Keywords != value))
				{
					this.OnKeywordsChanging(value);
					this.SendPropertyChanging();
					this._Keywords = value;
					this.SendPropertyChanged("Keywords");
					this.OnKeywordsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MetaDescription", DbType="NVarChar(MAX)")]
		public string MetaDescription
		{
			get
			{
				return this._MetaDescription;
			}
			set
			{
				if ((this._MetaDescription != value))
				{
					this.OnMetaDescriptionChanging(value);
					this.SendPropertyChanging();
					this._MetaDescription = value;
					this.SendPropertyChanged("MetaDescription");
					this.OnMetaDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_UserGame", Storage="_UserGames", ThisKey="ID", OtherKey="GameID")]
		public EntitySet<UserGame> UserGames
		{
			get
			{
				return this._UserGames;
			}
			set
			{
				this._UserGames.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_Rating", Storage="_Ratings", ThisKey="ID", OtherKey="GameID")]
		public EntitySet<Rating> Ratings
		{
			get
			{
				return this._Ratings;
			}
			set
			{
				this._Ratings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_UserRoleGame", Storage="_UserRoleGames", ThisKey="ID", OtherKey="GameID")]
		public EntitySet<UserRoleGame> UserRoleGames
		{
			get
			{
				return this._UserRoleGames;
			}
			set
			{
				this._UserRoleGames.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_Message", Storage="_Messages", ThisKey="ID", OtherKey="GameID")]
		public EntitySet<Message> Messages
		{
			get
			{
				return this._Messages;
			}
			set
			{
				this._Messages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_Notice", Storage="_Notices", ThisKey="ID", OtherKey="GameID")]
		public EntitySet<Notice> Notices
		{
			get
			{
				return this._Notices;
			}
			set
			{
				this._Notices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_Group", Storage="_Groups", ThisKey="ID", OtherKey="GameID")]
		public EntitySet<Group> Groups
		{
			get
			{
				return this._Groups;
			}
			set
			{
				this._Groups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_Product", Storage="_Products", ThisKey="ID", OtherKey="GameID")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_Match", Storage="_Matches", ThisKey="ID", OtherKey="GameID")]
		public EntitySet<Match> Matches
		{
			get
			{
				return this._Matches;
			}
			set
			{
				this._Matches.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_Tournament", Storage="_Tournaments", ThisKey="ID", OtherKey="GameID")]
		public EntitySet<Tournament> Tournaments
		{
			get
			{
				return this._Tournaments;
			}
			set
			{
				this._Tournaments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_League", Storage="_Leagues", ThisKey="ID", OtherKey="GameID")]
		public EntitySet<League> Leagues
		{
			get
			{
				return this._Leagues;
			}
			set
			{
				this._Leagues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forum_Game", Storage="_Forum", ThisKey="ForumID", OtherKey="ID", IsForeignKey=true, DeleteRule="SET NULL")]
		public Forum Forum
		{
			get
			{
				return this._Forum.Entity;
			}
			set
			{
				Forum previousValue = this._Forum.Entity;
				if (((previousValue != value) 
							|| (this._Forum.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Forum.Entity = null;
						previousValue.Games.Remove(this);
					}
					this._Forum.Entity = value;
					if ((value != null))
					{
						value.Games.Add(this);
						this._ForumID = value.ID;
					}
					else
					{
						this._ForumID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Forum");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Platform_Game", Storage="_Platform", ThisKey="PlatformID", OtherKey="ID", IsForeignKey=true)]
		public Platform Platform
		{
			get
			{
				return this._Platform.Entity;
			}
			set
			{
				Platform previousValue = this._Platform.Entity;
				if (((previousValue != value) 
							|| (this._Platform.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Platform.Entity = null;
						previousValue.Games.Remove(this);
					}
					this._Platform.Entity = value;
					if ((value != null))
					{
						value.Games.Add(this);
						this._PlatformID = value.ID;
					}
					else
					{
						this._PlatformID = default(int);
					}
					this.SendPropertyChanged("Platform");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserGames(UserGame entity)
		{
			this.SendPropertyChanging();
			entity.Game = this;
		}
		
		private void detach_UserGames(UserGame entity)
		{
			this.SendPropertyChanging();
			entity.Game = null;
		}
		
		private void attach_Ratings(Rating entity)
		{
			this.SendPropertyChanging();
			entity.Game = this;
		}
		
		private void detach_Ratings(Rating entity)
		{
			this.SendPropertyChanging();
			entity.Game = null;
		}
		
		private void attach_UserRoleGames(UserRoleGame entity)
		{
			this.SendPropertyChanging();
			entity.Game = this;
		}
		
		private void detach_UserRoleGames(UserRoleGame entity)
		{
			this.SendPropertyChanging();
			entity.Game = null;
		}
		
		private void attach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.Game = this;
		}
		
		private void detach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.Game = null;
		}
		
		private void attach_Notices(Notice entity)
		{
			this.SendPropertyChanging();
			entity.Game = this;
		}
		
		private void detach_Notices(Notice entity)
		{
			this.SendPropertyChanging();
			entity.Game = null;
		}
		
		private void attach_Groups(Group entity)
		{
			this.SendPropertyChanging();
			entity.Game = this;
		}
		
		private void detach_Groups(Group entity)
		{
			this.SendPropertyChanging();
			entity.Game = null;
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Game = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Game = null;
		}
		
		private void attach_Matches(Match entity)
		{
			this.SendPropertyChanging();
			entity.Game = this;
		}
		
		private void detach_Matches(Match entity)
		{
			this.SendPropertyChanging();
			entity.Game = null;
		}
		
		private void attach_Tournaments(Tournament entity)
		{
			this.SendPropertyChanging();
			entity.Game = this;
		}
		
		private void detach_Tournaments(Tournament entity)
		{
			this.SendPropertyChanging();
			entity.Game = null;
		}
		
		private void attach_Leagues(League entity)
		{
			this.SendPropertyChanging();
			entity.Game = this;
		}
		
		private void detach_Leagues(League entity)
		{
			this.SendPropertyChanging();
			entity.Game = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NewSocialPost")]
	public partial class NewSocialPost : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _NewID;
		
		private int _SocialPostID;
		
		private EntityRef<New> _New;
		
		private EntityRef<SocialPost> _SocialPost;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNewIDChanging(int value);
    partial void OnNewIDChanged();
    partial void OnSocialPostIDChanging(int value);
    partial void OnSocialPostIDChanged();
    #endregion
		
		public NewSocialPost()
		{
			this._New = default(EntityRef<New>);
			this._SocialPost = default(EntityRef<SocialPost>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewID", DbType="Int NOT NULL")]
		public int NewID
		{
			get
			{
				return this._NewID;
			}
			set
			{
				if ((this._NewID != value))
				{
					if (this._New.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNewIDChanging(value);
					this.SendPropertyChanging();
					this._NewID = value;
					this.SendPropertyChanged("NewID");
					this.OnNewIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SocialPostID", DbType="Int NOT NULL")]
		public int SocialPostID
		{
			get
			{
				return this._SocialPostID;
			}
			set
			{
				if ((this._SocialPostID != value))
				{
					if (this._SocialPost.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSocialPostIDChanging(value);
					this.SendPropertyChanging();
					this._SocialPostID = value;
					this.SendPropertyChanged("SocialPostID");
					this.OnSocialPostIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="New_NewSocialPost", Storage="_New", ThisKey="NewID", OtherKey="ID", IsForeignKey=true)]
		public New New
		{
			get
			{
				return this._New.Entity;
			}
			set
			{
				New previousValue = this._New.Entity;
				if (((previousValue != value) 
							|| (this._New.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._New.Entity = null;
						previousValue.NewSocialPosts.Remove(this);
					}
					this._New.Entity = value;
					if ((value != null))
					{
						value.NewSocialPosts.Add(this);
						this._NewID = value.ID;
					}
					else
					{
						this._NewID = default(int);
					}
					this.SendPropertyChanged("New");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SocialPost_NewSocialPost", Storage="_SocialPost", ThisKey="SocialPostID", OtherKey="ID", IsForeignKey=true)]
		public SocialPost SocialPost
		{
			get
			{
				return this._SocialPost.Entity;
			}
			set
			{
				SocialPost previousValue = this._SocialPost.Entity;
				if (((previousValue != value) 
							|| (this._SocialPost.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SocialPost.Entity = null;
						previousValue.NewSocialPosts.Remove(this);
					}
					this._SocialPost.Entity = value;
					if ((value != null))
					{
						value.NewSocialPosts.Add(this);
						this._SocialPostID = value.ID;
					}
					else
					{
						this._SocialPostID = default(int);
					}
					this.SendPropertyChanged("SocialPost");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BlogSocialPost")]
	public partial class BlogSocialPost : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _BlogID;
		
		private int _SocialPostID;
		
		private EntityRef<Blog> _Blog;
		
		private EntityRef<SocialPost> _SocialPost;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnBlogIDChanging(int value);
    partial void OnBlogIDChanged();
    partial void OnSocialPostIDChanging(int value);
    partial void OnSocialPostIDChanged();
    #endregion
		
		public BlogSocialPost()
		{
			this._Blog = default(EntityRef<Blog>);
			this._SocialPost = default(EntityRef<SocialPost>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlogID", DbType="Int NOT NULL")]
		public int BlogID
		{
			get
			{
				return this._BlogID;
			}
			set
			{
				if ((this._BlogID != value))
				{
					if (this._Blog.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBlogIDChanging(value);
					this.SendPropertyChanging();
					this._BlogID = value;
					this.SendPropertyChanged("BlogID");
					this.OnBlogIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SocialPostID", DbType="Int NOT NULL")]
		public int SocialPostID
		{
			get
			{
				return this._SocialPostID;
			}
			set
			{
				if ((this._SocialPostID != value))
				{
					if (this._SocialPost.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSocialPostIDChanging(value);
					this.SendPropertyChanging();
					this._SocialPostID = value;
					this.SendPropertyChanged("SocialPostID");
					this.OnSocialPostIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Blog_BlogSocialPost", Storage="_Blog", ThisKey="BlogID", OtherKey="ID", IsForeignKey=true)]
		public Blog Blog
		{
			get
			{
				return this._Blog.Entity;
			}
			set
			{
				Blog previousValue = this._Blog.Entity;
				if (((previousValue != value) 
							|| (this._Blog.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Blog.Entity = null;
						previousValue.BlogSocialPosts.Remove(this);
					}
					this._Blog.Entity = value;
					if ((value != null))
					{
						value.BlogSocialPosts.Add(this);
						this._BlogID = value.ID;
					}
					else
					{
						this._BlogID = default(int);
					}
					this.SendPropertyChanged("Blog");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SocialPost_BlogSocialPost", Storage="_SocialPost", ThisKey="SocialPostID", OtherKey="ID", IsForeignKey=true)]
		public SocialPost SocialPost
		{
			get
			{
				return this._SocialPost.Entity;
			}
			set
			{
				SocialPost previousValue = this._SocialPost.Entity;
				if (((previousValue != value) 
							|| (this._SocialPost.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SocialPost.Entity = null;
						previousValue.BlogSocialPosts.Remove(this);
					}
					this._SocialPost.Entity = value;
					if ((value != null))
					{
						value.BlogSocialPosts.Add(this);
						this._SocialPostID = value.ID;
					}
					else
					{
						this._SocialPostID = default(int);
					}
					this.SendPropertyChanged("SocialPost");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TournamentSocialPost")]
	public partial class TournamentSocialPost : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _TournamentID;
		
		private int _SocialPostID;
		
		private EntityRef<SocialPost> _SocialPost;
		
		private EntityRef<Tournament> _Tournament;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTournamentIDChanging(int value);
    partial void OnTournamentIDChanged();
    partial void OnSocialPostIDChanging(int value);
    partial void OnSocialPostIDChanged();
    #endregion
		
		public TournamentSocialPost()
		{
			this._SocialPost = default(EntityRef<SocialPost>);
			this._Tournament = default(EntityRef<Tournament>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentID", DbType="Int NOT NULL")]
		public int TournamentID
		{
			get
			{
				return this._TournamentID;
			}
			set
			{
				if ((this._TournamentID != value))
				{
					if (this._Tournament.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTournamentIDChanging(value);
					this.SendPropertyChanging();
					this._TournamentID = value;
					this.SendPropertyChanged("TournamentID");
					this.OnTournamentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SocialPostID", DbType="Int NOT NULL")]
		public int SocialPostID
		{
			get
			{
				return this._SocialPostID;
			}
			set
			{
				if ((this._SocialPostID != value))
				{
					if (this._SocialPost.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSocialPostIDChanging(value);
					this.SendPropertyChanging();
					this._SocialPostID = value;
					this.SendPropertyChanged("SocialPostID");
					this.OnSocialPostIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SocialPost_TournamentSocialPost", Storage="_SocialPost", ThisKey="SocialPostID", OtherKey="ID", IsForeignKey=true)]
		public SocialPost SocialPost
		{
			get
			{
				return this._SocialPost.Entity;
			}
			set
			{
				SocialPost previousValue = this._SocialPost.Entity;
				if (((previousValue != value) 
							|| (this._SocialPost.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SocialPost.Entity = null;
						previousValue.TournamentSocialPosts.Remove(this);
					}
					this._SocialPost.Entity = value;
					if ((value != null))
					{
						value.TournamentSocialPosts.Add(this);
						this._SocialPostID = value.ID;
					}
					else
					{
						this._SocialPostID = default(int);
					}
					this.SendPropertyChanged("SocialPost");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tournament_TournamentSocialPost", Storage="_Tournament", ThisKey="TournamentID", OtherKey="ID", IsForeignKey=true)]
		public Tournament Tournament
		{
			get
			{
				return this._Tournament.Entity;
			}
			set
			{
				Tournament previousValue = this._Tournament.Entity;
				if (((previousValue != value) 
							|| (this._Tournament.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tournament.Entity = null;
						previousValue.TournamentSocialPosts.Remove(this);
					}
					this._Tournament.Entity = value;
					if ((value != null))
					{
						value.TournamentSocialPosts.Add(this);
						this._TournamentID = value.ID;
					}
					else
					{
						this._TournamentID = default(int);
					}
					this.SendPropertyChanged("Tournament");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PhotoAlbumSocialPost")]
	public partial class PhotoAlbumSocialPost : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _PhotoAlbumID;
		
		private int _SocialPostID;
		
		private EntityRef<PhotoAlbum> _PhotoAlbum;
		
		private EntityRef<SocialPost> _SocialPost;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPhotoAlbumIDChanging(int value);
    partial void OnPhotoAlbumIDChanged();
    partial void OnSocialPostIDChanging(int value);
    partial void OnSocialPostIDChanged();
    #endregion
		
		public PhotoAlbumSocialPost()
		{
			this._PhotoAlbum = default(EntityRef<PhotoAlbum>);
			this._SocialPost = default(EntityRef<SocialPost>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhotoAlbumID", DbType="Int NOT NULL")]
		public int PhotoAlbumID
		{
			get
			{
				return this._PhotoAlbumID;
			}
			set
			{
				if ((this._PhotoAlbumID != value))
				{
					if (this._PhotoAlbum.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhotoAlbumIDChanging(value);
					this.SendPropertyChanging();
					this._PhotoAlbumID = value;
					this.SendPropertyChanged("PhotoAlbumID");
					this.OnPhotoAlbumIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SocialPostID", DbType="Int NOT NULL")]
		public int SocialPostID
		{
			get
			{
				return this._SocialPostID;
			}
			set
			{
				if ((this._SocialPostID != value))
				{
					if (this._SocialPost.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSocialPostIDChanging(value);
					this.SendPropertyChanging();
					this._SocialPostID = value;
					this.SendPropertyChanged("SocialPostID");
					this.OnSocialPostIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PhotoAlbum_PhotoAlbumSocialPost", Storage="_PhotoAlbum", ThisKey="PhotoAlbumID", OtherKey="ID", IsForeignKey=true)]
		public PhotoAlbum PhotoAlbum
		{
			get
			{
				return this._PhotoAlbum.Entity;
			}
			set
			{
				PhotoAlbum previousValue = this._PhotoAlbum.Entity;
				if (((previousValue != value) 
							|| (this._PhotoAlbum.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PhotoAlbum.Entity = null;
						previousValue.PhotoAlbumSocialPosts.Remove(this);
					}
					this._PhotoAlbum.Entity = value;
					if ((value != null))
					{
						value.PhotoAlbumSocialPosts.Add(this);
						this._PhotoAlbumID = value.ID;
					}
					else
					{
						this._PhotoAlbumID = default(int);
					}
					this.SendPropertyChanged("PhotoAlbum");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SocialPost_PhotoAlbumSocialPost", Storage="_SocialPost", ThisKey="SocialPostID", OtherKey="ID", IsForeignKey=true)]
		public SocialPost SocialPost
		{
			get
			{
				return this._SocialPost.Entity;
			}
			set
			{
				SocialPost previousValue = this._SocialPost.Entity;
				if (((previousValue != value) 
							|| (this._SocialPost.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SocialPost.Entity = null;
						previousValue.PhotoAlbumSocialPosts.Remove(this);
					}
					this._SocialPost.Entity = value;
					if ((value != null))
					{
						value.PhotoAlbumSocialPosts.Add(this);
						this._SocialPostID = value.ID;
					}
					else
					{
						this._SocialPostID = default(int);
					}
					this.SendPropertyChanged("SocialPost");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Social")]
	public partial class Social : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private string _Identified;
		
		private bool _IsAdvansed;
		
		private int _Provider;
		
		private string _UserInfo;
		
		private string _JsonResource;
		
		private bool _TranslateWin;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnIdentifiedChanging(string value);
    partial void OnIdentifiedChanged();
    partial void OnIsAdvansedChanging(bool value);
    partial void OnIsAdvansedChanged();
    partial void OnProviderChanging(int value);
    partial void OnProviderChanged();
    partial void OnUserInfoChanging(string value);
    partial void OnUserInfoChanged();
    partial void OnJsonResourceChanging(string value);
    partial void OnJsonResourceChanged();
    partial void OnTranslateWinChanging(bool value);
    partial void OnTranslateWinChanged();
    #endregion
		
		public Social()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Identified", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Identified
		{
			get
			{
				return this._Identified;
			}
			set
			{
				if ((this._Identified != value))
				{
					this.OnIdentifiedChanging(value);
					this.SendPropertyChanging();
					this._Identified = value;
					this.SendPropertyChanged("Identified");
					this.OnIdentifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAdvansed", DbType="Bit NOT NULL")]
		public bool IsAdvansed
		{
			get
			{
				return this._IsAdvansed;
			}
			set
			{
				if ((this._IsAdvansed != value))
				{
					this.OnIsAdvansedChanging(value);
					this.SendPropertyChanging();
					this._IsAdvansed = value;
					this.SendPropertyChanged("IsAdvansed");
					this.OnIsAdvansedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Provider", DbType="Int NOT NULL")]
		public int Provider
		{
			get
			{
				return this._Provider;
			}
			set
			{
				if ((this._Provider != value))
				{
					this.OnProviderChanging(value);
					this.SendPropertyChanging();
					this._Provider = value;
					this.SendPropertyChanged("Provider");
					this.OnProviderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserInfo", DbType="NVarChar(MAX)")]
		public string UserInfo
		{
			get
			{
				return this._UserInfo;
			}
			set
			{
				if ((this._UserInfo != value))
				{
					this.OnUserInfoChanging(value);
					this.SendPropertyChanging();
					this._UserInfo = value;
					this.SendPropertyChanged("UserInfo");
					this.OnUserInfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JsonResource", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string JsonResource
		{
			get
			{
				return this._JsonResource;
			}
			set
			{
				if ((this._JsonResource != value))
				{
					this.OnJsonResourceChanging(value);
					this.SendPropertyChanging();
					this._JsonResource = value;
					this.SendPropertyChanged("JsonResource");
					this.OnJsonResourceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TranslateWin", DbType="Bit NOT NULL")]
		public bool TranslateWin
		{
			get
			{
				return this._TranslateWin;
			}
			set
			{
				if ((this._TranslateWin != value))
				{
					this.OnTranslateWinChanging(value);
					this.SendPropertyChanging();
					this._TranslateWin = value;
					this.SendPropertyChanged("TranslateWin");
					this.OnTranslateWinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Social", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Socials.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Socials.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SocialPostImage")]
	public partial class SocialPostImage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _SocialPostID;
		
		private string _PhotoUrl;
		
		private EntityRef<SocialPost> _SocialPost;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSocialPostIDChanging(int value);
    partial void OnSocialPostIDChanged();
    partial void OnPhotoUrlChanging(string value);
    partial void OnPhotoUrlChanged();
    #endregion
		
		public SocialPostImage()
		{
			this._SocialPost = default(EntityRef<SocialPost>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SocialPostID", DbType="Int NOT NULL")]
		public int SocialPostID
		{
			get
			{
				return this._SocialPostID;
			}
			set
			{
				if ((this._SocialPostID != value))
				{
					if (this._SocialPost.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSocialPostIDChanging(value);
					this.SendPropertyChanging();
					this._SocialPostID = value;
					this.SendPropertyChanged("SocialPostID");
					this.OnSocialPostIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhotoUrl", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string PhotoUrl
		{
			get
			{
				return this._PhotoUrl;
			}
			set
			{
				if ((this._PhotoUrl != value))
				{
					this.OnPhotoUrlChanging(value);
					this.SendPropertyChanging();
					this._PhotoUrl = value;
					this.SendPropertyChanged("PhotoUrl");
					this.OnPhotoUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SocialPost_SocialPostImage", Storage="_SocialPost", ThisKey="SocialPostID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public SocialPost SocialPost
		{
			get
			{
				return this._SocialPost.Entity;
			}
			set
			{
				SocialPost previousValue = this._SocialPost.Entity;
				if (((previousValue != value) 
							|| (this._SocialPost.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SocialPost.Entity = null;
						previousValue.SocialPostImages.Remove(this);
					}
					this._SocialPost.Entity = value;
					if ((value != null))
					{
						value.SocialPostImages.Add(this);
						this._SocialPostID = value.ID;
					}
					else
					{
						this._SocialPostID = default(int);
					}
					this.SendPropertyChanged("SocialPost");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NoticeAction")]
	public partial class NoticeAction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _NoticeID;
		
		private string _ActionUrl;
		
		private string _Name;
		
		private bool _Direct;
		
		private bool _IsResolveNotice;
		
		private bool _IsRunNotice;
		
		private EntityRef<Notice> _Notice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNoticeIDChanging(int value);
    partial void OnNoticeIDChanged();
    partial void OnActionUrlChanging(string value);
    partial void OnActionUrlChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDirectChanging(bool value);
    partial void OnDirectChanged();
    partial void OnIsResolveNoticeChanging(bool value);
    partial void OnIsResolveNoticeChanged();
    partial void OnIsRunNoticeChanging(bool value);
    partial void OnIsRunNoticeChanged();
    #endregion
		
		public NoticeAction()
		{
			this._Notice = default(EntityRef<Notice>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoticeID", DbType="Int NOT NULL")]
		public int NoticeID
		{
			get
			{
				return this._NoticeID;
			}
			set
			{
				if ((this._NoticeID != value))
				{
					if (this._Notice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNoticeIDChanging(value);
					this.SendPropertyChanging();
					this._NoticeID = value;
					this.SendPropertyChanged("NoticeID");
					this.OnNoticeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionUrl", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string ActionUrl
		{
			get
			{
				return this._ActionUrl;
			}
			set
			{
				if ((this._ActionUrl != value))
				{
					this.OnActionUrlChanging(value);
					this.SendPropertyChanging();
					this._ActionUrl = value;
					this.SendPropertyChanged("ActionUrl");
					this.OnActionUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Direct", DbType="Bit NOT NULL")]
		public bool Direct
		{
			get
			{
				return this._Direct;
			}
			set
			{
				if ((this._Direct != value))
				{
					this.OnDirectChanging(value);
					this.SendPropertyChanging();
					this._Direct = value;
					this.SendPropertyChanged("Direct");
					this.OnDirectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsResolveNotice", DbType="Bit NOT NULL")]
		public bool IsResolveNotice
		{
			get
			{
				return this._IsResolveNotice;
			}
			set
			{
				if ((this._IsResolveNotice != value))
				{
					this.OnIsResolveNoticeChanging(value);
					this.SendPropertyChanging();
					this._IsResolveNotice = value;
					this.SendPropertyChanged("IsResolveNotice");
					this.OnIsResolveNoticeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsRunNotice", DbType="Bit NOT NULL")]
		public bool IsRunNotice
		{
			get
			{
				return this._IsRunNotice;
			}
			set
			{
				if ((this._IsRunNotice != value))
				{
					this.OnIsRunNoticeChanging(value);
					this.SendPropertyChanging();
					this._IsRunNotice = value;
					this.SendPropertyChanged("IsRunNotice");
					this.OnIsRunNoticeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Notice_NoticeAction", Storage="_Notice", ThisKey="NoticeID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Notice Notice
		{
			get
			{
				return this._Notice.Entity;
			}
			set
			{
				Notice previousValue = this._Notice.Entity;
				if (((previousValue != value) 
							|| (this._Notice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Notice.Entity = null;
						previousValue.NoticeActions.Remove(this);
					}
					this._Notice.Entity = value;
					if ((value != null))
					{
						value.NoticeActions.Add(this);
						this._NoticeID = value.ID;
					}
					else
					{
						this._NoticeID = default(int);
					}
					this.SendPropertyChanged("Notice");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Notice")]
	public partial class Notice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _NoticeDistributionID;
		
		private System.Nullable<int> _SenderID;
		
		private int _ReceiverID;
		
		private System.DateTime _AddedDate;
		
		private System.Nullable<System.DateTime> _ReadedDate;
		
		private string _Caption;
		
		private string _Text;
		
		private int _Type;
		
		private System.Nullable<int> _ForumID;
		
		private System.Nullable<int> _MatchID;
		
		private System.Nullable<int> _TournamentID;
		
		private System.Nullable<int> _GameID;
		
		private System.Nullable<int> _GroupID;
		
		private System.Nullable<int> _SubjectID;
		
		private System.Nullable<int> _ChatRoomID;
		
		private bool _IsCloseForRead;
		
		private EntitySet<NoticeAction> _NoticeActions;
		
		private EntityRef<Notice> _Notice2;
		
		private EntityRef<Forum> _Forum;
		
		private EntityRef<Game> _Game;
		
		private EntityRef<Notice> _Notice1;
		
		private EntityRef<NoticeDistribution> _NoticeDistribution;
		
		private EntityRef<Subject> _Subject;
		
		private EntityRef<ChatRoom> _ChatRoom;
		
		private EntityRef<Group> _Group;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
		private EntityRef<Match> _Match;
		
		private EntityRef<Tournament> _Tournament;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNoticeDistributionIDChanging(System.Nullable<int> value);
    partial void OnNoticeDistributionIDChanged();
    partial void OnSenderIDChanging(System.Nullable<int> value);
    partial void OnSenderIDChanged();
    partial void OnReceiverIDChanging(int value);
    partial void OnReceiverIDChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnReadedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnReadedDateChanged();
    partial void OnCaptionChanging(string value);
    partial void OnCaptionChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnForumIDChanging(System.Nullable<int> value);
    partial void OnForumIDChanged();
    partial void OnMatchIDChanging(System.Nullable<int> value);
    partial void OnMatchIDChanged();
    partial void OnTournamentIDChanging(System.Nullable<int> value);
    partial void OnTournamentIDChanged();
    partial void OnGameIDChanging(System.Nullable<int> value);
    partial void OnGameIDChanged();
    partial void OnGroupIDChanging(System.Nullable<int> value);
    partial void OnGroupIDChanged();
    partial void OnSubjectIDChanging(System.Nullable<int> value);
    partial void OnSubjectIDChanged();
    partial void OnChatRoomIDChanging(System.Nullable<int> value);
    partial void OnChatRoomIDChanged();
    partial void OnIsCloseForReadChanging(bool value);
    partial void OnIsCloseForReadChanged();
    #endregion
		
		public Notice()
		{
			this._NoticeActions = new EntitySet<NoticeAction>(new Action<NoticeAction>(this.attach_NoticeActions), new Action<NoticeAction>(this.detach_NoticeActions));
			this._Notice2 = default(EntityRef<Notice>);
			this._Forum = default(EntityRef<Forum>);
			this._Game = default(EntityRef<Game>);
			this._Notice1 = default(EntityRef<Notice>);
			this._NoticeDistribution = default(EntityRef<NoticeDistribution>);
			this._Subject = default(EntityRef<Subject>);
			this._ChatRoom = default(EntityRef<ChatRoom>);
			this._Group = default(EntityRef<Group>);
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			this._Match = default(EntityRef<Match>);
			this._Tournament = default(EntityRef<Tournament>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if (this._Notice1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoticeDistributionID", DbType="Int")]
		public System.Nullable<int> NoticeDistributionID
		{
			get
			{
				return this._NoticeDistributionID;
			}
			set
			{
				if ((this._NoticeDistributionID != value))
				{
					if (this._NoticeDistribution.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNoticeDistributionIDChanging(value);
					this.SendPropertyChanging();
					this._NoticeDistributionID = value;
					this.SendPropertyChanged("NoticeDistributionID");
					this.OnNoticeDistributionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SenderID", DbType="Int")]
		public System.Nullable<int> SenderID
		{
			get
			{
				return this._SenderID;
			}
			set
			{
				if ((this._SenderID != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSenderIDChanging(value);
					this.SendPropertyChanging();
					this._SenderID = value;
					this.SendPropertyChanged("SenderID");
					this.OnSenderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceiverID", DbType="Int NOT NULL")]
		public int ReceiverID
		{
			get
			{
				return this._ReceiverID;
			}
			set
			{
				if ((this._ReceiverID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReceiverIDChanging(value);
					this.SendPropertyChanging();
					this._ReceiverID = value;
					this.SendPropertyChanged("ReceiverID");
					this.OnReceiverIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReadedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ReadedDate
		{
			get
			{
				return this._ReadedDate;
			}
			set
			{
				if ((this._ReadedDate != value))
				{
					this.OnReadedDateChanging(value);
					this.SendPropertyChanging();
					this._ReadedDate = value;
					this.SendPropertyChanged("ReadedDate");
					this.OnReadedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Caption", DbType="NVarChar(500)")]
		public string Caption
		{
			get
			{
				return this._Caption;
			}
			set
			{
				if ((this._Caption != value))
				{
					this.OnCaptionChanging(value);
					this.SendPropertyChanging();
					this._Caption = value;
					this.SendPropertyChanged("Caption");
					this.OnCaptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ForumID", DbType="Int")]
		public System.Nullable<int> ForumID
		{
			get
			{
				return this._ForumID;
			}
			set
			{
				if ((this._ForumID != value))
				{
					if (this._Forum.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnForumIDChanging(value);
					this.SendPropertyChanging();
					this._ForumID = value;
					this.SendPropertyChanged("ForumID");
					this.OnForumIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchID", DbType="Int")]
		public System.Nullable<int> MatchID
		{
			get
			{
				return this._MatchID;
			}
			set
			{
				if ((this._MatchID != value))
				{
					if (this._Match.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatchIDChanging(value);
					this.SendPropertyChanging();
					this._MatchID = value;
					this.SendPropertyChanged("MatchID");
					this.OnMatchIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentID", DbType="Int")]
		public System.Nullable<int> TournamentID
		{
			get
			{
				return this._TournamentID;
			}
			set
			{
				if ((this._TournamentID != value))
				{
					if (this._Tournament.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTournamentIDChanging(value);
					this.SendPropertyChanging();
					this._TournamentID = value;
					this.SendPropertyChanged("TournamentID");
					this.OnTournamentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameID", DbType="Int")]
		public System.Nullable<int> GameID
		{
			get
			{
				return this._GameID;
			}
			set
			{
				if ((this._GameID != value))
				{
					if (this._Game.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameIDChanging(value);
					this.SendPropertyChanging();
					this._GameID = value;
					this.SendPropertyChanged("GameID");
					this.OnGameIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="Int")]
		public System.Nullable<int> GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectID", DbType="Int")]
		public System.Nullable<int> SubjectID
		{
			get
			{
				return this._SubjectID;
			}
			set
			{
				if ((this._SubjectID != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectID = value;
					this.SendPropertyChanged("SubjectID");
					this.OnSubjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChatRoomID", DbType="Int")]
		public System.Nullable<int> ChatRoomID
		{
			get
			{
				return this._ChatRoomID;
			}
			set
			{
				if ((this._ChatRoomID != value))
				{
					if (this._ChatRoom.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChatRoomIDChanging(value);
					this.SendPropertyChanging();
					this._ChatRoomID = value;
					this.SendPropertyChanged("ChatRoomID");
					this.OnChatRoomIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCloseForRead", DbType="Bit NOT NULL")]
		public bool IsCloseForRead
		{
			get
			{
				return this._IsCloseForRead;
			}
			set
			{
				if ((this._IsCloseForRead != value))
				{
					this.OnIsCloseForReadChanging(value);
					this.SendPropertyChanging();
					this._IsCloseForRead = value;
					this.SendPropertyChanged("IsCloseForRead");
					this.OnIsCloseForReadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Notice_NoticeAction", Storage="_NoticeActions", ThisKey="ID", OtherKey="NoticeID")]
		public EntitySet<NoticeAction> NoticeActions
		{
			get
			{
				return this._NoticeActions;
			}
			set
			{
				this._NoticeActions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Notice_Notice", Storage="_Notice2", ThisKey="ID", OtherKey="ID", IsUnique=true, IsForeignKey=false)]
		public Notice Notice2
		{
			get
			{
				return this._Notice2.Entity;
			}
			set
			{
				Notice previousValue = this._Notice2.Entity;
				if (((previousValue != value) 
							|| (this._Notice2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Notice2.Entity = null;
						previousValue.Notice1 = null;
					}
					this._Notice2.Entity = value;
					if ((value != null))
					{
						value.Notice1 = this;
					}
					this.SendPropertyChanged("Notice2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forum_Notice", Storage="_Forum", ThisKey="ForumID", OtherKey="ID", IsForeignKey=true)]
		public Forum Forum
		{
			get
			{
				return this._Forum.Entity;
			}
			set
			{
				Forum previousValue = this._Forum.Entity;
				if (((previousValue != value) 
							|| (this._Forum.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Forum.Entity = null;
						previousValue.Notices.Remove(this);
					}
					this._Forum.Entity = value;
					if ((value != null))
					{
						value.Notices.Add(this);
						this._ForumID = value.ID;
					}
					else
					{
						this._ForumID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Forum");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_Notice", Storage="_Game", ThisKey="GameID", OtherKey="ID", IsForeignKey=true)]
		public Game Game
		{
			get
			{
				return this._Game.Entity;
			}
			set
			{
				Game previousValue = this._Game.Entity;
				if (((previousValue != value) 
							|| (this._Game.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Game.Entity = null;
						previousValue.Notices.Remove(this);
					}
					this._Game.Entity = value;
					if ((value != null))
					{
						value.Notices.Add(this);
						this._GameID = value.ID;
					}
					else
					{
						this._GameID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Game");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Notice_Notice", Storage="_Notice1", ThisKey="ID", OtherKey="ID", IsForeignKey=true)]
		public Notice Notice1
		{
			get
			{
				return this._Notice1.Entity;
			}
			set
			{
				Notice previousValue = this._Notice1.Entity;
				if (((previousValue != value) 
							|| (this._Notice1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Notice1.Entity = null;
						previousValue.Notice2 = null;
					}
					this._Notice1.Entity = value;
					if ((value != null))
					{
						value.Notice2 = this;
						this._ID = value.ID;
					}
					else
					{
						this._ID = default(int);
					}
					this.SendPropertyChanged("Notice1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NoticeDistribution_Notice", Storage="_NoticeDistribution", ThisKey="NoticeDistributionID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public NoticeDistribution NoticeDistribution
		{
			get
			{
				return this._NoticeDistribution.Entity;
			}
			set
			{
				NoticeDistribution previousValue = this._NoticeDistribution.Entity;
				if (((previousValue != value) 
							|| (this._NoticeDistribution.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NoticeDistribution.Entity = null;
						previousValue.Notices.Remove(this);
					}
					this._NoticeDistribution.Entity = value;
					if ((value != null))
					{
						value.Notices.Add(this);
						this._NoticeDistributionID = value.ID;
					}
					else
					{
						this._NoticeDistributionID = default(Nullable<int>);
					}
					this.SendPropertyChanged("NoticeDistribution");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Notice", Storage="_Subject", ThisKey="SubjectID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.Notices.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.Notices.Add(this);
						this._SubjectID = value.ID;
					}
					else
					{
						this._SubjectID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChatRoom_Notice", Storage="_ChatRoom", ThisKey="ChatRoomID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public ChatRoom ChatRoom
		{
			get
			{
				return this._ChatRoom.Entity;
			}
			set
			{
				ChatRoom previousValue = this._ChatRoom.Entity;
				if (((previousValue != value) 
							|| (this._ChatRoom.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChatRoom.Entity = null;
						previousValue.Notices.Remove(this);
					}
					this._ChatRoom.Entity = value;
					if ((value != null))
					{
						value.Notices.Add(this);
						this._ChatRoomID = value.ID;
					}
					else
					{
						this._ChatRoomID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ChatRoom");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_Notice", Storage="_Group", ThisKey="GroupID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.Notices.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.Notices.Add(this);
						this._GroupID = value.ID;
					}
					else
					{
						this._GroupID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Notice", Storage="_User", ThisKey="ReceiverID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Notices.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Notices.Add(this);
						this._ReceiverID = value.ID;
					}
					else
					{
						this._ReceiverID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Notice1", Storage="_User1", ThisKey="SenderID", OtherKey="ID", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.Notices1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.Notices1.Add(this);
						this._SenderID = value.ID;
					}
					else
					{
						this._SenderID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Match_Notice", Storage="_Match", ThisKey="MatchID", OtherKey="ID", IsForeignKey=true)]
		public Match Match
		{
			get
			{
				return this._Match.Entity;
			}
			set
			{
				Match previousValue = this._Match.Entity;
				if (((previousValue != value) 
							|| (this._Match.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Match.Entity = null;
						previousValue.Notices.Remove(this);
					}
					this._Match.Entity = value;
					if ((value != null))
					{
						value.Notices.Add(this);
						this._MatchID = value.ID;
					}
					else
					{
						this._MatchID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Match");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tournament_Notice", Storage="_Tournament", ThisKey="TournamentID", OtherKey="ID", IsForeignKey=true)]
		public Tournament Tournament
		{
			get
			{
				return this._Tournament.Entity;
			}
			set
			{
				Tournament previousValue = this._Tournament.Entity;
				if (((previousValue != value) 
							|| (this._Tournament.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tournament.Entity = null;
						previousValue.Notices.Remove(this);
					}
					this._Tournament.Entity = value;
					if ((value != null))
					{
						value.Notices.Add(this);
						this._TournamentID = value.ID;
					}
					else
					{
						this._TournamentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Tournament");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_NoticeActions(NoticeAction entity)
		{
			this.SendPropertyChanging();
			entity.Notice = this;
		}
		
		private void detach_NoticeActions(NoticeAction entity)
		{
			this.SendPropertyChanging();
			entity.Notice = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SocialGroup")]
	public partial class SocialGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _Provider;
		
		private string _Name;
		
		private string _Number;
		
		private EntitySet<SocialPost> _SocialPosts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnProviderChanging(int value);
    partial void OnProviderChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnNumberChanging(string value);
    partial void OnNumberChanged();
    #endregion
		
		public SocialGroup()
		{
			this._SocialPosts = new EntitySet<SocialPost>(new Action<SocialPost>(this.attach_SocialPosts), new Action<SocialPost>(this.detach_SocialPosts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Provider", DbType="Int NOT NULL")]
		public int Provider
		{
			get
			{
				return this._Provider;
			}
			set
			{
				if ((this._Provider != value))
				{
					this.OnProviderChanging(value);
					this.SendPropertyChanging();
					this._Provider = value;
					this.SendPropertyChanged("Provider");
					this.OnProviderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SocialGroup_SocialPost", Storage="_SocialPosts", ThisKey="ID", OtherKey="SocialGroupID")]
		public EntitySet<SocialPost> SocialPosts
		{
			get
			{
				return this._SocialPosts;
			}
			set
			{
				this._SocialPosts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SocialPosts(SocialPost entity)
		{
			this.SendPropertyChanging();
			entity.SocialGroup = this;
		}
		
		private void detach_SocialPosts(SocialPost entity)
		{
			this.SendPropertyChanging();
			entity.SocialGroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SocialPost")]
	public partial class SocialPost : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private System.Nullable<int> _SocialGroupID;
		
		private int _Provider;
		
		private string _Identifier;
		
		private System.DateTime _AddedDate;
		
		private string _Title;
		
		private string _Preview;
		
		private string _Teaser;
		
		private string _Link;
		
		private string _Responce;
		
		private string _VkPrepared;
		
		private EntitySet<NewSocialPost> _NewSocialPosts;
		
		private EntitySet<BlogSocialPost> _BlogSocialPosts;
		
		private EntitySet<TournamentSocialPost> _TournamentSocialPosts;
		
		private EntitySet<PhotoAlbumSocialPost> _PhotoAlbumSocialPosts;
		
		private EntitySet<SocialPostImage> _SocialPostImages;
		
		private EntitySet<VideoSocialPost> _VideoSocialPosts;
		
		private EntityRef<SocialGroup> _SocialGroup;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnSocialGroupIDChanging(System.Nullable<int> value);
    partial void OnSocialGroupIDChanged();
    partial void OnProviderChanging(int value);
    partial void OnProviderChanged();
    partial void OnIdentifierChanging(string value);
    partial void OnIdentifierChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnPreviewChanging(string value);
    partial void OnPreviewChanged();
    partial void OnTeaserChanging(string value);
    partial void OnTeaserChanged();
    partial void OnLinkChanging(string value);
    partial void OnLinkChanged();
    partial void OnResponceChanging(string value);
    partial void OnResponceChanged();
    partial void OnVkPreparedChanging(string value);
    partial void OnVkPreparedChanged();
    #endregion
		
		public SocialPost()
		{
			this._NewSocialPosts = new EntitySet<NewSocialPost>(new Action<NewSocialPost>(this.attach_NewSocialPosts), new Action<NewSocialPost>(this.detach_NewSocialPosts));
			this._BlogSocialPosts = new EntitySet<BlogSocialPost>(new Action<BlogSocialPost>(this.attach_BlogSocialPosts), new Action<BlogSocialPost>(this.detach_BlogSocialPosts));
			this._TournamentSocialPosts = new EntitySet<TournamentSocialPost>(new Action<TournamentSocialPost>(this.attach_TournamentSocialPosts), new Action<TournamentSocialPost>(this.detach_TournamentSocialPosts));
			this._PhotoAlbumSocialPosts = new EntitySet<PhotoAlbumSocialPost>(new Action<PhotoAlbumSocialPost>(this.attach_PhotoAlbumSocialPosts), new Action<PhotoAlbumSocialPost>(this.detach_PhotoAlbumSocialPosts));
			this._SocialPostImages = new EntitySet<SocialPostImage>(new Action<SocialPostImage>(this.attach_SocialPostImages), new Action<SocialPostImage>(this.detach_SocialPostImages));
			this._VideoSocialPosts = new EntitySet<VideoSocialPost>(new Action<VideoSocialPost>(this.attach_VideoSocialPosts), new Action<VideoSocialPost>(this.detach_VideoSocialPosts));
			this._SocialGroup = default(EntityRef<SocialGroup>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SocialGroupID", DbType="Int")]
		public System.Nullable<int> SocialGroupID
		{
			get
			{
				return this._SocialGroupID;
			}
			set
			{
				if ((this._SocialGroupID != value))
				{
					if (this._SocialGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSocialGroupIDChanging(value);
					this.SendPropertyChanging();
					this._SocialGroupID = value;
					this.SendPropertyChanged("SocialGroupID");
					this.OnSocialGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Provider", DbType="Int NOT NULL")]
		public int Provider
		{
			get
			{
				return this._Provider;
			}
			set
			{
				if ((this._Provider != value))
				{
					this.OnProviderChanging(value);
					this.SendPropertyChanging();
					this._Provider = value;
					this.SendPropertyChanged("Provider");
					this.OnProviderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Identifier", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Identifier
		{
			get
			{
				return this._Identifier;
			}
			set
			{
				if ((this._Identifier != value))
				{
					this.OnIdentifierChanging(value);
					this.SendPropertyChanging();
					this._Identifier = value;
					this.SendPropertyChanged("Identifier");
					this.OnIdentifierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(500)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Preview", DbType="NVarChar(500)")]
		public string Preview
		{
			get
			{
				return this._Preview;
			}
			set
			{
				if ((this._Preview != value))
				{
					this.OnPreviewChanging(value);
					this.SendPropertyChanging();
					this._Preview = value;
					this.SendPropertyChanged("Preview");
					this.OnPreviewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Teaser", DbType="NVarChar(MAX)")]
		public string Teaser
		{
			get
			{
				return this._Teaser;
			}
			set
			{
				if ((this._Teaser != value))
				{
					this.OnTeaserChanging(value);
					this.SendPropertyChanging();
					this._Teaser = value;
					this.SendPropertyChanged("Teaser");
					this.OnTeaserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Link", DbType="NVarChar(500)")]
		public string Link
		{
			get
			{
				return this._Link;
			}
			set
			{
				if ((this._Link != value))
				{
					this.OnLinkChanging(value);
					this.SendPropertyChanging();
					this._Link = value;
					this.SendPropertyChanged("Link");
					this.OnLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Responce", DbType="NVarChar(MAX)")]
		public string Responce
		{
			get
			{
				return this._Responce;
			}
			set
			{
				if ((this._Responce != value))
				{
					this.OnResponceChanging(value);
					this.SendPropertyChanging();
					this._Responce = value;
					this.SendPropertyChanged("Responce");
					this.OnResponceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VkPrepared", DbType="NVarChar(MAX)")]
		public string VkPrepared
		{
			get
			{
				return this._VkPrepared;
			}
			set
			{
				if ((this._VkPrepared != value))
				{
					this.OnVkPreparedChanging(value);
					this.SendPropertyChanging();
					this._VkPrepared = value;
					this.SendPropertyChanged("VkPrepared");
					this.OnVkPreparedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SocialPost_NewSocialPost", Storage="_NewSocialPosts", ThisKey="ID", OtherKey="SocialPostID")]
		public EntitySet<NewSocialPost> NewSocialPosts
		{
			get
			{
				return this._NewSocialPosts;
			}
			set
			{
				this._NewSocialPosts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SocialPost_BlogSocialPost", Storage="_BlogSocialPosts", ThisKey="ID", OtherKey="SocialPostID")]
		public EntitySet<BlogSocialPost> BlogSocialPosts
		{
			get
			{
				return this._BlogSocialPosts;
			}
			set
			{
				this._BlogSocialPosts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SocialPost_TournamentSocialPost", Storage="_TournamentSocialPosts", ThisKey="ID", OtherKey="SocialPostID")]
		public EntitySet<TournamentSocialPost> TournamentSocialPosts
		{
			get
			{
				return this._TournamentSocialPosts;
			}
			set
			{
				this._TournamentSocialPosts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SocialPost_PhotoAlbumSocialPost", Storage="_PhotoAlbumSocialPosts", ThisKey="ID", OtherKey="SocialPostID")]
		public EntitySet<PhotoAlbumSocialPost> PhotoAlbumSocialPosts
		{
			get
			{
				return this._PhotoAlbumSocialPosts;
			}
			set
			{
				this._PhotoAlbumSocialPosts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SocialPost_SocialPostImage", Storage="_SocialPostImages", ThisKey="ID", OtherKey="SocialPostID")]
		public EntitySet<SocialPostImage> SocialPostImages
		{
			get
			{
				return this._SocialPostImages;
			}
			set
			{
				this._SocialPostImages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SocialPost_VideoSocialPost", Storage="_VideoSocialPosts", ThisKey="ID", OtherKey="SocialPostID")]
		public EntitySet<VideoSocialPost> VideoSocialPosts
		{
			get
			{
				return this._VideoSocialPosts;
			}
			set
			{
				this._VideoSocialPosts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SocialGroup_SocialPost", Storage="_SocialGroup", ThisKey="SocialGroupID", OtherKey="ID", IsForeignKey=true)]
		public SocialGroup SocialGroup
		{
			get
			{
				return this._SocialGroup.Entity;
			}
			set
			{
				SocialGroup previousValue = this._SocialGroup.Entity;
				if (((previousValue != value) 
							|| (this._SocialGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SocialGroup.Entity = null;
						previousValue.SocialPosts.Remove(this);
					}
					this._SocialGroup.Entity = value;
					if ((value != null))
					{
						value.SocialPosts.Add(this);
						this._SocialGroupID = value.ID;
					}
					else
					{
						this._SocialGroupID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SocialGroup");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_SocialPost", Storage="_User", ThisKey="ID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.SocialPost = null;
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.SocialPost = this;
						this._ID = value.ID;
					}
					else
					{
						this._ID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_NewSocialPosts(NewSocialPost entity)
		{
			this.SendPropertyChanging();
			entity.SocialPost = this;
		}
		
		private void detach_NewSocialPosts(NewSocialPost entity)
		{
			this.SendPropertyChanging();
			entity.SocialPost = null;
		}
		
		private void attach_BlogSocialPosts(BlogSocialPost entity)
		{
			this.SendPropertyChanging();
			entity.SocialPost = this;
		}
		
		private void detach_BlogSocialPosts(BlogSocialPost entity)
		{
			this.SendPropertyChanging();
			entity.SocialPost = null;
		}
		
		private void attach_TournamentSocialPosts(TournamentSocialPost entity)
		{
			this.SendPropertyChanging();
			entity.SocialPost = this;
		}
		
		private void detach_TournamentSocialPosts(TournamentSocialPost entity)
		{
			this.SendPropertyChanging();
			entity.SocialPost = null;
		}
		
		private void attach_PhotoAlbumSocialPosts(PhotoAlbumSocialPost entity)
		{
			this.SendPropertyChanging();
			entity.SocialPost = this;
		}
		
		private void detach_PhotoAlbumSocialPosts(PhotoAlbumSocialPost entity)
		{
			this.SendPropertyChanging();
			entity.SocialPost = null;
		}
		
		private void attach_SocialPostImages(SocialPostImage entity)
		{
			this.SendPropertyChanging();
			entity.SocialPost = this;
		}
		
		private void detach_SocialPostImages(SocialPostImage entity)
		{
			this.SendPropertyChanging();
			entity.SocialPost = null;
		}
		
		private void attach_VideoSocialPosts(VideoSocialPost entity)
		{
			this.SendPropertyChanging();
			entity.SocialPost = this;
		}
		
		private void detach_VideoSocialPosts(VideoSocialPost entity)
		{
			this.SendPropertyChanging();
			entity.SocialPost = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VideoSocialPost")]
	public partial class VideoSocialPost : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _VideoID;
		
		private int _SocialPostID;
		
		private EntityRef<SocialPost> _SocialPost;
		
		private EntityRef<Video> _Video;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnVideoIDChanging(int value);
    partial void OnVideoIDChanged();
    partial void OnSocialPostIDChanging(int value);
    partial void OnSocialPostIDChanged();
    #endregion
		
		public VideoSocialPost()
		{
			this._SocialPost = default(EntityRef<SocialPost>);
			this._Video = default(EntityRef<Video>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VideoID", DbType="Int NOT NULL")]
		public int VideoID
		{
			get
			{
				return this._VideoID;
			}
			set
			{
				if ((this._VideoID != value))
				{
					if (this._Video.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVideoIDChanging(value);
					this.SendPropertyChanging();
					this._VideoID = value;
					this.SendPropertyChanged("VideoID");
					this.OnVideoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SocialPostID", DbType="Int NOT NULL")]
		public int SocialPostID
		{
			get
			{
				return this._SocialPostID;
			}
			set
			{
				if ((this._SocialPostID != value))
				{
					if (this._SocialPost.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSocialPostIDChanging(value);
					this.SendPropertyChanging();
					this._SocialPostID = value;
					this.SendPropertyChanged("SocialPostID");
					this.OnSocialPostIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SocialPost_VideoSocialPost", Storage="_SocialPost", ThisKey="SocialPostID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public SocialPost SocialPost
		{
			get
			{
				return this._SocialPost.Entity;
			}
			set
			{
				SocialPost previousValue = this._SocialPost.Entity;
				if (((previousValue != value) 
							|| (this._SocialPost.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SocialPost.Entity = null;
						previousValue.VideoSocialPosts.Remove(this);
					}
					this._SocialPost.Entity = value;
					if ((value != null))
					{
						value.VideoSocialPosts.Add(this);
						this._SocialPostID = value.ID;
					}
					else
					{
						this._SocialPostID = default(int);
					}
					this.SendPropertyChanged("SocialPost");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Video_VideoSocialPost", Storage="_Video", ThisKey="VideoID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Video Video
		{
			get
			{
				return this._Video.Entity;
			}
			set
			{
				Video previousValue = this._Video.Entity;
				if (((previousValue != value) 
							|| (this._Video.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Video.Entity = null;
						previousValue.VideoSocialPosts.Remove(this);
					}
					this._Video.Entity = value;
					if ((value != null))
					{
						value.VideoSocialPosts.Add(this);
						this._VideoID = value.ID;
					}
					else
					{
						this._VideoID = default(int);
					}
					this.SendPropertyChanged("Video");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ChatRoom")]
	public partial class ChatRoom : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _TournamentID;
		
		private string _Name;
		
		private System.DateTime _LastUpdate;
		
		private System.Nullable<int> _LastIdUpdate;
		
		private bool _TranslateInForum;
		
		private EntitySet<ChatMessage> _ChatMessages;
		
		private EntitySet<ChatBannedUser> _ChatBannedUsers;
		
		private EntitySet<ChatRoomLog> _ChatRoomLogs;
		
		private EntitySet<Notice> _Notices;
		
		private EntitySet<ForumMessage> _ForumMessages;
		
		private EntityRef<Tournament> _Tournament;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTournamentIDChanging(System.Nullable<int> value);
    partial void OnTournamentIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLastUpdateChanging(System.DateTime value);
    partial void OnLastUpdateChanged();
    partial void OnLastIdUpdateChanging(System.Nullable<int> value);
    partial void OnLastIdUpdateChanged();
    partial void OnTranslateInForumChanging(bool value);
    partial void OnTranslateInForumChanged();
    #endregion
		
		public ChatRoom()
		{
			this._ChatMessages = new EntitySet<ChatMessage>(new Action<ChatMessage>(this.attach_ChatMessages), new Action<ChatMessage>(this.detach_ChatMessages));
			this._ChatBannedUsers = new EntitySet<ChatBannedUser>(new Action<ChatBannedUser>(this.attach_ChatBannedUsers), new Action<ChatBannedUser>(this.detach_ChatBannedUsers));
			this._ChatRoomLogs = new EntitySet<ChatRoomLog>(new Action<ChatRoomLog>(this.attach_ChatRoomLogs), new Action<ChatRoomLog>(this.detach_ChatRoomLogs));
			this._Notices = new EntitySet<Notice>(new Action<Notice>(this.attach_Notices), new Action<Notice>(this.detach_Notices));
			this._ForumMessages = new EntitySet<ForumMessage>(new Action<ForumMessage>(this.attach_ForumMessages), new Action<ForumMessage>(this.detach_ForumMessages));
			this._Tournament = default(EntityRef<Tournament>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentID", DbType="Int")]
		public System.Nullable<int> TournamentID
		{
			get
			{
				return this._TournamentID;
			}
			set
			{
				if ((this._TournamentID != value))
				{
					if (this._Tournament.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTournamentIDChanging(value);
					this.SendPropertyChanging();
					this._TournamentID = value;
					this.SendPropertyChanged("TournamentID");
					this.OnTournamentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdate", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastIdUpdate", DbType="Int")]
		public System.Nullable<int> LastIdUpdate
		{
			get
			{
				return this._LastIdUpdate;
			}
			set
			{
				if ((this._LastIdUpdate != value))
				{
					this.OnLastIdUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastIdUpdate = value;
					this.SendPropertyChanged("LastIdUpdate");
					this.OnLastIdUpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TranslateInForum", DbType="Bit NOT NULL")]
		public bool TranslateInForum
		{
			get
			{
				return this._TranslateInForum;
			}
			set
			{
				if ((this._TranslateInForum != value))
				{
					this.OnTranslateInForumChanging(value);
					this.SendPropertyChanging();
					this._TranslateInForum = value;
					this.SendPropertyChanged("TranslateInForum");
					this.OnTranslateInForumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChatRoom_ChatMessage", Storage="_ChatMessages", ThisKey="ID", OtherKey="ChatRoomID")]
		public EntitySet<ChatMessage> ChatMessages
		{
			get
			{
				return this._ChatMessages;
			}
			set
			{
				this._ChatMessages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChatRoom_ChatBannedUser", Storage="_ChatBannedUsers", ThisKey="ID", OtherKey="ChatRoomID")]
		public EntitySet<ChatBannedUser> ChatBannedUsers
		{
			get
			{
				return this._ChatBannedUsers;
			}
			set
			{
				this._ChatBannedUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChatRoom_ChatRoomLog", Storage="_ChatRoomLogs", ThisKey="ID", OtherKey="ChatRoomID")]
		public EntitySet<ChatRoomLog> ChatRoomLogs
		{
			get
			{
				return this._ChatRoomLogs;
			}
			set
			{
				this._ChatRoomLogs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChatRoom_Notice", Storage="_Notices", ThisKey="ID", OtherKey="ChatRoomID")]
		public EntitySet<Notice> Notices
		{
			get
			{
				return this._Notices;
			}
			set
			{
				this._Notices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChatRoom_ForumMessage", Storage="_ForumMessages", ThisKey="ID", OtherKey="ChatRoomID")]
		public EntitySet<ForumMessage> ForumMessages
		{
			get
			{
				return this._ForumMessages;
			}
			set
			{
				this._ForumMessages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tournament_ChatRoom", Storage="_Tournament", ThisKey="TournamentID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Tournament Tournament
		{
			get
			{
				return this._Tournament.Entity;
			}
			set
			{
				Tournament previousValue = this._Tournament.Entity;
				if (((previousValue != value) 
							|| (this._Tournament.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tournament.Entity = null;
						previousValue.ChatRooms.Remove(this);
					}
					this._Tournament.Entity = value;
					if ((value != null))
					{
						value.ChatRooms.Add(this);
						this._TournamentID = value.ID;
					}
					else
					{
						this._TournamentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Tournament");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ChatMessages(ChatMessage entity)
		{
			this.SendPropertyChanging();
			entity.ChatRoom = this;
		}
		
		private void detach_ChatMessages(ChatMessage entity)
		{
			this.SendPropertyChanging();
			entity.ChatRoom = null;
		}
		
		private void attach_ChatBannedUsers(ChatBannedUser entity)
		{
			this.SendPropertyChanging();
			entity.ChatRoom = this;
		}
		
		private void detach_ChatBannedUsers(ChatBannedUser entity)
		{
			this.SendPropertyChanging();
			entity.ChatRoom = null;
		}
		
		private void attach_ChatRoomLogs(ChatRoomLog entity)
		{
			this.SendPropertyChanging();
			entity.ChatRoom = this;
		}
		
		private void detach_ChatRoomLogs(ChatRoomLog entity)
		{
			this.SendPropertyChanging();
			entity.ChatRoom = null;
		}
		
		private void attach_Notices(Notice entity)
		{
			this.SendPropertyChanging();
			entity.ChatRoom = this;
		}
		
		private void detach_Notices(Notice entity)
		{
			this.SendPropertyChanging();
			entity.ChatRoom = null;
		}
		
		private void attach_ForumMessages(ForumMessage entity)
		{
			this.SendPropertyChanging();
			entity.ChatRoom = this;
		}
		
		private void detach_ForumMessages(ForumMessage entity)
		{
			this.SendPropertyChanging();
			entity.ChatRoom = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ForumMessage")]
	public partial class ForumMessage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private System.Nullable<int> _ParentID;
		
		private string _Message;
		
		private System.DateTime _AddedDate;
		
		private bool _IsDeleted;
		
		private System.Nullable<int> _ForumID;
		
		private System.Nullable<int> _ModeratedByID;
		
		private System.Nullable<System.DateTime> _ModeratedDate;
		
		private System.Nullable<int> _ChatRoomID;
		
		private EntitySet<ForumMessage> _ForumMessages;
		
		private EntityRef<ChatRoom> _ChatRoom;
		
		private EntityRef<Forum> _Forum;
		
		private EntityRef<ForumMessage> _ForumMessage1;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnParentIDChanging(System.Nullable<int> value);
    partial void OnParentIDChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnForumIDChanging(System.Nullable<int> value);
    partial void OnForumIDChanged();
    partial void OnModeratedByIDChanging(System.Nullable<int> value);
    partial void OnModeratedByIDChanged();
    partial void OnModeratedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModeratedDateChanged();
    partial void OnChatRoomIDChanging(System.Nullable<int> value);
    partial void OnChatRoomIDChanged();
    #endregion
		
		public ForumMessage()
		{
			this._ForumMessages = new EntitySet<ForumMessage>(new Action<ForumMessage>(this.attach_ForumMessages), new Action<ForumMessage>(this.detach_ForumMessages));
			this._ChatRoom = default(EntityRef<ChatRoom>);
			this._Forum = default(EntityRef<Forum>);
			this._ForumMessage1 = default(EntityRef<ForumMessage>);
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentID", DbType="Int")]
		public System.Nullable<int> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					if (this._ForumMessage1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Message", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ForumID", DbType="Int")]
		public System.Nullable<int> ForumID
		{
			get
			{
				return this._ForumID;
			}
			set
			{
				if ((this._ForumID != value))
				{
					if (this._Forum.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnForumIDChanging(value);
					this.SendPropertyChanging();
					this._ForumID = value;
					this.SendPropertyChanged("ForumID");
					this.OnForumIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModeratedByID", DbType="Int")]
		public System.Nullable<int> ModeratedByID
		{
			get
			{
				return this._ModeratedByID;
			}
			set
			{
				if ((this._ModeratedByID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModeratedByIDChanging(value);
					this.SendPropertyChanging();
					this._ModeratedByID = value;
					this.SendPropertyChanged("ModeratedByID");
					this.OnModeratedByIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModeratedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModeratedDate
		{
			get
			{
				return this._ModeratedDate;
			}
			set
			{
				if ((this._ModeratedDate != value))
				{
					this.OnModeratedDateChanging(value);
					this.SendPropertyChanging();
					this._ModeratedDate = value;
					this.SendPropertyChanged("ModeratedDate");
					this.OnModeratedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChatRoomID", DbType="Int")]
		public System.Nullable<int> ChatRoomID
		{
			get
			{
				return this._ChatRoomID;
			}
			set
			{
				if ((this._ChatRoomID != value))
				{
					if (this._ChatRoom.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChatRoomIDChanging(value);
					this.SendPropertyChanging();
					this._ChatRoomID = value;
					this.SendPropertyChanged("ChatRoomID");
					this.OnChatRoomIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ForumMessage_ForumMessage", Storage="_ForumMessages", ThisKey="ID", OtherKey="ParentID")]
		public EntitySet<ForumMessage> ForumMessages
		{
			get
			{
				return this._ForumMessages;
			}
			set
			{
				this._ForumMessages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChatRoom_ForumMessage", Storage="_ChatRoom", ThisKey="ChatRoomID", OtherKey="ID", IsForeignKey=true)]
		public ChatRoom ChatRoom
		{
			get
			{
				return this._ChatRoom.Entity;
			}
			set
			{
				ChatRoom previousValue = this._ChatRoom.Entity;
				if (((previousValue != value) 
							|| (this._ChatRoom.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChatRoom.Entity = null;
						previousValue.ForumMessages.Remove(this);
					}
					this._ChatRoom.Entity = value;
					if ((value != null))
					{
						value.ForumMessages.Add(this);
						this._ChatRoomID = value.ID;
					}
					else
					{
						this._ChatRoomID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ChatRoom");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forum_ForumMessage", Storage="_Forum", ThisKey="ForumID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Forum Forum
		{
			get
			{
				return this._Forum.Entity;
			}
			set
			{
				Forum previousValue = this._Forum.Entity;
				if (((previousValue != value) 
							|| (this._Forum.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Forum.Entity = null;
						previousValue.ForumMessages.Remove(this);
					}
					this._Forum.Entity = value;
					if ((value != null))
					{
						value.ForumMessages.Add(this);
						this._ForumID = value.ID;
					}
					else
					{
						this._ForumID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Forum");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ForumMessage_ForumMessage", Storage="_ForumMessage1", ThisKey="ParentID", OtherKey="ID", IsForeignKey=true)]
		public ForumMessage ForumMessage1
		{
			get
			{
				return this._ForumMessage1.Entity;
			}
			set
			{
				ForumMessage previousValue = this._ForumMessage1.Entity;
				if (((previousValue != value) 
							|| (this._ForumMessage1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ForumMessage1.Entity = null;
						previousValue.ForumMessages.Remove(this);
					}
					this._ForumMessage1.Entity = value;
					if ((value != null))
					{
						value.ForumMessages.Add(this);
						this._ParentID = value.ID;
					}
					else
					{
						this._ParentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ForumMessage1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ForumMessage", Storage="_User", ThisKey="ModeratedByID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.ForumMessages.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.ForumMessages.Add(this);
						this._ModeratedByID = value.ID;
					}
					else
					{
						this._ModeratedByID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ForumMessage1", Storage="_User1", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.ForumMessages1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.ForumMessages1.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ForumMessages(ForumMessage entity)
		{
			this.SendPropertyChanging();
			entity.ForumMessage1 = this;
		}
		
		private void detach_ForumMessages(ForumMessage entity)
		{
			this.SendPropertyChanging();
			entity.ForumMessage1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MainCamera")]
	public partial class MainCamera : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _CameraID;
		
		private string _Code;
		
		private bool _Enabled;
		
		private EntityRef<Camera> _Camera;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCameraIDChanging(System.Nullable<int> value);
    partial void OnCameraIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnEnabledChanging(bool value);
    partial void OnEnabledChanged();
    #endregion
		
		public MainCamera()
		{
			this._Camera = default(EntityRef<Camera>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CameraID", DbType="Int")]
		public System.Nullable<int> CameraID
		{
			get
			{
				return this._CameraID;
			}
			set
			{
				if ((this._CameraID != value))
				{
					if (this._Camera.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCameraIDChanging(value);
					this.SendPropertyChanging();
					this._CameraID = value;
					this.SendPropertyChanged("CameraID");
					this.OnCameraIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(MAX)")]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Enabled", DbType="Bit NOT NULL")]
		public bool Enabled
		{
			get
			{
				return this._Enabled;
			}
			set
			{
				if ((this._Enabled != value))
				{
					this.OnEnabledChanging(value);
					this.SendPropertyChanging();
					this._Enabled = value;
					this.SendPropertyChanged("Enabled");
					this.OnEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Camera_MainCamera", Storage="_Camera", ThisKey="CameraID", OtherKey="ID", IsForeignKey=true)]
		public Camera Camera
		{
			get
			{
				return this._Camera.Entity;
			}
			set
			{
				Camera previousValue = this._Camera.Entity;
				if (((previousValue != value) 
							|| (this._Camera.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Camera.Entity = null;
						previousValue.MainCameras.Remove(this);
					}
					this._Camera.Entity = value;
					if ((value != null))
					{
						value.MainCameras.Add(this);
						this._CameraID = value.ID;
					}
					else
					{
						this._CameraID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Camera");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Group]")]
	public partial class Group : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Url;
		
		private int _UserID;
		
		private int _GameID;
		
		private string _Description;
		
		private System.DateTime _AddedDate;
		
		private int _State;
		
		private string _LogoPath173;
		
		private string _LogoPath96;
		
		private string _LogoPath84;
		
		private string _LogoPath57;
		
		private string _LogoPath30;
		
		private string _LogoPath26;
		
		private string _LogoPath18;
		
		private int _VisitCount;
		
		private int _TotalRating;
		
		private int _Level;
		
		private double _MoneyGold;
		
		private double _MoneyWood;
		
		private double _MoneyCrystal;
		
		private EntitySet<UserRoleGroup> _UserRoleGroups;
		
		private EntitySet<GroupRating> _GroupRatings;
		
		private EntitySet<UserGroup> _UserGroups;
		
		private EntitySet<Message> _Messages;
		
		private EntitySet<UserGroupHistory> _UserGroupHistories;
		
		private EntitySet<UserVideo> _UserVideos;
		
		private EntitySet<PhotoAlbum> _PhotoAlbums;
		
		private EntitySet<Blog> _Blogs;
		
		private EntitySet<Notice> _Notices;
		
		private EntitySet<Award> _Awards;
		
		private EntitySet<MoneyDetail> _MoneyDetails;
		
		private EntityRef<Game> _Game;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnGameIDChanging(int value);
    partial void OnGameIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnStateChanging(int value);
    partial void OnStateChanged();
    partial void OnLogoPath173Changing(string value);
    partial void OnLogoPath173Changed();
    partial void OnLogoPath96Changing(string value);
    partial void OnLogoPath96Changed();
    partial void OnLogoPath84Changing(string value);
    partial void OnLogoPath84Changed();
    partial void OnLogoPath57Changing(string value);
    partial void OnLogoPath57Changed();
    partial void OnLogoPath30Changing(string value);
    partial void OnLogoPath30Changed();
    partial void OnLogoPath26Changing(string value);
    partial void OnLogoPath26Changed();
    partial void OnLogoPath18Changing(string value);
    partial void OnLogoPath18Changed();
    partial void OnVisitCountChanging(int value);
    partial void OnVisitCountChanged();
    partial void OnTotalRatingChanging(int value);
    partial void OnTotalRatingChanged();
    partial void OnLevelChanging(int value);
    partial void OnLevelChanged();
    partial void OnMoneyGoldChanging(double value);
    partial void OnMoneyGoldChanged();
    partial void OnMoneyWoodChanging(double value);
    partial void OnMoneyWoodChanged();
    partial void OnMoneyCrystalChanging(double value);
    partial void OnMoneyCrystalChanged();
    #endregion
		
		public Group()
		{
			this._UserRoleGroups = new EntitySet<UserRoleGroup>(new Action<UserRoleGroup>(this.attach_UserRoleGroups), new Action<UserRoleGroup>(this.detach_UserRoleGroups));
			this._GroupRatings = new EntitySet<GroupRating>(new Action<GroupRating>(this.attach_GroupRatings), new Action<GroupRating>(this.detach_GroupRatings));
			this._UserGroups = new EntitySet<UserGroup>(new Action<UserGroup>(this.attach_UserGroups), new Action<UserGroup>(this.detach_UserGroups));
			this._Messages = new EntitySet<Message>(new Action<Message>(this.attach_Messages), new Action<Message>(this.detach_Messages));
			this._UserGroupHistories = new EntitySet<UserGroupHistory>(new Action<UserGroupHistory>(this.attach_UserGroupHistories), new Action<UserGroupHistory>(this.detach_UserGroupHistories));
			this._UserVideos = new EntitySet<UserVideo>(new Action<UserVideo>(this.attach_UserVideos), new Action<UserVideo>(this.detach_UserVideos));
			this._PhotoAlbums = new EntitySet<PhotoAlbum>(new Action<PhotoAlbum>(this.attach_PhotoAlbums), new Action<PhotoAlbum>(this.detach_PhotoAlbums));
			this._Blogs = new EntitySet<Blog>(new Action<Blog>(this.attach_Blogs), new Action<Blog>(this.detach_Blogs));
			this._Notices = new EntitySet<Notice>(new Action<Notice>(this.attach_Notices), new Action<Notice>(this.detach_Notices));
			this._Awards = new EntitySet<Award>(new Action<Award>(this.attach_Awards), new Action<Award>(this.detach_Awards));
			this._MoneyDetails = new EntitySet<MoneyDetail>(new Action<MoneyDetail>(this.attach_MoneyDetails), new Action<MoneyDetail>(this.detach_MoneyDetails));
			this._Game = default(EntityRef<Game>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameID", DbType="Int NOT NULL")]
		public int GameID
		{
			get
			{
				return this._GameID;
			}
			set
			{
				if ((this._GameID != value))
				{
					if (this._Game.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameIDChanging(value);
					this.SendPropertyChanging();
					this._GameID = value;
					this.SendPropertyChanged("GameID");
					this.OnGameIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="Int NOT NULL")]
		public int State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogoPath173", DbType="NVarChar(150)")]
		public string LogoPath173
		{
			get
			{
				return this._LogoPath173;
			}
			set
			{
				if ((this._LogoPath173 != value))
				{
					this.OnLogoPath173Changing(value);
					this.SendPropertyChanging();
					this._LogoPath173 = value;
					this.SendPropertyChanged("LogoPath173");
					this.OnLogoPath173Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogoPath96", DbType="NVarChar(150)")]
		public string LogoPath96
		{
			get
			{
				return this._LogoPath96;
			}
			set
			{
				if ((this._LogoPath96 != value))
				{
					this.OnLogoPath96Changing(value);
					this.SendPropertyChanging();
					this._LogoPath96 = value;
					this.SendPropertyChanged("LogoPath96");
					this.OnLogoPath96Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogoPath84", DbType="NVarChar(150)")]
		public string LogoPath84
		{
			get
			{
				return this._LogoPath84;
			}
			set
			{
				if ((this._LogoPath84 != value))
				{
					this.OnLogoPath84Changing(value);
					this.SendPropertyChanging();
					this._LogoPath84 = value;
					this.SendPropertyChanged("LogoPath84");
					this.OnLogoPath84Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogoPath57", DbType="NVarChar(150)")]
		public string LogoPath57
		{
			get
			{
				return this._LogoPath57;
			}
			set
			{
				if ((this._LogoPath57 != value))
				{
					this.OnLogoPath57Changing(value);
					this.SendPropertyChanging();
					this._LogoPath57 = value;
					this.SendPropertyChanged("LogoPath57");
					this.OnLogoPath57Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogoPath30", DbType="NVarChar(150)")]
		public string LogoPath30
		{
			get
			{
				return this._LogoPath30;
			}
			set
			{
				if ((this._LogoPath30 != value))
				{
					this.OnLogoPath30Changing(value);
					this.SendPropertyChanging();
					this._LogoPath30 = value;
					this.SendPropertyChanged("LogoPath30");
					this.OnLogoPath30Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogoPath26", DbType="NVarChar(150)")]
		public string LogoPath26
		{
			get
			{
				return this._LogoPath26;
			}
			set
			{
				if ((this._LogoPath26 != value))
				{
					this.OnLogoPath26Changing(value);
					this.SendPropertyChanging();
					this._LogoPath26 = value;
					this.SendPropertyChanged("LogoPath26");
					this.OnLogoPath26Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogoPath18", DbType="NVarChar(150)")]
		public string LogoPath18
		{
			get
			{
				return this._LogoPath18;
			}
			set
			{
				if ((this._LogoPath18 != value))
				{
					this.OnLogoPath18Changing(value);
					this.SendPropertyChanging();
					this._LogoPath18 = value;
					this.SendPropertyChanged("LogoPath18");
					this.OnLogoPath18Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisitCount", DbType="Int NOT NULL")]
		public int VisitCount
		{
			get
			{
				return this._VisitCount;
			}
			set
			{
				if ((this._VisitCount != value))
				{
					this.OnVisitCountChanging(value);
					this.SendPropertyChanging();
					this._VisitCount = value;
					this.SendPropertyChanged("VisitCount");
					this.OnVisitCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalRating", DbType="Int NOT NULL")]
		public int TotalRating
		{
			get
			{
				return this._TotalRating;
			}
			set
			{
				if ((this._TotalRating != value))
				{
					this.OnTotalRatingChanging(value);
					this.SendPropertyChanging();
					this._TotalRating = value;
					this.SendPropertyChanged("TotalRating");
					this.OnTotalRatingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Level]", Storage="_Level", DbType="Int NOT NULL")]
		public int Level
		{
			get
			{
				return this._Level;
			}
			set
			{
				if ((this._Level != value))
				{
					this.OnLevelChanging(value);
					this.SendPropertyChanging();
					this._Level = value;
					this.SendPropertyChanged("Level");
					this.OnLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MoneyGold", DbType="Float NOT NULL")]
		public double MoneyGold
		{
			get
			{
				return this._MoneyGold;
			}
			set
			{
				if ((this._MoneyGold != value))
				{
					this.OnMoneyGoldChanging(value);
					this.SendPropertyChanging();
					this._MoneyGold = value;
					this.SendPropertyChanged("MoneyGold");
					this.OnMoneyGoldChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MoneyWood", DbType="Float NOT NULL")]
		public double MoneyWood
		{
			get
			{
				return this._MoneyWood;
			}
			set
			{
				if ((this._MoneyWood != value))
				{
					this.OnMoneyWoodChanging(value);
					this.SendPropertyChanging();
					this._MoneyWood = value;
					this.SendPropertyChanged("MoneyWood");
					this.OnMoneyWoodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MoneyCrystal", DbType="Float NOT NULL")]
		public double MoneyCrystal
		{
			get
			{
				return this._MoneyCrystal;
			}
			set
			{
				if ((this._MoneyCrystal != value))
				{
					this.OnMoneyCrystalChanging(value);
					this.SendPropertyChanging();
					this._MoneyCrystal = value;
					this.SendPropertyChanged("MoneyCrystal");
					this.OnMoneyCrystalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_UserRoleGroup", Storage="_UserRoleGroups", ThisKey="ID", OtherKey="GroupID")]
		public EntitySet<UserRoleGroup> UserRoleGroups
		{
			get
			{
				return this._UserRoleGroups;
			}
			set
			{
				this._UserRoleGroups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_GroupRating", Storage="_GroupRatings", ThisKey="ID", OtherKey="GroupID")]
		public EntitySet<GroupRating> GroupRatings
		{
			get
			{
				return this._GroupRatings;
			}
			set
			{
				this._GroupRatings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_UserGroup", Storage="_UserGroups", ThisKey="ID", OtherKey="GroupID")]
		public EntitySet<UserGroup> UserGroups
		{
			get
			{
				return this._UserGroups;
			}
			set
			{
				this._UserGroups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_Message", Storage="_Messages", ThisKey="ID", OtherKey="GroupID")]
		public EntitySet<Message> Messages
		{
			get
			{
				return this._Messages;
			}
			set
			{
				this._Messages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_UserGroupHistory", Storage="_UserGroupHistories", ThisKey="ID", OtherKey="GroupID")]
		public EntitySet<UserGroupHistory> UserGroupHistories
		{
			get
			{
				return this._UserGroupHistories;
			}
			set
			{
				this._UserGroupHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_UserVideo", Storage="_UserVideos", ThisKey="ID", OtherKey="GroupID")]
		public EntitySet<UserVideo> UserVideos
		{
			get
			{
				return this._UserVideos;
			}
			set
			{
				this._UserVideos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_PhotoAlbum", Storage="_PhotoAlbums", ThisKey="ID", OtherKey="GroupID")]
		public EntitySet<PhotoAlbum> PhotoAlbums
		{
			get
			{
				return this._PhotoAlbums;
			}
			set
			{
				this._PhotoAlbums.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_Blog", Storage="_Blogs", ThisKey="ID", OtherKey="GroupID")]
		public EntitySet<Blog> Blogs
		{
			get
			{
				return this._Blogs;
			}
			set
			{
				this._Blogs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_Notice", Storage="_Notices", ThisKey="ID", OtherKey="GroupID")]
		public EntitySet<Notice> Notices
		{
			get
			{
				return this._Notices;
			}
			set
			{
				this._Notices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_Award", Storage="_Awards", ThisKey="ID", OtherKey="GroupID")]
		public EntitySet<Award> Awards
		{
			get
			{
				return this._Awards;
			}
			set
			{
				this._Awards.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_MoneyDetail", Storage="_MoneyDetails", ThisKey="ID", OtherKey="GroupID")]
		public EntitySet<MoneyDetail> MoneyDetails
		{
			get
			{
				return this._MoneyDetails;
			}
			set
			{
				this._MoneyDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_Group", Storage="_Game", ThisKey="GameID", OtherKey="ID", IsForeignKey=true)]
		public Game Game
		{
			get
			{
				return this._Game.Entity;
			}
			set
			{
				Game previousValue = this._Game.Entity;
				if (((previousValue != value) 
							|| (this._Game.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Game.Entity = null;
						previousValue.Groups.Remove(this);
					}
					this._Game.Entity = value;
					if ((value != null))
					{
						value.Groups.Add(this);
						this._GameID = value.ID;
					}
					else
					{
						this._GameID = default(int);
					}
					this.SendPropertyChanged("Game");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Group", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Groups.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Groups.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserRoleGroups(UserRoleGroup entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_UserRoleGroups(UserRoleGroup entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
		
		private void attach_GroupRatings(GroupRating entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_GroupRatings(GroupRating entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
		
		private void attach_UserGroups(UserGroup entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_UserGroups(UserGroup entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
		
		private void attach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
		
		private void attach_UserGroupHistories(UserGroupHistory entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_UserGroupHistories(UserGroupHistory entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
		
		private void attach_UserVideos(UserVideo entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_UserVideos(UserVideo entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
		
		private void attach_PhotoAlbums(PhotoAlbum entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_PhotoAlbums(PhotoAlbum entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
		
		private void attach_Blogs(Blog entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_Blogs(Blog entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
		
		private void attach_Notices(Notice entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_Notices(Notice entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
		
		private void attach_Awards(Award entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_Awards(Award entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
		
		private void attach_MoneyDetails(MoneyDetail entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_MoneyDetails(MoneyDetail entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MoneyFee")]
	public partial class MoneyFee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _Type;
		
		private double _PercentFee;
		
		private EntitySet<MoneyDetail> _MoneyDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnPercentFeeChanging(double value);
    partial void OnPercentFeeChanged();
    #endregion
		
		public MoneyFee()
		{
			this._MoneyDetails = new EntitySet<MoneyDetail>(new Action<MoneyDetail>(this.attach_MoneyDetails), new Action<MoneyDetail>(this.detach_MoneyDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PercentFee", DbType="Float NOT NULL")]
		public double PercentFee
		{
			get
			{
				return this._PercentFee;
			}
			set
			{
				if ((this._PercentFee != value))
				{
					this.OnPercentFeeChanging(value);
					this.SendPropertyChanging();
					this._PercentFee = value;
					this.SendPropertyChanged("PercentFee");
					this.OnPercentFeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MoneyFee_MoneyDetail", Storage="_MoneyDetails", ThisKey="ID", OtherKey="MoneyFeeID")]
		public EntitySet<MoneyDetail> MoneyDetails
		{
			get
			{
				return this._MoneyDetails;
			}
			set
			{
				this._MoneyDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MoneyDetails(MoneyDetail entity)
		{
			this.SendPropertyChanging();
			entity.MoneyFee = this;
		}
		
		private void detach_MoneyDetails(MoneyDetail entity)
		{
			this.SendPropertyChanging();
			entity.MoneyFee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Award")]
	public partial class Award : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _TeamID;
		
		private System.Nullable<int> _GroupID;
		
		private int _TournamentID;
		
		private string _Name;
		
		private string _IconPath;
		
		private bool _IsSpecial;
		
		private System.Nullable<System.DateTime> _AwardedDate;
		
		private System.Nullable<int> _MatchID;
		
		private int _Point;
		
		private System.Nullable<int> _Place;
		
		private System.Nullable<double> _MoneyGoldPercent;
		
		private System.Nullable<double> _MoneyWood;
		
		private System.Nullable<double> _MoneyCrystal;
		
		private EntitySet<UserAward> _UserAwards;
		
		private EntityRef<Group> _Group;
		
		private EntityRef<Team> _Team;
		
		private EntityRef<Match> _Match;
		
		private EntityRef<Tournament> _Tournament;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTeamIDChanging(System.Nullable<int> value);
    partial void OnTeamIDChanged();
    partial void OnGroupIDChanging(System.Nullable<int> value);
    partial void OnGroupIDChanged();
    partial void OnTournamentIDChanging(int value);
    partial void OnTournamentIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIconPathChanging(string value);
    partial void OnIconPathChanged();
    partial void OnIsSpecialChanging(bool value);
    partial void OnIsSpecialChanged();
    partial void OnAwardedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAwardedDateChanged();
    partial void OnMatchIDChanging(System.Nullable<int> value);
    partial void OnMatchIDChanged();
    partial void OnPointChanging(int value);
    partial void OnPointChanged();
    partial void OnPlaceChanging(System.Nullable<int> value);
    partial void OnPlaceChanged();
    partial void OnMoneyGoldPercentChanging(System.Nullable<double> value);
    partial void OnMoneyGoldPercentChanged();
    partial void OnMoneyWoodChanging(System.Nullable<double> value);
    partial void OnMoneyWoodChanged();
    partial void OnMoneyCrystalChanging(System.Nullable<double> value);
    partial void OnMoneyCrystalChanged();
    #endregion
		
		public Award()
		{
			this._UserAwards = new EntitySet<UserAward>(new Action<UserAward>(this.attach_UserAwards), new Action<UserAward>(this.detach_UserAwards));
			this._Group = default(EntityRef<Group>);
			this._Team = default(EntityRef<Team>);
			this._Match = default(EntityRef<Match>);
			this._Tournament = default(EntityRef<Tournament>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamID", DbType="Int")]
		public System.Nullable<int> TeamID
		{
			get
			{
				return this._TeamID;
			}
			set
			{
				if ((this._TeamID != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIDChanging(value);
					this.SendPropertyChanging();
					this._TeamID = value;
					this.SendPropertyChanged("TeamID");
					this.OnTeamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="Int")]
		public System.Nullable<int> GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentID", DbType="Int NOT NULL")]
		public int TournamentID
		{
			get
			{
				return this._TournamentID;
			}
			set
			{
				if ((this._TournamentID != value))
				{
					if (this._Tournament.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTournamentIDChanging(value);
					this.SendPropertyChanging();
					this._TournamentID = value;
					this.SendPropertyChanged("TournamentID");
					this.OnTournamentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IconPath", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string IconPath
		{
			get
			{
				return this._IconPath;
			}
			set
			{
				if ((this._IconPath != value))
				{
					this.OnIconPathChanging(value);
					this.SendPropertyChanging();
					this._IconPath = value;
					this.SendPropertyChanged("IconPath");
					this.OnIconPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSpecial", DbType="Bit NOT NULL")]
		public bool IsSpecial
		{
			get
			{
				return this._IsSpecial;
			}
			set
			{
				if ((this._IsSpecial != value))
				{
					this.OnIsSpecialChanging(value);
					this.SendPropertyChanging();
					this._IsSpecial = value;
					this.SendPropertyChanged("IsSpecial");
					this.OnIsSpecialChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AwardedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> AwardedDate
		{
			get
			{
				return this._AwardedDate;
			}
			set
			{
				if ((this._AwardedDate != value))
				{
					this.OnAwardedDateChanging(value);
					this.SendPropertyChanging();
					this._AwardedDate = value;
					this.SendPropertyChanged("AwardedDate");
					this.OnAwardedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchID", DbType="Int")]
		public System.Nullable<int> MatchID
		{
			get
			{
				return this._MatchID;
			}
			set
			{
				if ((this._MatchID != value))
				{
					if (this._Match.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatchIDChanging(value);
					this.SendPropertyChanging();
					this._MatchID = value;
					this.SendPropertyChanged("MatchID");
					this.OnMatchIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Point", DbType="Int NOT NULL")]
		public int Point
		{
			get
			{
				return this._Point;
			}
			set
			{
				if ((this._Point != value))
				{
					this.OnPointChanging(value);
					this.SendPropertyChanging();
					this._Point = value;
					this.SendPropertyChanged("Point");
					this.OnPointChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Place", DbType="Int")]
		public System.Nullable<int> Place
		{
			get
			{
				return this._Place;
			}
			set
			{
				if ((this._Place != value))
				{
					this.OnPlaceChanging(value);
					this.SendPropertyChanging();
					this._Place = value;
					this.SendPropertyChanged("Place");
					this.OnPlaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MoneyGoldPercent", DbType="Float")]
		public System.Nullable<double> MoneyGoldPercent
		{
			get
			{
				return this._MoneyGoldPercent;
			}
			set
			{
				if ((this._MoneyGoldPercent != value))
				{
					this.OnMoneyGoldPercentChanging(value);
					this.SendPropertyChanging();
					this._MoneyGoldPercent = value;
					this.SendPropertyChanged("MoneyGoldPercent");
					this.OnMoneyGoldPercentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MoneyWood", DbType="Float")]
		public System.Nullable<double> MoneyWood
		{
			get
			{
				return this._MoneyWood;
			}
			set
			{
				if ((this._MoneyWood != value))
				{
					this.OnMoneyWoodChanging(value);
					this.SendPropertyChanging();
					this._MoneyWood = value;
					this.SendPropertyChanged("MoneyWood");
					this.OnMoneyWoodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MoneyCrystal", DbType="Float")]
		public System.Nullable<double> MoneyCrystal
		{
			get
			{
				return this._MoneyCrystal;
			}
			set
			{
				if ((this._MoneyCrystal != value))
				{
					this.OnMoneyCrystalChanging(value);
					this.SendPropertyChanging();
					this._MoneyCrystal = value;
					this.SendPropertyChanged("MoneyCrystal");
					this.OnMoneyCrystalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Award_UserAward", Storage="_UserAwards", ThisKey="ID", OtherKey="AwardID")]
		public EntitySet<UserAward> UserAwards
		{
			get
			{
				return this._UserAwards;
			}
			set
			{
				this._UserAwards.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_Award", Storage="_Group", ThisKey="GroupID", OtherKey="ID", IsForeignKey=true, DeleteRule="SET NULL")]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.Awards.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.Awards.Add(this);
						this._GroupID = value.ID;
					}
					else
					{
						this._GroupID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Award", Storage="_Team", ThisKey="TeamID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.Awards.Remove(this);
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.Awards.Add(this);
						this._TeamID = value.ID;
					}
					else
					{
						this._TeamID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Match_Award", Storage="_Match", ThisKey="MatchID", OtherKey="ID", IsForeignKey=true)]
		public Match Match
		{
			get
			{
				return this._Match.Entity;
			}
			set
			{
				Match previousValue = this._Match.Entity;
				if (((previousValue != value) 
							|| (this._Match.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Match.Entity = null;
						previousValue.Awards.Remove(this);
					}
					this._Match.Entity = value;
					if ((value != null))
					{
						value.Awards.Add(this);
						this._MatchID = value.ID;
					}
					else
					{
						this._MatchID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Match");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tournament_Award", Storage="_Tournament", ThisKey="TournamentID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Tournament Tournament
		{
			get
			{
				return this._Tournament.Entity;
			}
			set
			{
				Tournament previousValue = this._Tournament.Entity;
				if (((previousValue != value) 
							|| (this._Tournament.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tournament.Entity = null;
						previousValue.Awards.Remove(this);
					}
					this._Tournament.Entity = value;
					if ((value != null))
					{
						value.Awards.Add(this);
						this._TournamentID = value.ID;
					}
					else
					{
						this._TournamentID = default(int);
					}
					this.SendPropertyChanged("Tournament");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserAwards(UserAward entity)
		{
			this.SendPropertyChanging();
			entity.Award = this;
		}
		
		private void detach_UserAwards(UserAward entity)
		{
			this.SendPropertyChanging();
			entity.Award = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BalanceSiteMoney")]
	public partial class BalanceSiteMoney : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private double _MoneyGold;
		
		private System.DateTime _LastUpdateDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMoneyGoldChanging(double value);
    partial void OnMoneyGoldChanged();
    partial void OnLastUpdateDateChanging(System.DateTime value);
    partial void OnLastUpdateDateChanged();
    #endregion
		
		public BalanceSiteMoney()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MoneyGold", DbType="Float NOT NULL")]
		public double MoneyGold
		{
			get
			{
				return this._MoneyGold;
			}
			set
			{
				if ((this._MoneyGold != value))
				{
					this.OnMoneyGoldChanging(value);
					this.SendPropertyChanging();
					this._MoneyGold = value;
					this.SendPropertyChanged("MoneyGold");
					this.OnMoneyGoldChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdateDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdateDate
		{
			get
			{
				return this._LastUpdateDate;
			}
			set
			{
				if ((this._LastUpdateDate != value))
				{
					this.OnLastUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdateDate = value;
					this.SendPropertyChanged("LastUpdateDate");
					this.OnLastUpdateDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MoneyWithdraw")]
	public partial class MoneyWithdraw : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private System.Nullable<int> _MoneyDetailID;
		
		private double _Sum;
		
		private int _Provider;
		
		private string _Account;
		
		private System.DateTime _AddedDate;
		
		private bool _Submitted;
		
		private EntityRef<User> _User;
		
		private EntityRef<MoneyDetail> _MoneyDetail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnMoneyDetailIDChanging(System.Nullable<int> value);
    partial void OnMoneyDetailIDChanged();
    partial void OnSumChanging(double value);
    partial void OnSumChanged();
    partial void OnProviderChanging(int value);
    partial void OnProviderChanged();
    partial void OnAccountChanging(string value);
    partial void OnAccountChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnSubmittedChanging(bool value);
    partial void OnSubmittedChanged();
    #endregion
		
		public MoneyWithdraw()
		{
			this._User = default(EntityRef<User>);
			this._MoneyDetail = default(EntityRef<MoneyDetail>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MoneyDetailID", DbType="Int")]
		public System.Nullable<int> MoneyDetailID
		{
			get
			{
				return this._MoneyDetailID;
			}
			set
			{
				if ((this._MoneyDetailID != value))
				{
					if (this._MoneyDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMoneyDetailIDChanging(value);
					this.SendPropertyChanging();
					this._MoneyDetailID = value;
					this.SendPropertyChanged("MoneyDetailID");
					this.OnMoneyDetailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sum", DbType="Float NOT NULL")]
		public double Sum
		{
			get
			{
				return this._Sum;
			}
			set
			{
				if ((this._Sum != value))
				{
					this.OnSumChanging(value);
					this.SendPropertyChanging();
					this._Sum = value;
					this.SendPropertyChanged("Sum");
					this.OnSumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Provider", DbType="Int NOT NULL")]
		public int Provider
		{
			get
			{
				return this._Provider;
			}
			set
			{
				if ((this._Provider != value))
				{
					this.OnProviderChanging(value);
					this.SendPropertyChanging();
					this._Provider = value;
					this.SendPropertyChanged("Provider");
					this.OnProviderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Account
		{
			get
			{
				return this._Account;
			}
			set
			{
				if ((this._Account != value))
				{
					this.OnAccountChanging(value);
					this.SendPropertyChanging();
					this._Account = value;
					this.SendPropertyChanged("Account");
					this.OnAccountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Submitted", DbType="Bit NOT NULL")]
		public bool Submitted
		{
			get
			{
				return this._Submitted;
			}
			set
			{
				if ((this._Submitted != value))
				{
					this.OnSubmittedChanging(value);
					this.SendPropertyChanging();
					this._Submitted = value;
					this.SendPropertyChanged("Submitted");
					this.OnSubmittedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_MoneyWithdraw", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.MoneyWithdraws.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.MoneyWithdraws.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MoneyDetail_MoneyWithdraw", Storage="_MoneyDetail", ThisKey="MoneyDetailID", OtherKey="ID", IsForeignKey=true)]
		public MoneyDetail MoneyDetail
		{
			get
			{
				return this._MoneyDetail.Entity;
			}
			set
			{
				MoneyDetail previousValue = this._MoneyDetail.Entity;
				if (((previousValue != value) 
							|| (this._MoneyDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MoneyDetail.Entity = null;
						previousValue.MoneyWithdraws.Remove(this);
					}
					this._MoneyDetail.Entity = value;
					if ((value != null))
					{
						value.MoneyWithdraws.Add(this);
						this._MoneyDetailID = value.ID;
					}
					else
					{
						this._MoneyDetailID = default(Nullable<int>);
					}
					this.SendPropertyChanged("MoneyDetail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BannedWord")]
	public partial class BannedWord : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Word;
		
		private bool _IsCanBeSubWord;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnWordChanging(string value);
    partial void OnWordChanged();
    partial void OnIsCanBeSubWordChanging(bool value);
    partial void OnIsCanBeSubWordChanged();
    #endregion
		
		public BannedWord()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Word", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Word
		{
			get
			{
				return this._Word;
			}
			set
			{
				if ((this._Word != value))
				{
					this.OnWordChanging(value);
					this.SendPropertyChanging();
					this._Word = value;
					this.SendPropertyChanged("Word");
					this.OnWordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCanBeSubWord", DbType="Bit NOT NULL")]
		public bool IsCanBeSubWord
		{
			get
			{
				return this._IsCanBeSubWord;
			}
			set
			{
				if ((this._IsCanBeSubWord != value))
				{
					this.OnIsCanBeSubWordChanging(value);
					this.SendPropertyChanging();
					this._IsCanBeSubWord = value;
					this.SendPropertyChanged("IsCanBeSubWord");
					this.OnIsCanBeSubWordChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PromoCode")]
	public partial class PromoCode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _PromoActionID;
		
		private string _Code;
		
		private System.DateTime _AddedDate;
		
		private System.Nullable<System.DateTime> _UsedDate;
		
		private EntitySet<Cart> _Carts;
		
		private EntitySet<CartProduct> _CartProducts;
		
		private EntityRef<PromoAction> _PromoAction;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPromoActionIDChanging(int value);
    partial void OnPromoActionIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnUsedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUsedDateChanged();
    #endregion
		
		public PromoCode()
		{
			this._Carts = new EntitySet<Cart>(new Action<Cart>(this.attach_Carts), new Action<Cart>(this.detach_Carts));
			this._CartProducts = new EntitySet<CartProduct>(new Action<CartProduct>(this.attach_CartProducts), new Action<CartProduct>(this.detach_CartProducts));
			this._PromoAction = default(EntityRef<PromoAction>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PromoActionID", DbType="Int NOT NULL")]
		public int PromoActionID
		{
			get
			{
				return this._PromoActionID;
			}
			set
			{
				if ((this._PromoActionID != value))
				{
					if (this._PromoAction.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPromoActionIDChanging(value);
					this.SendPropertyChanging();
					this._PromoActionID = value;
					this.SendPropertyChanged("PromoActionID");
					this.OnPromoActionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UsedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> UsedDate
		{
			get
			{
				return this._UsedDate;
			}
			set
			{
				if ((this._UsedDate != value))
				{
					this.OnUsedDateChanging(value);
					this.SendPropertyChanging();
					this._UsedDate = value;
					this.SendPropertyChanged("UsedDate");
					this.OnUsedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PromoCode_Cart", Storage="_Carts", ThisKey="ID", OtherKey="PromoCodeID")]
		public EntitySet<Cart> Carts
		{
			get
			{
				return this._Carts;
			}
			set
			{
				this._Carts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PromoCode_CartProduct", Storage="_CartProducts", ThisKey="ID", OtherKey="PromoCodeID")]
		public EntitySet<CartProduct> CartProducts
		{
			get
			{
				return this._CartProducts;
			}
			set
			{
				this._CartProducts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PromoAction_PromoCode", Storage="_PromoAction", ThisKey="PromoActionID", OtherKey="ID", IsForeignKey=true)]
		public PromoAction PromoAction
		{
			get
			{
				return this._PromoAction.Entity;
			}
			set
			{
				PromoAction previousValue = this._PromoAction.Entity;
				if (((previousValue != value) 
							|| (this._PromoAction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PromoAction.Entity = null;
						previousValue.PromoCodes.Remove(this);
					}
					this._PromoAction.Entity = value;
					if ((value != null))
					{
						value.PromoCodes.Add(this);
						this._PromoActionID = value.ID;
					}
					else
					{
						this._PromoActionID = default(int);
					}
					this.SendPropertyChanged("PromoAction");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Carts(Cart entity)
		{
			this.SendPropertyChanging();
			entity.PromoCode = this;
		}
		
		private void detach_Carts(Cart entity)
		{
			this.SendPropertyChanging();
			entity.PromoCode = null;
		}
		
		private void attach_CartProducts(CartProduct entity)
		{
			this.SendPropertyChanging();
			entity.PromoCode = this;
		}
		
		private void detach_CartProducts(CartProduct entity)
		{
			this.SendPropertyChanging();
			entity.PromoCode = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PromoAction")]
	public partial class PromoAction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _ProductID;
		
		private string _Name;
		
		private bool _OnlyManager;
		
		private int _Type;
		
		private double _Amount;
		
		private System.Nullable<System.DateTime> _ValidDate;
		
		private bool _Closed;
		
		private bool _Reusable;
		
		private EntitySet<PromoCode> _PromoCodes;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnProductIDChanging(System.Nullable<int> value);
    partial void OnProductIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnOnlyManagerChanging(bool value);
    partial void OnOnlyManagerChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnAmountChanging(double value);
    partial void OnAmountChanged();
    partial void OnValidDateChanging(System.Nullable<System.DateTime> value);
    partial void OnValidDateChanged();
    partial void OnClosedChanging(bool value);
    partial void OnClosedChanged();
    partial void OnReusableChanging(bool value);
    partial void OnReusableChanged();
    #endregion
		
		public PromoAction()
		{
			this._PromoCodes = new EntitySet<PromoCode>(new Action<PromoCode>(this.attach_PromoCodes), new Action<PromoCode>(this.detach_PromoCodes));
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="Int")]
		public System.Nullable<int> ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OnlyManager", DbType="Bit NOT NULL")]
		public bool OnlyManager
		{
			get
			{
				return this._OnlyManager;
			}
			set
			{
				if ((this._OnlyManager != value))
				{
					this.OnOnlyManagerChanging(value);
					this.SendPropertyChanging();
					this._OnlyManager = value;
					this.SendPropertyChanged("OnlyManager");
					this.OnOnlyManagerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Float NOT NULL")]
		public double Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValidDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ValidDate
		{
			get
			{
				return this._ValidDate;
			}
			set
			{
				if ((this._ValidDate != value))
				{
					this.OnValidDateChanging(value);
					this.SendPropertyChanging();
					this._ValidDate = value;
					this.SendPropertyChanged("ValidDate");
					this.OnValidDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Closed", DbType="Bit NOT NULL")]
		public bool Closed
		{
			get
			{
				return this._Closed;
			}
			set
			{
				if ((this._Closed != value))
				{
					this.OnClosedChanging(value);
					this.SendPropertyChanging();
					this._Closed = value;
					this.SendPropertyChanged("Closed");
					this.OnClosedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reusable", DbType="Bit NOT NULL")]
		public bool Reusable
		{
			get
			{
				return this._Reusable;
			}
			set
			{
				if ((this._Reusable != value))
				{
					this.OnReusableChanging(value);
					this.SendPropertyChanging();
					this._Reusable = value;
					this.SendPropertyChanged("Reusable");
					this.OnReusableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PromoAction_PromoCode", Storage="_PromoCodes", ThisKey="ID", OtherKey="PromoActionID")]
		public EntitySet<PromoCode> PromoCodes
		{
			get
			{
				return this._PromoCodes;
			}
			set
			{
				this._PromoCodes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_PromoAction", Storage="_Product", ThisKey="ProductID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.PromoActions.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.PromoActions.Add(this);
						this._ProductID = value.ID;
					}
					else
					{
						this._ProductID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PromoCodes(PromoCode entity)
		{
			this.SendPropertyChanging();
			entity.PromoAction = this;
		}
		
		private void detach_PromoCodes(PromoCode entity)
		{
			this.SendPropertyChanging();
			entity.PromoAction = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GlobalUnique")]
	public partial class GlobalUnique : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.DateTime _AddedDate;
		
		private System.DateTime _LastDate;
		
		private string _IP;
		
		private string _UserAgent;
		
		private EntitySet<MoneyDetail> _MoneyDetails;
		
		private EntitySet<Recharge> _Recharges;
		
		private EntitySet<Cart> _Carts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnLastDateChanging(System.DateTime value);
    partial void OnLastDateChanged();
    partial void OnIPChanging(string value);
    partial void OnIPChanged();
    partial void OnUserAgentChanging(string value);
    partial void OnUserAgentChanged();
    #endregion
		
		public GlobalUnique()
		{
			this._MoneyDetails = new EntitySet<MoneyDetail>(new Action<MoneyDetail>(this.attach_MoneyDetails), new Action<MoneyDetail>(this.detach_MoneyDetails));
			this._Recharges = new EntitySet<Recharge>(new Action<Recharge>(this.attach_Recharges), new Action<Recharge>(this.detach_Recharges));
			this._Carts = new EntitySet<Cart>(new Action<Cart>(this.attach_Carts), new Action<Cart>(this.detach_Carts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastDate
		{
			get
			{
				return this._LastDate;
			}
			set
			{
				if ((this._LastDate != value))
				{
					this.OnLastDateChanging(value);
					this.SendPropertyChanging();
					this._LastDate = value;
					this.SendPropertyChanged("LastDate");
					this.OnLastDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IP", DbType="NVarChar(50)")]
		public string IP
		{
			get
			{
				return this._IP;
			}
			set
			{
				if ((this._IP != value))
				{
					this.OnIPChanging(value);
					this.SendPropertyChanging();
					this._IP = value;
					this.SendPropertyChanged("IP");
					this.OnIPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserAgent", DbType="NVarChar(500)")]
		public string UserAgent
		{
			get
			{
				return this._UserAgent;
			}
			set
			{
				if ((this._UserAgent != value))
				{
					this.OnUserAgentChanging(value);
					this.SendPropertyChanging();
					this._UserAgent = value;
					this.SendPropertyChanged("UserAgent");
					this.OnUserAgentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GlobalUnique_MoneyDetail", Storage="_MoneyDetails", ThisKey="ID", OtherKey="GlobalUniqueID")]
		public EntitySet<MoneyDetail> MoneyDetails
		{
			get
			{
				return this._MoneyDetails;
			}
			set
			{
				this._MoneyDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GlobalUnique_Recharge", Storage="_Recharges", ThisKey="ID", OtherKey="GlobalUniqueID")]
		public EntitySet<Recharge> Recharges
		{
			get
			{
				return this._Recharges;
			}
			set
			{
				this._Recharges.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GlobalUnique_Cart", Storage="_Carts", ThisKey="ID", OtherKey="GlobalUniqueID")]
		public EntitySet<Cart> Carts
		{
			get
			{
				return this._Carts;
			}
			set
			{
				this._Carts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MoneyDetails(MoneyDetail entity)
		{
			this.SendPropertyChanging();
			entity.GlobalUnique = this;
		}
		
		private void detach_MoneyDetails(MoneyDetail entity)
		{
			this.SendPropertyChanging();
			entity.GlobalUnique = null;
		}
		
		private void attach_Recharges(Recharge entity)
		{
			this.SendPropertyChanging();
			entity.GlobalUnique = this;
		}
		
		private void detach_Recharges(Recharge entity)
		{
			this.SendPropertyChanging();
			entity.GlobalUnique = null;
		}
		
		private void attach_Carts(Cart entity)
		{
			this.SendPropertyChanging();
			entity.GlobalUnique = this;
		}
		
		private void detach_Carts(Cart entity)
		{
			this.SendPropertyChanging();
			entity.GlobalUnique = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Login;
		
		private string _Email;
		
		private bool _VerifiedEmail;
		
		private string _Password;
		
		private System.DateTime _AddedDate;
		
		private System.Nullable<System.DateTime> _ActivatedDate;
		
		private string _ActivatedLink;
		
		private System.DateTime _LastVisitDate;
		
		private string _AvatarPath173;
		
		private string _AvatarPath96;
		
		private string _AvatarPath84;
		
		private string _AvatarPath57;
		
		private string _AvatarPath26;
		
		private string _AvatarPath18;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Country;
		
		private string _City;
		
		private string _Address;
		
		private string _Phone;
		
		private System.Nullable<System.DateTime> _Birthdate;
		
		private string _PlaystationID;
		
		private string _XboxGametag;
		
		private string _EAAccount;
		
		private string _SteamAccount;
		
		private string _GarenaAccount;
		
		private string _ICQ;
		
		private string _Skype;
		
		private string _Vk;
		
		private double _Reputation;
		
		private bool _Banned;
		
		private int _VisitCount;
		
		private string _AvatarPath30;
		
		private double _ReputationHonest;
		
		private System.Nullable<double> _ReputationConnection;
		
		private double _ReputationResponsibility;
		
		private int _CountPlus;
		
		private int _CountMinus;
		
		private bool _Subscription;
		
		private string _Signature;
		
		private double _MoneyGold;
		
		private double _MoneyWood;
		
		private double _MoneyCrystal;
		
		private EntitySet<Friendship> _Friendships;
		
		private EntitySet<Friendship> _Friendships1;
		
		private EntitySet<Grade> _Grades;
		
		private EntitySet<Grade> _Grades1;
		
		private EntitySet<Reputation> _Reputations;
		
		private EntitySet<Reputation> _Reputations1;
		
		private EntitySet<UserComment> _UserComments;
		
		private EntitySet<UserRole> _UserRoles;
		
		private EntitySet<UserGame> _UserGames;
		
		private EntitySet<Rating> _Ratings;
		
		private EntitySet<Comment> _Comments;
		
		private EntitySet<ForumLog> _ForumLogs;
		
		private EntitySet<PollVote> _PollVotes;
		
		private EntitySet<Mail> _Mails;
		
		private EntitySet<Distribution> _Distributions;
		
		private EntitySet<ChatMessage> _ChatMessages;
		
		private EntitySet<ChatBannedUser> _ChatBannedUsers;
		
		private EntitySet<Round> _Rounds;
		
		private EntitySet<UserTeam> _UserTeams;
		
		private EntitySet<UserAward> _UserAwards;
		
		private EntitySet<Participant> _Participants;
		
		private EntitySet<UserGroup> _UserGroups;
		
		private EntitySet<Message> _Messages;
		
		private EntitySet<Message> _Messages1;
		
		private EntitySet<UserGroupHistory> _UserGroupHistories;
		
		private EntitySet<TeamReplacement> _TeamReplacements;
		
		private EntitySet<TeamReplacement> _TeamReplacements1;
		
		private EntitySet<MatchRoaster> _MatchRoasters;
		
		private EntitySet<NewLike> _NewLikes;
		
		private EntitySet<BlogLike> _BlogLikes;
		
		private EntitySet<Photo> _Photos;
		
		private EntitySet<PhotoLike> _PhotoLikes;
		
		private EntitySet<NoticeDistribution> _NoticeDistributions;
		
		private EntitySet<ChatRoomLog> _ChatRoomLogs;
		
		private EntitySet<Poll> _Polls;
		
		private EntitySet<UserVideo> _UserVideos;
		
		private EntitySet<Forum> _Forums;
		
		private EntitySet<PhotoAlbum> _PhotoAlbums;
		
		private EntitySet<Blog> _Blogs;
		
		private EntitySet<New> _News;
		
		private EntitySet<Video> _Videos;
		
		private EntitySet<Social> _Socials;
		
		private EntitySet<Notice> _Notices;
		
		private EntitySet<Notice> _Notices1;
		
		private EntityRef<SocialPost> _SocialPost;
		
		private EntitySet<ForumMessage> _ForumMessages;
		
		private EntitySet<ForumMessage> _ForumMessages1;
		
		private EntitySet<Group> _Groups;
		
		private EntitySet<MoneyWithdraw> _MoneyWithdraws;
		
		private EntitySet<MoneyDetail> _MoneyDetails;
		
		private EntitySet<Recharge> _Recharges;
		
		private EntitySet<Cart> _Carts;
		
		private EntitySet<Cart> _Carts1;
		
		private EntitySet<ProductReview> _ProductReviews;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnLoginChanging(string value);
    partial void OnLoginChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnVerifiedEmailChanging(bool value);
    partial void OnVerifiedEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnActivatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnActivatedDateChanged();
    partial void OnActivatedLinkChanging(string value);
    partial void OnActivatedLinkChanged();
    partial void OnLastVisitDateChanging(System.DateTime value);
    partial void OnLastVisitDateChanged();
    partial void OnAvatarPath173Changing(string value);
    partial void OnAvatarPath173Changed();
    partial void OnAvatarPath96Changing(string value);
    partial void OnAvatarPath96Changed();
    partial void OnAvatarPath84Changing(string value);
    partial void OnAvatarPath84Changed();
    partial void OnAvatarPath57Changing(string value);
    partial void OnAvatarPath57Changed();
    partial void OnAvatarPath26Changing(string value);
    partial void OnAvatarPath26Changed();
    partial void OnAvatarPath18Changing(string value);
    partial void OnAvatarPath18Changed();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnBirthdateChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthdateChanged();
    partial void OnPlaystationIDChanging(string value);
    partial void OnPlaystationIDChanged();
    partial void OnXboxGametagChanging(string value);
    partial void OnXboxGametagChanged();
    partial void OnEAAccountChanging(string value);
    partial void OnEAAccountChanged();
    partial void OnSteamAccountChanging(string value);
    partial void OnSteamAccountChanged();
    partial void OnGarenaAccountChanging(string value);
    partial void OnGarenaAccountChanged();
    partial void OnICQChanging(string value);
    partial void OnICQChanged();
    partial void OnSkypeChanging(string value);
    partial void OnSkypeChanged();
    partial void OnVkChanging(string value);
    partial void OnVkChanged();
    partial void OnReputationChanging(double value);
    partial void OnReputationChanged();
    partial void OnBannedChanging(bool value);
    partial void OnBannedChanged();
    partial void OnVisitCountChanging(int value);
    partial void OnVisitCountChanged();
    partial void OnAvatarPath30Changing(string value);
    partial void OnAvatarPath30Changed();
    partial void OnReputationHonestChanging(double value);
    partial void OnReputationHonestChanged();
    partial void OnReputationConnectionChanging(System.Nullable<double> value);
    partial void OnReputationConnectionChanged();
    partial void OnReputationResponsibilityChanging(double value);
    partial void OnReputationResponsibilityChanged();
    partial void OnCountPlusChanging(int value);
    partial void OnCountPlusChanged();
    partial void OnCountMinusChanging(int value);
    partial void OnCountMinusChanged();
    partial void OnSubscriptionChanging(bool value);
    partial void OnSubscriptionChanged();
    partial void OnSignatureChanging(string value);
    partial void OnSignatureChanged();
    partial void OnMoneyGoldChanging(double value);
    partial void OnMoneyGoldChanged();
    partial void OnMoneyWoodChanging(double value);
    partial void OnMoneyWoodChanged();
    partial void OnMoneyCrystalChanging(double value);
    partial void OnMoneyCrystalChanged();
    #endregion
		
		public User()
		{
			this._Friendships = new EntitySet<Friendship>(new Action<Friendship>(this.attach_Friendships), new Action<Friendship>(this.detach_Friendships));
			this._Friendships1 = new EntitySet<Friendship>(new Action<Friendship>(this.attach_Friendships1), new Action<Friendship>(this.detach_Friendships1));
			this._Grades = new EntitySet<Grade>(new Action<Grade>(this.attach_Grades), new Action<Grade>(this.detach_Grades));
			this._Grades1 = new EntitySet<Grade>(new Action<Grade>(this.attach_Grades1), new Action<Grade>(this.detach_Grades1));
			this._Reputations = new EntitySet<Reputation>(new Action<Reputation>(this.attach_Reputations), new Action<Reputation>(this.detach_Reputations));
			this._Reputations1 = new EntitySet<Reputation>(new Action<Reputation>(this.attach_Reputations1), new Action<Reputation>(this.detach_Reputations1));
			this._UserComments = new EntitySet<UserComment>(new Action<UserComment>(this.attach_UserComments), new Action<UserComment>(this.detach_UserComments));
			this._UserRoles = new EntitySet<UserRole>(new Action<UserRole>(this.attach_UserRoles), new Action<UserRole>(this.detach_UserRoles));
			this._UserGames = new EntitySet<UserGame>(new Action<UserGame>(this.attach_UserGames), new Action<UserGame>(this.detach_UserGames));
			this._Ratings = new EntitySet<Rating>(new Action<Rating>(this.attach_Ratings), new Action<Rating>(this.detach_Ratings));
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._ForumLogs = new EntitySet<ForumLog>(new Action<ForumLog>(this.attach_ForumLogs), new Action<ForumLog>(this.detach_ForumLogs));
			this._PollVotes = new EntitySet<PollVote>(new Action<PollVote>(this.attach_PollVotes), new Action<PollVote>(this.detach_PollVotes));
			this._Mails = new EntitySet<Mail>(new Action<Mail>(this.attach_Mails), new Action<Mail>(this.detach_Mails));
			this._Distributions = new EntitySet<Distribution>(new Action<Distribution>(this.attach_Distributions), new Action<Distribution>(this.detach_Distributions));
			this._ChatMessages = new EntitySet<ChatMessage>(new Action<ChatMessage>(this.attach_ChatMessages), new Action<ChatMessage>(this.detach_ChatMessages));
			this._ChatBannedUsers = new EntitySet<ChatBannedUser>(new Action<ChatBannedUser>(this.attach_ChatBannedUsers), new Action<ChatBannedUser>(this.detach_ChatBannedUsers));
			this._Rounds = new EntitySet<Round>(new Action<Round>(this.attach_Rounds), new Action<Round>(this.detach_Rounds));
			this._UserTeams = new EntitySet<UserTeam>(new Action<UserTeam>(this.attach_UserTeams), new Action<UserTeam>(this.detach_UserTeams));
			this._UserAwards = new EntitySet<UserAward>(new Action<UserAward>(this.attach_UserAwards), new Action<UserAward>(this.detach_UserAwards));
			this._Participants = new EntitySet<Participant>(new Action<Participant>(this.attach_Participants), new Action<Participant>(this.detach_Participants));
			this._UserGroups = new EntitySet<UserGroup>(new Action<UserGroup>(this.attach_UserGroups), new Action<UserGroup>(this.detach_UserGroups));
			this._Messages = new EntitySet<Message>(new Action<Message>(this.attach_Messages), new Action<Message>(this.detach_Messages));
			this._Messages1 = new EntitySet<Message>(new Action<Message>(this.attach_Messages1), new Action<Message>(this.detach_Messages1));
			this._UserGroupHistories = new EntitySet<UserGroupHistory>(new Action<UserGroupHistory>(this.attach_UserGroupHistories), new Action<UserGroupHistory>(this.detach_UserGroupHistories));
			this._TeamReplacements = new EntitySet<TeamReplacement>(new Action<TeamReplacement>(this.attach_TeamReplacements), new Action<TeamReplacement>(this.detach_TeamReplacements));
			this._TeamReplacements1 = new EntitySet<TeamReplacement>(new Action<TeamReplacement>(this.attach_TeamReplacements1), new Action<TeamReplacement>(this.detach_TeamReplacements1));
			this._MatchRoasters = new EntitySet<MatchRoaster>(new Action<MatchRoaster>(this.attach_MatchRoasters), new Action<MatchRoaster>(this.detach_MatchRoasters));
			this._NewLikes = new EntitySet<NewLike>(new Action<NewLike>(this.attach_NewLikes), new Action<NewLike>(this.detach_NewLikes));
			this._BlogLikes = new EntitySet<BlogLike>(new Action<BlogLike>(this.attach_BlogLikes), new Action<BlogLike>(this.detach_BlogLikes));
			this._Photos = new EntitySet<Photo>(new Action<Photo>(this.attach_Photos), new Action<Photo>(this.detach_Photos));
			this._PhotoLikes = new EntitySet<PhotoLike>(new Action<PhotoLike>(this.attach_PhotoLikes), new Action<PhotoLike>(this.detach_PhotoLikes));
			this._NoticeDistributions = new EntitySet<NoticeDistribution>(new Action<NoticeDistribution>(this.attach_NoticeDistributions), new Action<NoticeDistribution>(this.detach_NoticeDistributions));
			this._ChatRoomLogs = new EntitySet<ChatRoomLog>(new Action<ChatRoomLog>(this.attach_ChatRoomLogs), new Action<ChatRoomLog>(this.detach_ChatRoomLogs));
			this._Polls = new EntitySet<Poll>(new Action<Poll>(this.attach_Polls), new Action<Poll>(this.detach_Polls));
			this._UserVideos = new EntitySet<UserVideo>(new Action<UserVideo>(this.attach_UserVideos), new Action<UserVideo>(this.detach_UserVideos));
			this._Forums = new EntitySet<Forum>(new Action<Forum>(this.attach_Forums), new Action<Forum>(this.detach_Forums));
			this._PhotoAlbums = new EntitySet<PhotoAlbum>(new Action<PhotoAlbum>(this.attach_PhotoAlbums), new Action<PhotoAlbum>(this.detach_PhotoAlbums));
			this._Blogs = new EntitySet<Blog>(new Action<Blog>(this.attach_Blogs), new Action<Blog>(this.detach_Blogs));
			this._News = new EntitySet<New>(new Action<New>(this.attach_News), new Action<New>(this.detach_News));
			this._Videos = new EntitySet<Video>(new Action<Video>(this.attach_Videos), new Action<Video>(this.detach_Videos));
			this._Socials = new EntitySet<Social>(new Action<Social>(this.attach_Socials), new Action<Social>(this.detach_Socials));
			this._Notices = new EntitySet<Notice>(new Action<Notice>(this.attach_Notices), new Action<Notice>(this.detach_Notices));
			this._Notices1 = new EntitySet<Notice>(new Action<Notice>(this.attach_Notices1), new Action<Notice>(this.detach_Notices1));
			this._SocialPost = default(EntityRef<SocialPost>);
			this._ForumMessages = new EntitySet<ForumMessage>(new Action<ForumMessage>(this.attach_ForumMessages), new Action<ForumMessage>(this.detach_ForumMessages));
			this._ForumMessages1 = new EntitySet<ForumMessage>(new Action<ForumMessage>(this.attach_ForumMessages1), new Action<ForumMessage>(this.detach_ForumMessages1));
			this._Groups = new EntitySet<Group>(new Action<Group>(this.attach_Groups), new Action<Group>(this.detach_Groups));
			this._MoneyWithdraws = new EntitySet<MoneyWithdraw>(new Action<MoneyWithdraw>(this.attach_MoneyWithdraws), new Action<MoneyWithdraw>(this.detach_MoneyWithdraws));
			this._MoneyDetails = new EntitySet<MoneyDetail>(new Action<MoneyDetail>(this.attach_MoneyDetails), new Action<MoneyDetail>(this.detach_MoneyDetails));
			this._Recharges = new EntitySet<Recharge>(new Action<Recharge>(this.attach_Recharges), new Action<Recharge>(this.detach_Recharges));
			this._Carts = new EntitySet<Cart>(new Action<Cart>(this.attach_Carts), new Action<Cart>(this.detach_Carts));
			this._Carts1 = new EntitySet<Cart>(new Action<Cart>(this.attach_Carts1), new Action<Cart>(this.detach_Carts1));
			this._ProductReviews = new EntitySet<ProductReview>(new Action<ProductReview>(this.attach_ProductReviews), new Action<ProductReview>(this.detach_ProductReviews));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Login", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Login
		{
			get
			{
				return this._Login;
			}
			set
			{
				if ((this._Login != value))
				{
					this.OnLoginChanging(value);
					this.SendPropertyChanging();
					this._Login = value;
					this.SendPropertyChanged("Login");
					this.OnLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(150)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VerifiedEmail", DbType="Bit NOT NULL")]
		public bool VerifiedEmail
		{
			get
			{
				return this._VerifiedEmail;
			}
			set
			{
				if ((this._VerifiedEmail != value))
				{
					this.OnVerifiedEmailChanging(value);
					this.SendPropertyChanging();
					this._VerifiedEmail = value;
					this.SendPropertyChanged("VerifiedEmail");
					this.OnVerifiedEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActivatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ActivatedDate
		{
			get
			{
				return this._ActivatedDate;
			}
			set
			{
				if ((this._ActivatedDate != value))
				{
					this.OnActivatedDateChanging(value);
					this.SendPropertyChanging();
					this._ActivatedDate = value;
					this.SendPropertyChanged("ActivatedDate");
					this.OnActivatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActivatedLink", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ActivatedLink
		{
			get
			{
				return this._ActivatedLink;
			}
			set
			{
				if ((this._ActivatedLink != value))
				{
					this.OnActivatedLinkChanging(value);
					this.SendPropertyChanging();
					this._ActivatedLink = value;
					this.SendPropertyChanged("ActivatedLink");
					this.OnActivatedLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastVisitDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastVisitDate
		{
			get
			{
				return this._LastVisitDate;
			}
			set
			{
				if ((this._LastVisitDate != value))
				{
					this.OnLastVisitDateChanging(value);
					this.SendPropertyChanging();
					this._LastVisitDate = value;
					this.SendPropertyChanged("LastVisitDate");
					this.OnLastVisitDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AvatarPath173", DbType="NVarChar(150)")]
		public string AvatarPath173
		{
			get
			{
				return this._AvatarPath173;
			}
			set
			{
				if ((this._AvatarPath173 != value))
				{
					this.OnAvatarPath173Changing(value);
					this.SendPropertyChanging();
					this._AvatarPath173 = value;
					this.SendPropertyChanged("AvatarPath173");
					this.OnAvatarPath173Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AvatarPath96", DbType="NVarChar(150)")]
		public string AvatarPath96
		{
			get
			{
				return this._AvatarPath96;
			}
			set
			{
				if ((this._AvatarPath96 != value))
				{
					this.OnAvatarPath96Changing(value);
					this.SendPropertyChanging();
					this._AvatarPath96 = value;
					this.SendPropertyChanged("AvatarPath96");
					this.OnAvatarPath96Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AvatarPath84", DbType="NVarChar(150)")]
		public string AvatarPath84
		{
			get
			{
				return this._AvatarPath84;
			}
			set
			{
				if ((this._AvatarPath84 != value))
				{
					this.OnAvatarPath84Changing(value);
					this.SendPropertyChanging();
					this._AvatarPath84 = value;
					this.SendPropertyChanged("AvatarPath84");
					this.OnAvatarPath84Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AvatarPath57", DbType="NVarChar(150)")]
		public string AvatarPath57
		{
			get
			{
				return this._AvatarPath57;
			}
			set
			{
				if ((this._AvatarPath57 != value))
				{
					this.OnAvatarPath57Changing(value);
					this.SendPropertyChanging();
					this._AvatarPath57 = value;
					this.SendPropertyChanged("AvatarPath57");
					this.OnAvatarPath57Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AvatarPath26", DbType="NVarChar(150)")]
		public string AvatarPath26
		{
			get
			{
				return this._AvatarPath26;
			}
			set
			{
				if ((this._AvatarPath26 != value))
				{
					this.OnAvatarPath26Changing(value);
					this.SendPropertyChanging();
					this._AvatarPath26 = value;
					this.SendPropertyChanged("AvatarPath26");
					this.OnAvatarPath26Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AvatarPath18", DbType="NVarChar(150)")]
		public string AvatarPath18
		{
			get
			{
				return this._AvatarPath18;
			}
			set
			{
				if ((this._AvatarPath18 != value))
				{
					this.OnAvatarPath18Changing(value);
					this.SendPropertyChanging();
					this._AvatarPath18 = value;
					this.SendPropertyChanged("AvatarPath18");
					this.OnAvatarPath18Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(500)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(500)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="NVarChar(500)")]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NVarChar(500)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(500)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(50)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Birthdate", DbType="DateTime")]
		public System.Nullable<System.DateTime> Birthdate
		{
			get
			{
				return this._Birthdate;
			}
			set
			{
				if ((this._Birthdate != value))
				{
					this.OnBirthdateChanging(value);
					this.SendPropertyChanging();
					this._Birthdate = value;
					this.SendPropertyChanged("Birthdate");
					this.OnBirthdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlaystationID", DbType="NVarChar(50)")]
		public string PlaystationID
		{
			get
			{
				return this._PlaystationID;
			}
			set
			{
				if ((this._PlaystationID != value))
				{
					this.OnPlaystationIDChanging(value);
					this.SendPropertyChanging();
					this._PlaystationID = value;
					this.SendPropertyChanged("PlaystationID");
					this.OnPlaystationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_XboxGametag", DbType="NVarChar(50)")]
		public string XboxGametag
		{
			get
			{
				return this._XboxGametag;
			}
			set
			{
				if ((this._XboxGametag != value))
				{
					this.OnXboxGametagChanging(value);
					this.SendPropertyChanging();
					this._XboxGametag = value;
					this.SendPropertyChanged("XboxGametag");
					this.OnXboxGametagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EAAccount", DbType="NVarChar(50)")]
		public string EAAccount
		{
			get
			{
				return this._EAAccount;
			}
			set
			{
				if ((this._EAAccount != value))
				{
					this.OnEAAccountChanging(value);
					this.SendPropertyChanging();
					this._EAAccount = value;
					this.SendPropertyChanged("EAAccount");
					this.OnEAAccountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SteamAccount", DbType="NVarChar(150)")]
		public string SteamAccount
		{
			get
			{
				return this._SteamAccount;
			}
			set
			{
				if ((this._SteamAccount != value))
				{
					this.OnSteamAccountChanging(value);
					this.SendPropertyChanging();
					this._SteamAccount = value;
					this.SendPropertyChanged("SteamAccount");
					this.OnSteamAccountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GarenaAccount", DbType="NVarChar(50)")]
		public string GarenaAccount
		{
			get
			{
				return this._GarenaAccount;
			}
			set
			{
				if ((this._GarenaAccount != value))
				{
					this.OnGarenaAccountChanging(value);
					this.SendPropertyChanging();
					this._GarenaAccount = value;
					this.SendPropertyChanged("GarenaAccount");
					this.OnGarenaAccountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ICQ", DbType="NVarChar(50)")]
		public string ICQ
		{
			get
			{
				return this._ICQ;
			}
			set
			{
				if ((this._ICQ != value))
				{
					this.OnICQChanging(value);
					this.SendPropertyChanging();
					this._ICQ = value;
					this.SendPropertyChanged("ICQ");
					this.OnICQChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Skype", DbType="NVarChar(50)")]
		public string Skype
		{
			get
			{
				return this._Skype;
			}
			set
			{
				if ((this._Skype != value))
				{
					this.OnSkypeChanging(value);
					this.SendPropertyChanging();
					this._Skype = value;
					this.SendPropertyChanged("Skype");
					this.OnSkypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Vk", DbType="NVarChar(50)")]
		public string Vk
		{
			get
			{
				return this._Vk;
			}
			set
			{
				if ((this._Vk != value))
				{
					this.OnVkChanging(value);
					this.SendPropertyChanging();
					this._Vk = value;
					this.SendPropertyChanged("Vk");
					this.OnVkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reputation", DbType="Float NOT NULL")]
		public double Reputation
		{
			get
			{
				return this._Reputation;
			}
			set
			{
				if ((this._Reputation != value))
				{
					this.OnReputationChanging(value);
					this.SendPropertyChanging();
					this._Reputation = value;
					this.SendPropertyChanged("Reputation");
					this.OnReputationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Banned", DbType="Bit NOT NULL")]
		public bool Banned
		{
			get
			{
				return this._Banned;
			}
			set
			{
				if ((this._Banned != value))
				{
					this.OnBannedChanging(value);
					this.SendPropertyChanging();
					this._Banned = value;
					this.SendPropertyChanged("Banned");
					this.OnBannedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisitCount", DbType="Int NOT NULL")]
		public int VisitCount
		{
			get
			{
				return this._VisitCount;
			}
			set
			{
				if ((this._VisitCount != value))
				{
					this.OnVisitCountChanging(value);
					this.SendPropertyChanging();
					this._VisitCount = value;
					this.SendPropertyChanged("VisitCount");
					this.OnVisitCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AvatarPath30", DbType="NVarChar(150)")]
		public string AvatarPath30
		{
			get
			{
				return this._AvatarPath30;
			}
			set
			{
				if ((this._AvatarPath30 != value))
				{
					this.OnAvatarPath30Changing(value);
					this.SendPropertyChanging();
					this._AvatarPath30 = value;
					this.SendPropertyChanged("AvatarPath30");
					this.OnAvatarPath30Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReputationHonest", DbType="Float NOT NULL")]
		public double ReputationHonest
		{
			get
			{
				return this._ReputationHonest;
			}
			set
			{
				if ((this._ReputationHonest != value))
				{
					this.OnReputationHonestChanging(value);
					this.SendPropertyChanging();
					this._ReputationHonest = value;
					this.SendPropertyChanged("ReputationHonest");
					this.OnReputationHonestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReputationConnection", DbType="Float")]
		public System.Nullable<double> ReputationConnection
		{
			get
			{
				return this._ReputationConnection;
			}
			set
			{
				if ((this._ReputationConnection != value))
				{
					this.OnReputationConnectionChanging(value);
					this.SendPropertyChanging();
					this._ReputationConnection = value;
					this.SendPropertyChanged("ReputationConnection");
					this.OnReputationConnectionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReputationResponsibility", DbType="Float NOT NULL")]
		public double ReputationResponsibility
		{
			get
			{
				return this._ReputationResponsibility;
			}
			set
			{
				if ((this._ReputationResponsibility != value))
				{
					this.OnReputationResponsibilityChanging(value);
					this.SendPropertyChanging();
					this._ReputationResponsibility = value;
					this.SendPropertyChanged("ReputationResponsibility");
					this.OnReputationResponsibilityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountPlus", DbType="Int NOT NULL")]
		public int CountPlus
		{
			get
			{
				return this._CountPlus;
			}
			set
			{
				if ((this._CountPlus != value))
				{
					this.OnCountPlusChanging(value);
					this.SendPropertyChanging();
					this._CountPlus = value;
					this.SendPropertyChanged("CountPlus");
					this.OnCountPlusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountMinus", DbType="Int NOT NULL")]
		public int CountMinus
		{
			get
			{
				return this._CountMinus;
			}
			set
			{
				if ((this._CountMinus != value))
				{
					this.OnCountMinusChanging(value);
					this.SendPropertyChanging();
					this._CountMinus = value;
					this.SendPropertyChanged("CountMinus");
					this.OnCountMinusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subscription", DbType="Bit NOT NULL")]
		public bool Subscription
		{
			get
			{
				return this._Subscription;
			}
			set
			{
				if ((this._Subscription != value))
				{
					this.OnSubscriptionChanging(value);
					this.SendPropertyChanging();
					this._Subscription = value;
					this.SendPropertyChanged("Subscription");
					this.OnSubscriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Signature", DbType="NVarChar(500)")]
		public string Signature
		{
			get
			{
				return this._Signature;
			}
			set
			{
				if ((this._Signature != value))
				{
					this.OnSignatureChanging(value);
					this.SendPropertyChanging();
					this._Signature = value;
					this.SendPropertyChanged("Signature");
					this.OnSignatureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MoneyGold", DbType="Float NOT NULL")]
		public double MoneyGold
		{
			get
			{
				return this._MoneyGold;
			}
			set
			{
				if ((this._MoneyGold != value))
				{
					this.OnMoneyGoldChanging(value);
					this.SendPropertyChanging();
					this._MoneyGold = value;
					this.SendPropertyChanged("MoneyGold");
					this.OnMoneyGoldChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MoneyWood", DbType="Float NOT NULL")]
		public double MoneyWood
		{
			get
			{
				return this._MoneyWood;
			}
			set
			{
				if ((this._MoneyWood != value))
				{
					this.OnMoneyWoodChanging(value);
					this.SendPropertyChanging();
					this._MoneyWood = value;
					this.SendPropertyChanged("MoneyWood");
					this.OnMoneyWoodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MoneyCrystal", DbType="Float NOT NULL")]
		public double MoneyCrystal
		{
			get
			{
				return this._MoneyCrystal;
			}
			set
			{
				if ((this._MoneyCrystal != value))
				{
					this.OnMoneyCrystalChanging(value);
					this.SendPropertyChanging();
					this._MoneyCrystal = value;
					this.SendPropertyChanged("MoneyCrystal");
					this.OnMoneyCrystalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Friendship", Storage="_Friendships", ThisKey="ID", OtherKey="ReceiverID")]
		public EntitySet<Friendship> Friendships
		{
			get
			{
				return this._Friendships;
			}
			set
			{
				this._Friendships.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Friendship1", Storage="_Friendships1", ThisKey="ID", OtherKey="SenderID")]
		public EntitySet<Friendship> Friendships1
		{
			get
			{
				return this._Friendships1;
			}
			set
			{
				this._Friendships1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Grade", Storage="_Grades", ThisKey="ID", OtherKey="ReceiverID")]
		public EntitySet<Grade> Grades
		{
			get
			{
				return this._Grades;
			}
			set
			{
				this._Grades.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Grade1", Storage="_Grades1", ThisKey="ID", OtherKey="SenderID")]
		public EntitySet<Grade> Grades1
		{
			get
			{
				return this._Grades1;
			}
			set
			{
				this._Grades1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Reputation", Storage="_Reputations", ThisKey="ID", OtherKey="ReceiverID")]
		public EntitySet<Reputation> Reputations
		{
			get
			{
				return this._Reputations;
			}
			set
			{
				this._Reputations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Reputation1", Storage="_Reputations1", ThisKey="ID", OtherKey="SenderID")]
		public EntitySet<Reputation> Reputations1
		{
			get
			{
				return this._Reputations1;
			}
			set
			{
				this._Reputations1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserComment", Storage="_UserComments", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<UserComment> UserComments
		{
			get
			{
				return this._UserComments;
			}
			set
			{
				this._UserComments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserRole", Storage="_UserRoles", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<UserRole> UserRoles
		{
			get
			{
				return this._UserRoles;
			}
			set
			{
				this._UserRoles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserGame", Storage="_UserGames", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<UserGame> UserGames
		{
			get
			{
				return this._UserGames;
			}
			set
			{
				this._UserGames.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Rating", Storage="_Ratings", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<Rating> Ratings
		{
			get
			{
				return this._Ratings;
			}
			set
			{
				this._Ratings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Comment", Storage="_Comments", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ForumLog", Storage="_ForumLogs", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<ForumLog> ForumLogs
		{
			get
			{
				return this._ForumLogs;
			}
			set
			{
				this._ForumLogs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_PollVote", Storage="_PollVotes", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<PollVote> PollVotes
		{
			get
			{
				return this._PollVotes;
			}
			set
			{
				this._PollVotes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Mail", Storage="_Mails", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<Mail> Mails
		{
			get
			{
				return this._Mails;
			}
			set
			{
				this._Mails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Distribution", Storage="_Distributions", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<Distribution> Distributions
		{
			get
			{
				return this._Distributions;
			}
			set
			{
				this._Distributions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ChatMessage", Storage="_ChatMessages", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<ChatMessage> ChatMessages
		{
			get
			{
				return this._ChatMessages;
			}
			set
			{
				this._ChatMessages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ChatBannedUser", Storage="_ChatBannedUsers", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<ChatBannedUser> ChatBannedUsers
		{
			get
			{
				return this._ChatBannedUsers;
			}
			set
			{
				this._ChatBannedUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Round", Storage="_Rounds", ThisKey="ID", OtherKey="IntroducedResultID")]
		public EntitySet<Round> Rounds
		{
			get
			{
				return this._Rounds;
			}
			set
			{
				this._Rounds.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserTeam", Storage="_UserTeams", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<UserTeam> UserTeams
		{
			get
			{
				return this._UserTeams;
			}
			set
			{
				this._UserTeams.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserAward", Storage="_UserAwards", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<UserAward> UserAwards
		{
			get
			{
				return this._UserAwards;
			}
			set
			{
				this._UserAwards.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Participant", Storage="_Participants", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<Participant> Participants
		{
			get
			{
				return this._Participants;
			}
			set
			{
				this._Participants.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserGroup", Storage="_UserGroups", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<UserGroup> UserGroups
		{
			get
			{
				return this._UserGroups;
			}
			set
			{
				this._UserGroups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Message", Storage="_Messages", ThisKey="ID", OtherKey="ReceiverID")]
		public EntitySet<Message> Messages
		{
			get
			{
				return this._Messages;
			}
			set
			{
				this._Messages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Message1", Storage="_Messages1", ThisKey="ID", OtherKey="SenderID")]
		public EntitySet<Message> Messages1
		{
			get
			{
				return this._Messages1;
			}
			set
			{
				this._Messages1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserGroupHistory", Storage="_UserGroupHistories", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<UserGroupHistory> UserGroupHistories
		{
			get
			{
				return this._UserGroupHistories;
			}
			set
			{
				this._UserGroupHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_TeamReplacement", Storage="_TeamReplacements", ThisKey="ID", OtherKey="UserInID")]
		public EntitySet<TeamReplacement> TeamReplacements
		{
			get
			{
				return this._TeamReplacements;
			}
			set
			{
				this._TeamReplacements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_TeamReplacement1", Storage="_TeamReplacements1", ThisKey="ID", OtherKey="UserOutID")]
		public EntitySet<TeamReplacement> TeamReplacements1
		{
			get
			{
				return this._TeamReplacements1;
			}
			set
			{
				this._TeamReplacements1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_MatchRoaster", Storage="_MatchRoasters", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<MatchRoaster> MatchRoasters
		{
			get
			{
				return this._MatchRoasters;
			}
			set
			{
				this._MatchRoasters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_NewLike", Storage="_NewLikes", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<NewLike> NewLikes
		{
			get
			{
				return this._NewLikes;
			}
			set
			{
				this._NewLikes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_BlogLike", Storage="_BlogLikes", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<BlogLike> BlogLikes
		{
			get
			{
				return this._BlogLikes;
			}
			set
			{
				this._BlogLikes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Photo", Storage="_Photos", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<Photo> Photos
		{
			get
			{
				return this._Photos;
			}
			set
			{
				this._Photos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_PhotoLike", Storage="_PhotoLikes", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<PhotoLike> PhotoLikes
		{
			get
			{
				return this._PhotoLikes;
			}
			set
			{
				this._PhotoLikes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_NoticeDistribution", Storage="_NoticeDistributions", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<NoticeDistribution> NoticeDistributions
		{
			get
			{
				return this._NoticeDistributions;
			}
			set
			{
				this._NoticeDistributions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ChatRoomLog", Storage="_ChatRoomLogs", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<ChatRoomLog> ChatRoomLogs
		{
			get
			{
				return this._ChatRoomLogs;
			}
			set
			{
				this._ChatRoomLogs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Poll", Storage="_Polls", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<Poll> Polls
		{
			get
			{
				return this._Polls;
			}
			set
			{
				this._Polls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserVideo", Storage="_UserVideos", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<UserVideo> UserVideos
		{
			get
			{
				return this._UserVideos;
			}
			set
			{
				this._UserVideos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Forum", Storage="_Forums", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<Forum> Forums
		{
			get
			{
				return this._Forums;
			}
			set
			{
				this._Forums.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_PhotoAlbum", Storage="_PhotoAlbums", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<PhotoAlbum> PhotoAlbums
		{
			get
			{
				return this._PhotoAlbums;
			}
			set
			{
				this._PhotoAlbums.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Blog", Storage="_Blogs", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<Blog> Blogs
		{
			get
			{
				return this._Blogs;
			}
			set
			{
				this._Blogs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_New", Storage="_News", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<New> News
		{
			get
			{
				return this._News;
			}
			set
			{
				this._News.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Video", Storage="_Videos", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<Video> Videos
		{
			get
			{
				return this._Videos;
			}
			set
			{
				this._Videos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Social", Storage="_Socials", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<Social> Socials
		{
			get
			{
				return this._Socials;
			}
			set
			{
				this._Socials.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Notice", Storage="_Notices", ThisKey="ID", OtherKey="ReceiverID")]
		public EntitySet<Notice> Notices
		{
			get
			{
				return this._Notices;
			}
			set
			{
				this._Notices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Notice1", Storage="_Notices1", ThisKey="ID", OtherKey="SenderID")]
		public EntitySet<Notice> Notices1
		{
			get
			{
				return this._Notices1;
			}
			set
			{
				this._Notices1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_SocialPost", Storage="_SocialPost", ThisKey="ID", OtherKey="ID", IsUnique=true, IsForeignKey=false)]
		public SocialPost SocialPost
		{
			get
			{
				return this._SocialPost.Entity;
			}
			set
			{
				SocialPost previousValue = this._SocialPost.Entity;
				if (((previousValue != value) 
							|| (this._SocialPost.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SocialPost.Entity = null;
						previousValue.User = null;
					}
					this._SocialPost.Entity = value;
					if ((value != null))
					{
						value.User = this;
					}
					this.SendPropertyChanged("SocialPost");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ForumMessage", Storage="_ForumMessages", ThisKey="ID", OtherKey="ModeratedByID")]
		public EntitySet<ForumMessage> ForumMessages
		{
			get
			{
				return this._ForumMessages;
			}
			set
			{
				this._ForumMessages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ForumMessage1", Storage="_ForumMessages1", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<ForumMessage> ForumMessages1
		{
			get
			{
				return this._ForumMessages1;
			}
			set
			{
				this._ForumMessages1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Group", Storage="_Groups", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<Group> Groups
		{
			get
			{
				return this._Groups;
			}
			set
			{
				this._Groups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_MoneyWithdraw", Storage="_MoneyWithdraws", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<MoneyWithdraw> MoneyWithdraws
		{
			get
			{
				return this._MoneyWithdraws;
			}
			set
			{
				this._MoneyWithdraws.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_MoneyDetail", Storage="_MoneyDetails", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<MoneyDetail> MoneyDetails
		{
			get
			{
				return this._MoneyDetails;
			}
			set
			{
				this._MoneyDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Recharge", Storage="_Recharges", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<Recharge> Recharges
		{
			get
			{
				return this._Recharges;
			}
			set
			{
				this._Recharges.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Cart", Storage="_Carts", ThisKey="ID", OtherKey="ManagerID")]
		public EntitySet<Cart> Carts
		{
			get
			{
				return this._Carts;
			}
			set
			{
				this._Carts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Cart1", Storage="_Carts1", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<Cart> Carts1
		{
			get
			{
				return this._Carts1;
			}
			set
			{
				this._Carts1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ProductReview", Storage="_ProductReviews", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<ProductReview> ProductReviews
		{
			get
			{
				return this._ProductReviews;
			}
			set
			{
				this._ProductReviews.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Friendships(Friendship entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Friendships(Friendship entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Friendships1(Friendship entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_Friendships1(Friendship entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_Grades(Grade entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Grades(Grade entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Grades1(Grade entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_Grades1(Grade entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_Reputations(Reputation entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Reputations(Reputation entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Reputations1(Reputation entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_Reputations1(Reputation entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_UserComments(UserComment entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserComments(UserComment entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserGames(UserGame entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserGames(UserGame entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Ratings(Rating entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Ratings(Rating entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_ForumLogs(ForumLog entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_ForumLogs(ForumLog entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_PollVotes(PollVote entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_PollVotes(PollVote entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Mails(Mail entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Mails(Mail entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Distributions(Distribution entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Distributions(Distribution entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_ChatMessages(ChatMessage entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_ChatMessages(ChatMessage entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_ChatBannedUsers(ChatBannedUser entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_ChatBannedUsers(ChatBannedUser entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Rounds(Round entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Rounds(Round entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserTeams(UserTeam entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserTeams(UserTeam entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserAwards(UserAward entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserAwards(UserAward entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Participants(Participant entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Participants(Participant entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserGroups(UserGroup entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserGroups(UserGroup entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Messages1(Message entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_Messages1(Message entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_UserGroupHistories(UserGroupHistory entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserGroupHistories(UserGroupHistory entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_TeamReplacements(TeamReplacement entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_TeamReplacements(TeamReplacement entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_TeamReplacements1(TeamReplacement entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_TeamReplacements1(TeamReplacement entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_MatchRoasters(MatchRoaster entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_MatchRoasters(MatchRoaster entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_NewLikes(NewLike entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_NewLikes(NewLike entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_BlogLikes(BlogLike entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_BlogLikes(BlogLike entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Photos(Photo entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Photos(Photo entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_PhotoLikes(PhotoLike entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_PhotoLikes(PhotoLike entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_NoticeDistributions(NoticeDistribution entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_NoticeDistributions(NoticeDistribution entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_ChatRoomLogs(ChatRoomLog entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_ChatRoomLogs(ChatRoomLog entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Polls(Poll entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Polls(Poll entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserVideos(UserVideo entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserVideos(UserVideo entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Forums(Forum entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Forums(Forum entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_PhotoAlbums(PhotoAlbum entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_PhotoAlbums(PhotoAlbum entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Blogs(Blog entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Blogs(Blog entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_News(New entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_News(New entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Videos(Video entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Videos(Video entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Socials(Social entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Socials(Social entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Notices(Notice entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Notices(Notice entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Notices1(Notice entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_Notices1(Notice entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_ForumMessages(ForumMessage entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_ForumMessages(ForumMessage entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_ForumMessages1(ForumMessage entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_ForumMessages1(ForumMessage entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_Groups(Group entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Groups(Group entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_MoneyWithdraws(MoneyWithdraw entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_MoneyWithdraws(MoneyWithdraw entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_MoneyDetails(MoneyDetail entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_MoneyDetails(MoneyDetail entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Recharges(Recharge entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Recharges(Recharge entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Carts(Cart entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Carts(Cart entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Carts1(Cart entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_Carts1(Cart entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_ProductReviews(ProductReview entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_ProductReviews(ProductReview entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MoneyDetail")]
	public partial class MoneyDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _MoneyFeeID;
		
		private System.Nullable<System.Guid> _GlobalUniqueID;
		
		private System.Nullable<int> _UserID;
		
		private System.Nullable<int> _GroupID;
		
		private System.Nullable<int> _CartID;
		
		private System.Nullable<int> _TournamentID;
		
		private System.Guid _Global;
		
		private double _SumGold;
		
		private double _SumWood;
		
		private double _SumCrystal;
		
		private string _Description;
		
		private System.DateTime _AddedDate;
		
		private bool _IsFee;
		
		private bool _Submited;
		
		private EntitySet<MoneyWithdraw> _MoneyWithdraws;
		
		private EntitySet<Recharge> _Recharges;
		
		private EntityRef<GlobalUnique> _GlobalUnique;
		
		private EntityRef<Group> _Group;
		
		private EntityRef<MoneyFee> _MoneyFee;
		
		private EntityRef<User> _User;
		
		private EntityRef<Cart> _Cart;
		
		private EntityRef<Tournament> _Tournament;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMoneyFeeIDChanging(System.Nullable<int> value);
    partial void OnMoneyFeeIDChanged();
    partial void OnGlobalUniqueIDChanging(System.Nullable<System.Guid> value);
    partial void OnGlobalUniqueIDChanged();
    partial void OnUserIDChanging(System.Nullable<int> value);
    partial void OnUserIDChanged();
    partial void OnGroupIDChanging(System.Nullable<int> value);
    partial void OnGroupIDChanged();
    partial void OnCartIDChanging(System.Nullable<int> value);
    partial void OnCartIDChanged();
    partial void OnTournamentIDChanging(System.Nullable<int> value);
    partial void OnTournamentIDChanged();
    partial void OnGlobalChanging(System.Guid value);
    partial void OnGlobalChanged();
    partial void OnSumGoldChanging(double value);
    partial void OnSumGoldChanged();
    partial void OnSumWoodChanging(double value);
    partial void OnSumWoodChanged();
    partial void OnSumCrystalChanging(double value);
    partial void OnSumCrystalChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnIsFeeChanging(bool value);
    partial void OnIsFeeChanged();
    partial void OnSubmitedChanging(bool value);
    partial void OnSubmitedChanged();
    #endregion
		
		public MoneyDetail()
		{
			this._MoneyWithdraws = new EntitySet<MoneyWithdraw>(new Action<MoneyWithdraw>(this.attach_MoneyWithdraws), new Action<MoneyWithdraw>(this.detach_MoneyWithdraws));
			this._Recharges = new EntitySet<Recharge>(new Action<Recharge>(this.attach_Recharges), new Action<Recharge>(this.detach_Recharges));
			this._GlobalUnique = default(EntityRef<GlobalUnique>);
			this._Group = default(EntityRef<Group>);
			this._MoneyFee = default(EntityRef<MoneyFee>);
			this._User = default(EntityRef<User>);
			this._Cart = default(EntityRef<Cart>);
			this._Tournament = default(EntityRef<Tournament>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MoneyFeeID", DbType="Int")]
		public System.Nullable<int> MoneyFeeID
		{
			get
			{
				return this._MoneyFeeID;
			}
			set
			{
				if ((this._MoneyFeeID != value))
				{
					if (this._MoneyFee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMoneyFeeIDChanging(value);
					this.SendPropertyChanging();
					this._MoneyFeeID = value;
					this.SendPropertyChanged("MoneyFeeID");
					this.OnMoneyFeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GlobalUniqueID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> GlobalUniqueID
		{
			get
			{
				return this._GlobalUniqueID;
			}
			set
			{
				if ((this._GlobalUniqueID != value))
				{
					if (this._GlobalUnique.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGlobalUniqueIDChanging(value);
					this.SendPropertyChanging();
					this._GlobalUniqueID = value;
					this.SendPropertyChanged("GlobalUniqueID");
					this.OnGlobalUniqueIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int")]
		public System.Nullable<int> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="Int")]
		public System.Nullable<int> GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CartID", DbType="Int")]
		public System.Nullable<int> CartID
		{
			get
			{
				return this._CartID;
			}
			set
			{
				if ((this._CartID != value))
				{
					if (this._Cart.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCartIDChanging(value);
					this.SendPropertyChanging();
					this._CartID = value;
					this.SendPropertyChanged("CartID");
					this.OnCartIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentID", DbType="Int")]
		public System.Nullable<int> TournamentID
		{
			get
			{
				return this._TournamentID;
			}
			set
			{
				if ((this._TournamentID != value))
				{
					if (this._Tournament.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTournamentIDChanging(value);
					this.SendPropertyChanging();
					this._TournamentID = value;
					this.SendPropertyChanged("TournamentID");
					this.OnTournamentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Global", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Global
		{
			get
			{
				return this._Global;
			}
			set
			{
				if ((this._Global != value))
				{
					this.OnGlobalChanging(value);
					this.SendPropertyChanging();
					this._Global = value;
					this.SendPropertyChanged("Global");
					this.OnGlobalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SumGold", DbType="Float NOT NULL")]
		public double SumGold
		{
			get
			{
				return this._SumGold;
			}
			set
			{
				if ((this._SumGold != value))
				{
					this.OnSumGoldChanging(value);
					this.SendPropertyChanging();
					this._SumGold = value;
					this.SendPropertyChanged("SumGold");
					this.OnSumGoldChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SumWood", DbType="Float NOT NULL")]
		public double SumWood
		{
			get
			{
				return this._SumWood;
			}
			set
			{
				if ((this._SumWood != value))
				{
					this.OnSumWoodChanging(value);
					this.SendPropertyChanging();
					this._SumWood = value;
					this.SendPropertyChanged("SumWood");
					this.OnSumWoodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SumCrystal", DbType="Float NOT NULL")]
		public double SumCrystal
		{
			get
			{
				return this._SumCrystal;
			}
			set
			{
				if ((this._SumCrystal != value))
				{
					this.OnSumCrystalChanging(value);
					this.SendPropertyChanging();
					this._SumCrystal = value;
					this.SendPropertyChanged("SumCrystal");
					this.OnSumCrystalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(1500) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsFee", DbType="Bit NOT NULL")]
		public bool IsFee
		{
			get
			{
				return this._IsFee;
			}
			set
			{
				if ((this._IsFee != value))
				{
					this.OnIsFeeChanging(value);
					this.SendPropertyChanging();
					this._IsFee = value;
					this.SendPropertyChanged("IsFee");
					this.OnIsFeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Submited", DbType="Bit NOT NULL")]
		public bool Submited
		{
			get
			{
				return this._Submited;
			}
			set
			{
				if ((this._Submited != value))
				{
					this.OnSubmitedChanging(value);
					this.SendPropertyChanging();
					this._Submited = value;
					this.SendPropertyChanged("Submited");
					this.OnSubmitedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MoneyDetail_MoneyWithdraw", Storage="_MoneyWithdraws", ThisKey="ID", OtherKey="MoneyDetailID")]
		public EntitySet<MoneyWithdraw> MoneyWithdraws
		{
			get
			{
				return this._MoneyWithdraws;
			}
			set
			{
				this._MoneyWithdraws.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MoneyDetail_Recharge", Storage="_Recharges", ThisKey="ID", OtherKey="MoneyDetailID")]
		public EntitySet<Recharge> Recharges
		{
			get
			{
				return this._Recharges;
			}
			set
			{
				this._Recharges.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GlobalUnique_MoneyDetail", Storage="_GlobalUnique", ThisKey="GlobalUniqueID", OtherKey="ID", IsForeignKey=true)]
		public GlobalUnique GlobalUnique
		{
			get
			{
				return this._GlobalUnique.Entity;
			}
			set
			{
				GlobalUnique previousValue = this._GlobalUnique.Entity;
				if (((previousValue != value) 
							|| (this._GlobalUnique.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GlobalUnique.Entity = null;
						previousValue.MoneyDetails.Remove(this);
					}
					this._GlobalUnique.Entity = value;
					if ((value != null))
					{
						value.MoneyDetails.Add(this);
						this._GlobalUniqueID = value.ID;
					}
					else
					{
						this._GlobalUniqueID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("GlobalUnique");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_MoneyDetail", Storage="_Group", ThisKey="GroupID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.MoneyDetails.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.MoneyDetails.Add(this);
						this._GroupID = value.ID;
					}
					else
					{
						this._GroupID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MoneyFee_MoneyDetail", Storage="_MoneyFee", ThisKey="MoneyFeeID", OtherKey="ID", IsForeignKey=true)]
		public MoneyFee MoneyFee
		{
			get
			{
				return this._MoneyFee.Entity;
			}
			set
			{
				MoneyFee previousValue = this._MoneyFee.Entity;
				if (((previousValue != value) 
							|| (this._MoneyFee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MoneyFee.Entity = null;
						previousValue.MoneyDetails.Remove(this);
					}
					this._MoneyFee.Entity = value;
					if ((value != null))
					{
						value.MoneyDetails.Add(this);
						this._MoneyFeeID = value.ID;
					}
					else
					{
						this._MoneyFeeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("MoneyFee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_MoneyDetail", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.MoneyDetails.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.MoneyDetails.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cart_MoneyDetail", Storage="_Cart", ThisKey="CartID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Cart Cart
		{
			get
			{
				return this._Cart.Entity;
			}
			set
			{
				Cart previousValue = this._Cart.Entity;
				if (((previousValue != value) 
							|| (this._Cart.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cart.Entity = null;
						previousValue.MoneyDetails.Remove(this);
					}
					this._Cart.Entity = value;
					if ((value != null))
					{
						value.MoneyDetails.Add(this);
						this._CartID = value.ID;
					}
					else
					{
						this._CartID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Cart");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tournament_MoneyDetail", Storage="_Tournament", ThisKey="TournamentID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Tournament Tournament
		{
			get
			{
				return this._Tournament.Entity;
			}
			set
			{
				Tournament previousValue = this._Tournament.Entity;
				if (((previousValue != value) 
							|| (this._Tournament.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tournament.Entity = null;
						previousValue.MoneyDetails.Remove(this);
					}
					this._Tournament.Entity = value;
					if ((value != null))
					{
						value.MoneyDetails.Add(this);
						this._TournamentID = value.ID;
					}
					else
					{
						this._TournamentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Tournament");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MoneyWithdraws(MoneyWithdraw entity)
		{
			this.SendPropertyChanging();
			entity.MoneyDetail = this;
		}
		
		private void detach_MoneyWithdraws(MoneyWithdraw entity)
		{
			this.SendPropertyChanging();
			entity.MoneyDetail = null;
		}
		
		private void attach_Recharges(Recharge entity)
		{
			this.SendPropertyChanging();
			entity.MoneyDetail = this;
		}
		
		private void detach_Recharges(Recharge entity)
		{
			this.SendPropertyChanging();
			entity.MoneyDetail = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Recharge")]
	public partial class Recharge : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _UserID;
		
		private System.Nullable<System.Guid> _GlobalUniqueID;
		
		private System.Nullable<int> _MoneyDetailID;
		
		private System.Nullable<int> _CartID;
		
		private System.DateTime _AddedDate;
		
		private double _Sum;
		
		private bool _IsSubmitted;
		
		private string _Description;
		
		private int _Provider;
		
		private string _AdditionalInfo;
		
		private EntityRef<GlobalUnique> _GlobalUnique;
		
		private EntityRef<MoneyDetail> _MoneyDetail;
		
		private EntityRef<User> _User;
		
		private EntityRef<Cart> _Cart;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(System.Nullable<int> value);
    partial void OnUserIDChanged();
    partial void OnGlobalUniqueIDChanging(System.Nullable<System.Guid> value);
    partial void OnGlobalUniqueIDChanged();
    partial void OnMoneyDetailIDChanging(System.Nullable<int> value);
    partial void OnMoneyDetailIDChanged();
    partial void OnCartIDChanging(System.Nullable<int> value);
    partial void OnCartIDChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnSumChanging(double value);
    partial void OnSumChanged();
    partial void OnIsSubmittedChanging(bool value);
    partial void OnIsSubmittedChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnProviderChanging(int value);
    partial void OnProviderChanged();
    partial void OnAdditionalInfoChanging(string value);
    partial void OnAdditionalInfoChanged();
    #endregion
		
		public Recharge()
		{
			this._GlobalUnique = default(EntityRef<GlobalUnique>);
			this._MoneyDetail = default(EntityRef<MoneyDetail>);
			this._User = default(EntityRef<User>);
			this._Cart = default(EntityRef<Cart>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int")]
		public System.Nullable<int> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GlobalUniqueID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> GlobalUniqueID
		{
			get
			{
				return this._GlobalUniqueID;
			}
			set
			{
				if ((this._GlobalUniqueID != value))
				{
					if (this._GlobalUnique.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGlobalUniqueIDChanging(value);
					this.SendPropertyChanging();
					this._GlobalUniqueID = value;
					this.SendPropertyChanged("GlobalUniqueID");
					this.OnGlobalUniqueIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MoneyDetailID", DbType="Int")]
		public System.Nullable<int> MoneyDetailID
		{
			get
			{
				return this._MoneyDetailID;
			}
			set
			{
				if ((this._MoneyDetailID != value))
				{
					if (this._MoneyDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMoneyDetailIDChanging(value);
					this.SendPropertyChanging();
					this._MoneyDetailID = value;
					this.SendPropertyChanged("MoneyDetailID");
					this.OnMoneyDetailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CartID", DbType="Int")]
		public System.Nullable<int> CartID
		{
			get
			{
				return this._CartID;
			}
			set
			{
				if ((this._CartID != value))
				{
					if (this._Cart.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCartIDChanging(value);
					this.SendPropertyChanging();
					this._CartID = value;
					this.SendPropertyChanged("CartID");
					this.OnCartIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sum", DbType="Float NOT NULL")]
		public double Sum
		{
			get
			{
				return this._Sum;
			}
			set
			{
				if ((this._Sum != value))
				{
					this.OnSumChanging(value);
					this.SendPropertyChanging();
					this._Sum = value;
					this.SendPropertyChanged("Sum");
					this.OnSumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSubmitted", DbType="Bit NOT NULL")]
		public bool IsSubmitted
		{
			get
			{
				return this._IsSubmitted;
			}
			set
			{
				if ((this._IsSubmitted != value))
				{
					this.OnIsSubmittedChanging(value);
					this.SendPropertyChanging();
					this._IsSubmitted = value;
					this.SendPropertyChanged("IsSubmitted");
					this.OnIsSubmittedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Provider", DbType="Int NOT NULL")]
		public int Provider
		{
			get
			{
				return this._Provider;
			}
			set
			{
				if ((this._Provider != value))
				{
					this.OnProviderChanging(value);
					this.SendPropertyChanging();
					this._Provider = value;
					this.SendPropertyChanged("Provider");
					this.OnProviderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdditionalInfo", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string AdditionalInfo
		{
			get
			{
				return this._AdditionalInfo;
			}
			set
			{
				if ((this._AdditionalInfo != value))
				{
					this.OnAdditionalInfoChanging(value);
					this.SendPropertyChanging();
					this._AdditionalInfo = value;
					this.SendPropertyChanged("AdditionalInfo");
					this.OnAdditionalInfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GlobalUnique_Recharge", Storage="_GlobalUnique", ThisKey="GlobalUniqueID", OtherKey="ID", IsForeignKey=true)]
		public GlobalUnique GlobalUnique
		{
			get
			{
				return this._GlobalUnique.Entity;
			}
			set
			{
				GlobalUnique previousValue = this._GlobalUnique.Entity;
				if (((previousValue != value) 
							|| (this._GlobalUnique.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GlobalUnique.Entity = null;
						previousValue.Recharges.Remove(this);
					}
					this._GlobalUnique.Entity = value;
					if ((value != null))
					{
						value.Recharges.Add(this);
						this._GlobalUniqueID = value.ID;
					}
					else
					{
						this._GlobalUniqueID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("GlobalUnique");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MoneyDetail_Recharge", Storage="_MoneyDetail", ThisKey="MoneyDetailID", OtherKey="ID", IsForeignKey=true)]
		public MoneyDetail MoneyDetail
		{
			get
			{
				return this._MoneyDetail.Entity;
			}
			set
			{
				MoneyDetail previousValue = this._MoneyDetail.Entity;
				if (((previousValue != value) 
							|| (this._MoneyDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MoneyDetail.Entity = null;
						previousValue.Recharges.Remove(this);
					}
					this._MoneyDetail.Entity = value;
					if ((value != null))
					{
						value.Recharges.Add(this);
						this._MoneyDetailID = value.ID;
					}
					else
					{
						this._MoneyDetailID = default(Nullable<int>);
					}
					this.SendPropertyChanged("MoneyDetail");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Recharge", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Recharges.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Recharges.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cart_Recharge", Storage="_Cart", ThisKey="CartID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Cart Cart
		{
			get
			{
				return this._Cart.Entity;
			}
			set
			{
				Cart previousValue = this._Cart.Entity;
				if (((previousValue != value) 
							|| (this._Cart.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cart.Entity = null;
						previousValue.Recharges.Remove(this);
					}
					this._Cart.Entity = value;
					if ((value != null))
					{
						value.Recharges.Add(this);
						this._CartID = value.ID;
					}
					else
					{
						this._CartID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Cart");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cart")]
	public partial class Cart : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Guid _GlobalUniqueID;
		
		private System.DateTime _AddedDate;
		
		private System.DateTime _LastVisitDate;
		
		private int _OrderType;
		
		private int _PaymentType;
		
		private System.Nullable<int> _UserID;
		
		private System.Nullable<int> _ManagerID;
		
		private System.Nullable<int> _PromoCodeID;
		
		private string _Address;
		
		private string _Phone;
		
		private string _Email;
		
		private System.Nullable<System.DateTime> _DeliverTime;
		
		private System.Nullable<int> _Cashback;
		
		private bool _CreatedByManager;
		
		private System.Nullable<double> _DeliverCost;
		
		private string _Notice;
		
		private double _TotalPrice;
		
		private EntitySet<MoneyDetail> _MoneyDetails;
		
		private EntitySet<Recharge> _Recharges;
		
		private EntitySet<CartProduct> _CartProducts;
		
		private EntityRef<GlobalUnique> _GlobalUnique;
		
		private EntityRef<User> _User;
		
		private EntityRef<PromoCode> _PromoCode;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnGlobalUniqueIDChanging(System.Guid value);
    partial void OnGlobalUniqueIDChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnLastVisitDateChanging(System.DateTime value);
    partial void OnLastVisitDateChanged();
    partial void OnOrderTypeChanging(int value);
    partial void OnOrderTypeChanged();
    partial void OnPaymentTypeChanging(int value);
    partial void OnPaymentTypeChanged();
    partial void OnUserIDChanging(System.Nullable<int> value);
    partial void OnUserIDChanged();
    partial void OnManagerIDChanging(System.Nullable<int> value);
    partial void OnManagerIDChanged();
    partial void OnPromoCodeIDChanging(System.Nullable<int> value);
    partial void OnPromoCodeIDChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnDeliverTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnDeliverTimeChanged();
    partial void OnCashbackChanging(System.Nullable<int> value);
    partial void OnCashbackChanged();
    partial void OnCreatedByManagerChanging(bool value);
    partial void OnCreatedByManagerChanged();
    partial void OnDeliverCostChanging(System.Nullable<double> value);
    partial void OnDeliverCostChanged();
    partial void OnNoticeChanging(string value);
    partial void OnNoticeChanged();
    partial void OnTotalPriceChanging(double value);
    partial void OnTotalPriceChanged();
    #endregion
		
		public Cart()
		{
			this._MoneyDetails = new EntitySet<MoneyDetail>(new Action<MoneyDetail>(this.attach_MoneyDetails), new Action<MoneyDetail>(this.detach_MoneyDetails));
			this._Recharges = new EntitySet<Recharge>(new Action<Recharge>(this.attach_Recharges), new Action<Recharge>(this.detach_Recharges));
			this._CartProducts = new EntitySet<CartProduct>(new Action<CartProduct>(this.attach_CartProducts), new Action<CartProduct>(this.detach_CartProducts));
			this._GlobalUnique = default(EntityRef<GlobalUnique>);
			this._User = default(EntityRef<User>);
			this._PromoCode = default(EntityRef<PromoCode>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GlobalUniqueID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid GlobalUniqueID
		{
			get
			{
				return this._GlobalUniqueID;
			}
			set
			{
				if ((this._GlobalUniqueID != value))
				{
					if (this._GlobalUnique.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGlobalUniqueIDChanging(value);
					this.SendPropertyChanging();
					this._GlobalUniqueID = value;
					this.SendPropertyChanged("GlobalUniqueID");
					this.OnGlobalUniqueIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastVisitDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastVisitDate
		{
			get
			{
				return this._LastVisitDate;
			}
			set
			{
				if ((this._LastVisitDate != value))
				{
					this.OnLastVisitDateChanging(value);
					this.SendPropertyChanging();
					this._LastVisitDate = value;
					this.SendPropertyChanged("LastVisitDate");
					this.OnLastVisitDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderType", DbType="Int NOT NULL")]
		public int OrderType
		{
			get
			{
				return this._OrderType;
			}
			set
			{
				if ((this._OrderType != value))
				{
					this.OnOrderTypeChanging(value);
					this.SendPropertyChanging();
					this._OrderType = value;
					this.SendPropertyChanged("OrderType");
					this.OnOrderTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentType", DbType="Int NOT NULL")]
		public int PaymentType
		{
			get
			{
				return this._PaymentType;
			}
			set
			{
				if ((this._PaymentType != value))
				{
					this.OnPaymentTypeChanging(value);
					this.SendPropertyChanging();
					this._PaymentType = value;
					this.SendPropertyChanged("PaymentType");
					this.OnPaymentTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int")]
		public System.Nullable<int> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManagerID", DbType="Int")]
		public System.Nullable<int> ManagerID
		{
			get
			{
				return this._ManagerID;
			}
			set
			{
				if ((this._ManagerID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnManagerIDChanging(value);
					this.SendPropertyChanging();
					this._ManagerID = value;
					this.SendPropertyChanged("ManagerID");
					this.OnManagerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PromoCodeID", DbType="Int")]
		public System.Nullable<int> PromoCodeID
		{
			get
			{
				return this._PromoCodeID;
			}
			set
			{
				if ((this._PromoCodeID != value))
				{
					if (this._PromoCode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPromoCodeIDChanging(value);
					this.SendPropertyChanging();
					this._PromoCodeID = value;
					this.SendPropertyChanged("PromoCodeID");
					this.OnPromoCodeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(MAX)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(50)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(500)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeliverTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeliverTime
		{
			get
			{
				return this._DeliverTime;
			}
			set
			{
				if ((this._DeliverTime != value))
				{
					this.OnDeliverTimeChanging(value);
					this.SendPropertyChanging();
					this._DeliverTime = value;
					this.SendPropertyChanged("DeliverTime");
					this.OnDeliverTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cashback", DbType="Int")]
		public System.Nullable<int> Cashback
		{
			get
			{
				return this._Cashback;
			}
			set
			{
				if ((this._Cashback != value))
				{
					this.OnCashbackChanging(value);
					this.SendPropertyChanging();
					this._Cashback = value;
					this.SendPropertyChanged("Cashback");
					this.OnCashbackChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedByManager", DbType="Bit NOT NULL")]
		public bool CreatedByManager
		{
			get
			{
				return this._CreatedByManager;
			}
			set
			{
				if ((this._CreatedByManager != value))
				{
					this.OnCreatedByManagerChanging(value);
					this.SendPropertyChanging();
					this._CreatedByManager = value;
					this.SendPropertyChanged("CreatedByManager");
					this.OnCreatedByManagerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeliverCost", DbType="Float")]
		public System.Nullable<double> DeliverCost
		{
			get
			{
				return this._DeliverCost;
			}
			set
			{
				if ((this._DeliverCost != value))
				{
					this.OnDeliverCostChanging(value);
					this.SendPropertyChanging();
					this._DeliverCost = value;
					this.SendPropertyChanged("DeliverCost");
					this.OnDeliverCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notice", DbType="NVarChar(MAX)")]
		public string Notice
		{
			get
			{
				return this._Notice;
			}
			set
			{
				if ((this._Notice != value))
				{
					this.OnNoticeChanging(value);
					this.SendPropertyChanging();
					this._Notice = value;
					this.SendPropertyChanged("Notice");
					this.OnNoticeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalPrice", DbType="Float NOT NULL")]
		public double TotalPrice
		{
			get
			{
				return this._TotalPrice;
			}
			set
			{
				if ((this._TotalPrice != value))
				{
					this.OnTotalPriceChanging(value);
					this.SendPropertyChanging();
					this._TotalPrice = value;
					this.SendPropertyChanged("TotalPrice");
					this.OnTotalPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cart_MoneyDetail", Storage="_MoneyDetails", ThisKey="ID", OtherKey="CartID")]
		public EntitySet<MoneyDetail> MoneyDetails
		{
			get
			{
				return this._MoneyDetails;
			}
			set
			{
				this._MoneyDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cart_Recharge", Storage="_Recharges", ThisKey="ID", OtherKey="CartID")]
		public EntitySet<Recharge> Recharges
		{
			get
			{
				return this._Recharges;
			}
			set
			{
				this._Recharges.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cart_CartProduct", Storage="_CartProducts", ThisKey="ID", OtherKey="CartID")]
		public EntitySet<CartProduct> CartProducts
		{
			get
			{
				return this._CartProducts;
			}
			set
			{
				this._CartProducts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GlobalUnique_Cart", Storage="_GlobalUnique", ThisKey="GlobalUniqueID", OtherKey="ID", IsForeignKey=true)]
		public GlobalUnique GlobalUnique
		{
			get
			{
				return this._GlobalUnique.Entity;
			}
			set
			{
				GlobalUnique previousValue = this._GlobalUnique.Entity;
				if (((previousValue != value) 
							|| (this._GlobalUnique.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GlobalUnique.Entity = null;
						previousValue.Carts.Remove(this);
					}
					this._GlobalUnique.Entity = value;
					if ((value != null))
					{
						value.Carts.Add(this);
						this._GlobalUniqueID = value.ID;
					}
					else
					{
						this._GlobalUniqueID = default(System.Guid);
					}
					this.SendPropertyChanged("GlobalUnique");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Cart", Storage="_User", ThisKey="ManagerID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Carts.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Carts.Add(this);
						this._ManagerID = value.ID;
					}
					else
					{
						this._ManagerID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PromoCode_Cart", Storage="_PromoCode", ThisKey="PromoCodeID", OtherKey="ID", IsForeignKey=true, DeleteRule="SET NULL")]
		public PromoCode PromoCode
		{
			get
			{
				return this._PromoCode.Entity;
			}
			set
			{
				PromoCode previousValue = this._PromoCode.Entity;
				if (((previousValue != value) 
							|| (this._PromoCode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PromoCode.Entity = null;
						previousValue.Carts.Remove(this);
					}
					this._PromoCode.Entity = value;
					if ((value != null))
					{
						value.Carts.Add(this);
						this._PromoCodeID = value.ID;
					}
					else
					{
						this._PromoCodeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("PromoCode");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Cart1", Storage="_User1", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.Carts1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.Carts1.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MoneyDetails(MoneyDetail entity)
		{
			this.SendPropertyChanging();
			entity.Cart = this;
		}
		
		private void detach_MoneyDetails(MoneyDetail entity)
		{
			this.SendPropertyChanging();
			entity.Cart = null;
		}
		
		private void attach_Recharges(Recharge entity)
		{
			this.SendPropertyChanging();
			entity.Cart = this;
		}
		
		private void detach_Recharges(Recharge entity)
		{
			this.SendPropertyChanging();
			entity.Cart = null;
		}
		
		private void attach_CartProducts(CartProduct entity)
		{
			this.SendPropertyChanging();
			entity.Cart = this;
		}
		
		private void detach_CartProducts(CartProduct entity)
		{
			this.SendPropertyChanging();
			entity.Cart = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductCatalog")]
	public partial class ProductCatalog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ProductID;
		
		private int _CatalogID;
		
		private EntityRef<Catalog> _Catalog;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnCatalogIDChanging(int value);
    partial void OnCatalogIDChanged();
    #endregion
		
		public ProductCatalog()
		{
			this._Catalog = default(EntityRef<Catalog>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="Int NOT NULL")]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CatalogID", DbType="Int NOT NULL")]
		public int CatalogID
		{
			get
			{
				return this._CatalogID;
			}
			set
			{
				if ((this._CatalogID != value))
				{
					if (this._Catalog.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCatalogIDChanging(value);
					this.SendPropertyChanging();
					this._CatalogID = value;
					this.SendPropertyChanged("CatalogID");
					this.OnCatalogIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Catalog_ProductCatalog", Storage="_Catalog", ThisKey="CatalogID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Catalog Catalog
		{
			get
			{
				return this._Catalog.Entity;
			}
			set
			{
				Catalog previousValue = this._Catalog.Entity;
				if (((previousValue != value) 
							|| (this._Catalog.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Catalog.Entity = null;
						previousValue.ProductCatalogs.Remove(this);
					}
					this._Catalog.Entity = value;
					if ((value != null))
					{
						value.ProductCatalogs.Add(this);
						this._CatalogID = value.ID;
					}
					else
					{
						this._CatalogID = default(int);
					}
					this.SendPropertyChanged("Catalog");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductCatalog", Storage="_Product", ThisKey="ProductID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ProductCatalogs.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ProductCatalogs.Add(this);
						this._ProductID = value.ID;
					}
					else
					{
						this._ProductID = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Category")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Url;
		
		private EntitySet<Product> _Products;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    #endregion
		
		public Category()
		{
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Product", Storage="_Products", ThisKey="ID", OtherKey="CategoryID")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductImage")]
	public partial class ProductImage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ProductID;
		
		private string _Image;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    #endregion
		
		public ProductImage()
		{
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="Int NOT NULL")]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductImage", Storage="_Product", ThisKey="ProductID", OtherKey="ID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ProductImages.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ProductImages.Add(this);
						this._ProductID = value.ID;
					}
					else
					{
						this._ProductID = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductReview")]
	public partial class ProductReview : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ProductID;
		
		private int _UserID;
		
		private System.DateTime _AddedDate;
		
		private string _Text;
		
		private EntityRef<User> _User;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    #endregion
		
		public ProductReview()
		{
			this._User = default(EntityRef<User>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="Int NOT NULL")]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ProductReview", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.ProductReviews.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.ProductReviews.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductReview", Storage="_Product", ThisKey="ProductID", OtherKey="ID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ProductReviews.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ProductReviews.Add(this);
						this._ProductID = value.ID;
					}
					else
					{
						this._ProductID = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Catalog")]
	public partial class Catalog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<ProductCatalog> _ProductCatalogs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Catalog()
		{
			this._ProductCatalogs = new EntitySet<ProductCatalog>(new Action<ProductCatalog>(this.attach_ProductCatalogs), new Action<ProductCatalog>(this.detach_ProductCatalogs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Catalog_ProductCatalog", Storage="_ProductCatalogs", ThisKey="ID", OtherKey="CatalogID")]
		public EntitySet<ProductCatalog> ProductCatalogs
		{
			get
			{
				return this._ProductCatalogs;
			}
			set
			{
				this._ProductCatalogs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProductCatalogs(ProductCatalog entity)
		{
			this.SendPropertyChanging();
			entity.Catalog = this;
		}
		
		private void detach_ProductCatalogs(ProductCatalog entity)
		{
			this.SendPropertyChanging();
			entity.Catalog = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Vendor")]
	public partial class Vendor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Text;
		
		private EntitySet<Product> _Products;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    #endregion
		
		public Vendor()
		{
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Vendor_Product", Storage="_Products", ThisKey="ID", OtherKey="VendorID")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Vendor = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Vendor = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductVariation")]
	public partial class ProductVariation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ProductID;
		
		private string _Image;
		
		private bool _IsDeleted;
		
		private EntitySet<ProductCode> _ProductCodes;
		
		private EntitySet<CartProduct> _CartProducts;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public ProductVariation()
		{
			this._ProductCodes = new EntitySet<ProductCode>(new Action<ProductCode>(this.attach_ProductCodes), new Action<ProductCode>(this.detach_ProductCodes));
			this._CartProducts = new EntitySet<CartProduct>(new Action<CartProduct>(this.attach_CartProducts), new Action<CartProduct>(this.detach_CartProducts));
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="Int NOT NULL")]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductVariation_ProductCode", Storage="_ProductCodes", ThisKey="ID", OtherKey="ProductVariationID")]
		public EntitySet<ProductCode> ProductCodes
		{
			get
			{
				return this._ProductCodes;
			}
			set
			{
				this._ProductCodes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductVariation_CartProduct", Storage="_CartProducts", ThisKey="ID", OtherKey="ProductVariationID")]
		public EntitySet<CartProduct> CartProducts
		{
			get
			{
				return this._CartProducts;
			}
			set
			{
				this._CartProducts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductVariation", Storage="_Product", ThisKey="ProductID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ProductVariations.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ProductVariations.Add(this);
						this._ProductID = value.ID;
					}
					else
					{
						this._ProductID = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProductCodes(ProductCode entity)
		{
			this.SendPropertyChanging();
			entity.ProductVariation = this;
		}
		
		private void detach_ProductCodes(ProductCode entity)
		{
			this.SendPropertyChanging();
			entity.ProductVariation = null;
		}
		
		private void attach_CartProducts(CartProduct entity)
		{
			this.SendPropertyChanging();
			entity.ProductVariation = this;
		}
		
		private void detach_CartProducts(CartProduct entity)
		{
			this.SendPropertyChanging();
			entity.ProductVariation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductVideo")]
	public partial class ProductVideo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ProductID;
		
		private string _VideoUrl;
		
		private string _VideoThumb;
		
		private string _VideoCode;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnVideoUrlChanging(string value);
    partial void OnVideoUrlChanged();
    partial void OnVideoThumbChanging(string value);
    partial void OnVideoThumbChanged();
    partial void OnVideoCodeChanging(string value);
    partial void OnVideoCodeChanged();
    #endregion
		
		public ProductVideo()
		{
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="Int NOT NULL")]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VideoUrl", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string VideoUrl
		{
			get
			{
				return this._VideoUrl;
			}
			set
			{
				if ((this._VideoUrl != value))
				{
					this.OnVideoUrlChanging(value);
					this.SendPropertyChanging();
					this._VideoUrl = value;
					this.SendPropertyChanged("VideoUrl");
					this.OnVideoUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VideoThumb", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string VideoThumb
		{
			get
			{
				return this._VideoThumb;
			}
			set
			{
				if ((this._VideoThumb != value))
				{
					this.OnVideoThumbChanging(value);
					this.SendPropertyChanging();
					this._VideoThumb = value;
					this.SendPropertyChanged("VideoThumb");
					this.OnVideoThumbChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VideoCode", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string VideoCode
		{
			get
			{
				return this._VideoCode;
			}
			set
			{
				if ((this._VideoCode != value))
				{
					this.OnVideoCodeChanging(value);
					this.SendPropertyChanging();
					this._VideoCode = value;
					this.SendPropertyChanged("VideoCode");
					this.OnVideoCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductVideo", Storage="_Product", ThisKey="ProductID", OtherKey="ID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ProductVideos.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ProductVideos.Add(this);
						this._ProductID = value.ID;
					}
					else
					{
						this._ProductID = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductCode")]
	public partial class ProductCode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ProductID;
		
		private int _ProductPriceID;
		
		private System.Nullable<int> _ProductVariationID;
		
		private System.Nullable<int> _CartProductID;
		
		private string _Code;
		
		private string _Image;
		
		private System.DateTime _AddedDate;
		
		private bool _IsSelled;
		
		private EntityRef<ProductVariation> _ProductVariation;
		
		private EntityRef<Product> _Product;
		
		private EntityRef<CartProduct> _CartProduct;
		
		private EntityRef<ProductPrice> _ProductPrice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnProductPriceIDChanging(int value);
    partial void OnProductPriceIDChanged();
    partial void OnProductVariationIDChanging(System.Nullable<int> value);
    partial void OnProductVariationIDChanged();
    partial void OnCartProductIDChanging(System.Nullable<int> value);
    partial void OnCartProductIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnIsSelledChanging(bool value);
    partial void OnIsSelledChanged();
    #endregion
		
		public ProductCode()
		{
			this._ProductVariation = default(EntityRef<ProductVariation>);
			this._Product = default(EntityRef<Product>);
			this._CartProduct = default(EntityRef<CartProduct>);
			this._ProductPrice = default(EntityRef<ProductPrice>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="Int NOT NULL")]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductPriceID", DbType="Int NOT NULL")]
		public int ProductPriceID
		{
			get
			{
				return this._ProductPriceID;
			}
			set
			{
				if ((this._ProductPriceID != value))
				{
					if (this._ProductPrice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductPriceIDChanging(value);
					this.SendPropertyChanging();
					this._ProductPriceID = value;
					this.SendPropertyChanged("ProductPriceID");
					this.OnProductPriceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductVariationID", DbType="Int")]
		public System.Nullable<int> ProductVariationID
		{
			get
			{
				return this._ProductVariationID;
			}
			set
			{
				if ((this._ProductVariationID != value))
				{
					if (this._ProductVariation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductVariationIDChanging(value);
					this.SendPropertyChanging();
					this._ProductVariationID = value;
					this.SendPropertyChanged("ProductVariationID");
					this.OnProductVariationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CartProductID", DbType="Int")]
		public System.Nullable<int> CartProductID
		{
			get
			{
				return this._CartProductID;
			}
			set
			{
				if ((this._CartProductID != value))
				{
					if (this._CartProduct.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCartProductIDChanging(value);
					this.SendPropertyChanging();
					this._CartProductID = value;
					this.SendPropertyChanged("CartProductID");
					this.OnCartProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="NVarChar(150)")]
		public string Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSelled", DbType="Bit NOT NULL")]
		public bool IsSelled
		{
			get
			{
				return this._IsSelled;
			}
			set
			{
				if ((this._IsSelled != value))
				{
					this.OnIsSelledChanging(value);
					this.SendPropertyChanging();
					this._IsSelled = value;
					this.SendPropertyChanged("IsSelled");
					this.OnIsSelledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductVariation_ProductCode", Storage="_ProductVariation", ThisKey="ProductVariationID", OtherKey="ID", IsForeignKey=true)]
		public ProductVariation ProductVariation
		{
			get
			{
				return this._ProductVariation.Entity;
			}
			set
			{
				ProductVariation previousValue = this._ProductVariation.Entity;
				if (((previousValue != value) 
							|| (this._ProductVariation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductVariation.Entity = null;
						previousValue.ProductCodes.Remove(this);
					}
					this._ProductVariation.Entity = value;
					if ((value != null))
					{
						value.ProductCodes.Add(this);
						this._ProductVariationID = value.ID;
					}
					else
					{
						this._ProductVariationID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProductVariation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductCode", Storage="_Product", ThisKey="ProductID", OtherKey="ID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ProductCodes.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ProductCodes.Add(this);
						this._ProductID = value.ID;
					}
					else
					{
						this._ProductID = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CartProduct_ProductCode", Storage="_CartProduct", ThisKey="CartProductID", OtherKey="ID", IsForeignKey=true, DeleteRule="SET NULL")]
		public CartProduct CartProduct
		{
			get
			{
				return this._CartProduct.Entity;
			}
			set
			{
				CartProduct previousValue = this._CartProduct.Entity;
				if (((previousValue != value) 
							|| (this._CartProduct.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CartProduct.Entity = null;
						previousValue.ProductCodes.Remove(this);
					}
					this._CartProduct.Entity = value;
					if ((value != null))
					{
						value.ProductCodes.Add(this);
						this._CartProductID = value.ID;
					}
					else
					{
						this._CartProductID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CartProduct");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductPrice_ProductCode", Storage="_ProductPrice", ThisKey="ProductPriceID", OtherKey="ID", IsForeignKey=true)]
		public ProductPrice ProductPrice
		{
			get
			{
				return this._ProductPrice.Entity;
			}
			set
			{
				ProductPrice previousValue = this._ProductPrice.Entity;
				if (((previousValue != value) 
							|| (this._ProductPrice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductPrice.Entity = null;
						previousValue.ProductCodes.Remove(this);
					}
					this._ProductPrice.Entity = value;
					if ((value != null))
					{
						value.ProductCodes.Add(this);
						this._ProductPriceID = value.ID;
					}
					else
					{
						this._ProductPriceID = default(int);
					}
					this.SendPropertyChanged("ProductPrice");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Product")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _GameID;
		
		private System.Nullable<int> _CategoryID;
		
		private System.Nullable<int> _VendorID;
		
		private int _Type;
		
		private string _Name;
		
		private string _Url;
		
		private string _SubTitle;
		
		private string _Image;
		
		private string _Description;
		
		private string _SmsName;
		
		private string _Background;
		
		private System.Nullable<System.DateTime> _ReleaseDate;
		
		private string _SystemRequirements;
		
		private string _Creator;
		
		private string _Publisher;
		
		private string _RussianPublisher;
		
		private string _Language;
		
		private System.Nullable<int> _AgeRestrict;
		
		private bool _IsDeleted;
		
		private bool _IsNew;
		
		private bool _IsPromo;
		
		private bool _IsAction;
		
		private int _VisitCount;
		
		private EntitySet<PromoAction> _PromoActions;
		
		private EntitySet<ProductCatalog> _ProductCatalogs;
		
		private EntitySet<ProductImage> _ProductImages;
		
		private EntitySet<ProductReview> _ProductReviews;
		
		private EntitySet<ProductVariation> _ProductVariations;
		
		private EntitySet<ProductVideo> _ProductVideos;
		
		private EntitySet<ProductCode> _ProductCodes;
		
		private EntitySet<SimilarProduct> _SimilarProducts;
		
		private EntitySet<SimilarProduct> _SimilarProducts1;
		
		private EntitySet<CartProduct> _CartProducts;
		
		private EntitySet<ProductPrice> _ProductPrices;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<Game> _Game;
		
		private EntityRef<Vendor> _Vendor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnGameIDChanging(System.Nullable<int> value);
    partial void OnGameIDChanged();
    partial void OnCategoryIDChanging(System.Nullable<int> value);
    partial void OnCategoryIDChanged();
    partial void OnVendorIDChanging(System.Nullable<int> value);
    partial void OnVendorIDChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnSubTitleChanging(string value);
    partial void OnSubTitleChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnSmsNameChanging(string value);
    partial void OnSmsNameChanged();
    partial void OnBackgroundChanging(string value);
    partial void OnBackgroundChanged();
    partial void OnReleaseDateChanging(System.Nullable<System.DateTime> value);
    partial void OnReleaseDateChanged();
    partial void OnSystemRequirementsChanging(string value);
    partial void OnSystemRequirementsChanged();
    partial void OnCreatorChanging(string value);
    partial void OnCreatorChanged();
    partial void OnPublisherChanging(string value);
    partial void OnPublisherChanged();
    partial void OnRussianPublisherChanging(string value);
    partial void OnRussianPublisherChanged();
    partial void OnLanguageChanging(string value);
    partial void OnLanguageChanged();
    partial void OnAgeRestrictChanging(System.Nullable<int> value);
    partial void OnAgeRestrictChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnIsNewChanging(bool value);
    partial void OnIsNewChanged();
    partial void OnIsPromoChanging(bool value);
    partial void OnIsPromoChanged();
    partial void OnIsActionChanging(bool value);
    partial void OnIsActionChanged();
    partial void OnVisitCountChanging(int value);
    partial void OnVisitCountChanged();
    #endregion
		
		public Product()
		{
			this._PromoActions = new EntitySet<PromoAction>(new Action<PromoAction>(this.attach_PromoActions), new Action<PromoAction>(this.detach_PromoActions));
			this._ProductCatalogs = new EntitySet<ProductCatalog>(new Action<ProductCatalog>(this.attach_ProductCatalogs), new Action<ProductCatalog>(this.detach_ProductCatalogs));
			this._ProductImages = new EntitySet<ProductImage>(new Action<ProductImage>(this.attach_ProductImages), new Action<ProductImage>(this.detach_ProductImages));
			this._ProductReviews = new EntitySet<ProductReview>(new Action<ProductReview>(this.attach_ProductReviews), new Action<ProductReview>(this.detach_ProductReviews));
			this._ProductVariations = new EntitySet<ProductVariation>(new Action<ProductVariation>(this.attach_ProductVariations), new Action<ProductVariation>(this.detach_ProductVariations));
			this._ProductVideos = new EntitySet<ProductVideo>(new Action<ProductVideo>(this.attach_ProductVideos), new Action<ProductVideo>(this.detach_ProductVideos));
			this._ProductCodes = new EntitySet<ProductCode>(new Action<ProductCode>(this.attach_ProductCodes), new Action<ProductCode>(this.detach_ProductCodes));
			this._SimilarProducts = new EntitySet<SimilarProduct>(new Action<SimilarProduct>(this.attach_SimilarProducts), new Action<SimilarProduct>(this.detach_SimilarProducts));
			this._SimilarProducts1 = new EntitySet<SimilarProduct>(new Action<SimilarProduct>(this.attach_SimilarProducts1), new Action<SimilarProduct>(this.detach_SimilarProducts1));
			this._CartProducts = new EntitySet<CartProduct>(new Action<CartProduct>(this.attach_CartProducts), new Action<CartProduct>(this.detach_CartProducts));
			this._ProductPrices = new EntitySet<ProductPrice>(new Action<ProductPrice>(this.attach_ProductPrices), new Action<ProductPrice>(this.detach_ProductPrices));
			this._Category = default(EntityRef<Category>);
			this._Game = default(EntityRef<Game>);
			this._Vendor = default(EntityRef<Vendor>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameID", DbType="Int")]
		public System.Nullable<int> GameID
		{
			get
			{
				return this._GameID;
			}
			set
			{
				if ((this._GameID != value))
				{
					if (this._Game.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameIDChanging(value);
					this.SendPropertyChanging();
					this._GameID = value;
					this.SendPropertyChanged("GameID");
					this.OnGameIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", DbType="Int")]
		public System.Nullable<int> CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VendorID", DbType="Int")]
		public System.Nullable<int> VendorID
		{
			get
			{
				return this._VendorID;
			}
			set
			{
				if ((this._VendorID != value))
				{
					if (this._Vendor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVendorIDChanging(value);
					this.SendPropertyChanging();
					this._VendorID = value;
					this.SendPropertyChanged("VendorID");
					this.OnVendorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubTitle", DbType="NVarChar(500)")]
		public string SubTitle
		{
			get
			{
				return this._SubTitle;
			}
			set
			{
				if ((this._SubTitle != value))
				{
					this.OnSubTitleChanging(value);
					this.SendPropertyChanging();
					this._SubTitle = value;
					this.SendPropertyChanged("SubTitle");
					this.OnSubTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="NVarChar(150)")]
		public string Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SmsName", DbType="NVarChar(50)")]
		public string SmsName
		{
			get
			{
				return this._SmsName;
			}
			set
			{
				if ((this._SmsName != value))
				{
					this.OnSmsNameChanging(value);
					this.SendPropertyChanging();
					this._SmsName = value;
					this.SendPropertyChanged("SmsName");
					this.OnSmsNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Background", DbType="NVarChar(150)")]
		public string Background
		{
			get
			{
				return this._Background;
			}
			set
			{
				if ((this._Background != value))
				{
					this.OnBackgroundChanging(value);
					this.SendPropertyChanging();
					this._Background = value;
					this.SendPropertyChanged("Background");
					this.OnBackgroundChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReleaseDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ReleaseDate
		{
			get
			{
				return this._ReleaseDate;
			}
			set
			{
				if ((this._ReleaseDate != value))
				{
					this.OnReleaseDateChanging(value);
					this.SendPropertyChanging();
					this._ReleaseDate = value;
					this.SendPropertyChanged("ReleaseDate");
					this.OnReleaseDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SystemRequirements", DbType="NVarChar(MAX)")]
		public string SystemRequirements
		{
			get
			{
				return this._SystemRequirements;
			}
			set
			{
				if ((this._SystemRequirements != value))
				{
					this.OnSystemRequirementsChanging(value);
					this.SendPropertyChanging();
					this._SystemRequirements = value;
					this.SendPropertyChanged("SystemRequirements");
					this.OnSystemRequirementsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Creator", DbType="NVarChar(100)")]
		public string Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					this.OnCreatorChanging(value);
					this.SendPropertyChanging();
					this._Creator = value;
					this.SendPropertyChanged("Creator");
					this.OnCreatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Publisher", DbType="NVarChar(100)")]
		public string Publisher
		{
			get
			{
				return this._Publisher;
			}
			set
			{
				if ((this._Publisher != value))
				{
					this.OnPublisherChanging(value);
					this.SendPropertyChanging();
					this._Publisher = value;
					this.SendPropertyChanged("Publisher");
					this.OnPublisherChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RussianPublisher", DbType="NVarChar(100)")]
		public string RussianPublisher
		{
			get
			{
				return this._RussianPublisher;
			}
			set
			{
				if ((this._RussianPublisher != value))
				{
					this.OnRussianPublisherChanging(value);
					this.SendPropertyChanging();
					this._RussianPublisher = value;
					this.SendPropertyChanged("RussianPublisher");
					this.OnRussianPublisherChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Language", DbType="NVarChar(500)")]
		public string Language
		{
			get
			{
				return this._Language;
			}
			set
			{
				if ((this._Language != value))
				{
					this.OnLanguageChanging(value);
					this.SendPropertyChanging();
					this._Language = value;
					this.SendPropertyChanged("Language");
					this.OnLanguageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgeRestrict", DbType="Int")]
		public System.Nullable<int> AgeRestrict
		{
			get
			{
				return this._AgeRestrict;
			}
			set
			{
				if ((this._AgeRestrict != value))
				{
					this.OnAgeRestrictChanging(value);
					this.SendPropertyChanging();
					this._AgeRestrict = value;
					this.SendPropertyChanged("AgeRestrict");
					this.OnAgeRestrictChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsNew", DbType="Bit NOT NULL")]
		public bool IsNew
		{
			get
			{
				return this._IsNew;
			}
			set
			{
				if ((this._IsNew != value))
				{
					this.OnIsNewChanging(value);
					this.SendPropertyChanging();
					this._IsNew = value;
					this.SendPropertyChanged("IsNew");
					this.OnIsNewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPromo", DbType="Bit NOT NULL")]
		public bool IsPromo
		{
			get
			{
				return this._IsPromo;
			}
			set
			{
				if ((this._IsPromo != value))
				{
					this.OnIsPromoChanging(value);
					this.SendPropertyChanging();
					this._IsPromo = value;
					this.SendPropertyChanged("IsPromo");
					this.OnIsPromoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAction", DbType="Bit NOT NULL")]
		public bool IsAction
		{
			get
			{
				return this._IsAction;
			}
			set
			{
				if ((this._IsAction != value))
				{
					this.OnIsActionChanging(value);
					this.SendPropertyChanging();
					this._IsAction = value;
					this.SendPropertyChanged("IsAction");
					this.OnIsActionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisitCount", DbType="Int NOT NULL")]
		public int VisitCount
		{
			get
			{
				return this._VisitCount;
			}
			set
			{
				if ((this._VisitCount != value))
				{
					this.OnVisitCountChanging(value);
					this.SendPropertyChanging();
					this._VisitCount = value;
					this.SendPropertyChanged("VisitCount");
					this.OnVisitCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_PromoAction", Storage="_PromoActions", ThisKey="ID", OtherKey="ProductID")]
		public EntitySet<PromoAction> PromoActions
		{
			get
			{
				return this._PromoActions;
			}
			set
			{
				this._PromoActions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductCatalog", Storage="_ProductCatalogs", ThisKey="ID", OtherKey="ProductID")]
		public EntitySet<ProductCatalog> ProductCatalogs
		{
			get
			{
				return this._ProductCatalogs;
			}
			set
			{
				this._ProductCatalogs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductImage", Storage="_ProductImages", ThisKey="ID", OtherKey="ProductID")]
		public EntitySet<ProductImage> ProductImages
		{
			get
			{
				return this._ProductImages;
			}
			set
			{
				this._ProductImages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductReview", Storage="_ProductReviews", ThisKey="ID", OtherKey="ProductID")]
		public EntitySet<ProductReview> ProductReviews
		{
			get
			{
				return this._ProductReviews;
			}
			set
			{
				this._ProductReviews.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductVariation", Storage="_ProductVariations", ThisKey="ID", OtherKey="ProductID")]
		public EntitySet<ProductVariation> ProductVariations
		{
			get
			{
				return this._ProductVariations;
			}
			set
			{
				this._ProductVariations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductVideo", Storage="_ProductVideos", ThisKey="ID", OtherKey="ProductID")]
		public EntitySet<ProductVideo> ProductVideos
		{
			get
			{
				return this._ProductVideos;
			}
			set
			{
				this._ProductVideos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductCode", Storage="_ProductCodes", ThisKey="ID", OtherKey="ProductID")]
		public EntitySet<ProductCode> ProductCodes
		{
			get
			{
				return this._ProductCodes;
			}
			set
			{
				this._ProductCodes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_SimilarProduct", Storage="_SimilarProducts", ThisKey="ID", OtherKey="ProductID")]
		public EntitySet<SimilarProduct> SimilarProducts
		{
			get
			{
				return this._SimilarProducts;
			}
			set
			{
				this._SimilarProducts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_SimilarProduct1", Storage="_SimilarProducts1", ThisKey="ID", OtherKey="SimilarProductID")]
		public EntitySet<SimilarProduct> SimilarProducts1
		{
			get
			{
				return this._SimilarProducts1;
			}
			set
			{
				this._SimilarProducts1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_CartProduct", Storage="_CartProducts", ThisKey="ID", OtherKey="ProductID")]
		public EntitySet<CartProduct> CartProducts
		{
			get
			{
				return this._CartProducts;
			}
			set
			{
				this._CartProducts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductPrice", Storage="_ProductPrices", ThisKey="ID", OtherKey="ProductID")]
		public EntitySet<ProductPrice> ProductPrices
		{
			get
			{
				return this._ProductPrices;
			}
			set
			{
				this._ProductPrices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Product", Storage="_Category", ThisKey="CategoryID", OtherKey="ID", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._CategoryID = value.ID;
					}
					else
					{
						this._CategoryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_Product", Storage="_Game", ThisKey="GameID", OtherKey="ID", IsForeignKey=true, DeleteRule="SET NULL")]
		public Game Game
		{
			get
			{
				return this._Game.Entity;
			}
			set
			{
				Game previousValue = this._Game.Entity;
				if (((previousValue != value) 
							|| (this._Game.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Game.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._Game.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._GameID = value.ID;
					}
					else
					{
						this._GameID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Game");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Vendor_Product", Storage="_Vendor", ThisKey="VendorID", OtherKey="ID", IsForeignKey=true)]
		public Vendor Vendor
		{
			get
			{
				return this._Vendor.Entity;
			}
			set
			{
				Vendor previousValue = this._Vendor.Entity;
				if (((previousValue != value) 
							|| (this._Vendor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Vendor.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._Vendor.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._VendorID = value.ID;
					}
					else
					{
						this._VendorID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Vendor");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PromoActions(PromoAction entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_PromoActions(PromoAction entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_ProductCatalogs(ProductCatalog entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ProductCatalogs(ProductCatalog entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_ProductImages(ProductImage entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ProductImages(ProductImage entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_ProductReviews(ProductReview entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ProductReviews(ProductReview entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_ProductVariations(ProductVariation entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ProductVariations(ProductVariation entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_ProductVideos(ProductVideo entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ProductVideos(ProductVideo entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_ProductCodes(ProductCode entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ProductCodes(ProductCode entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_SimilarProducts(SimilarProduct entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_SimilarProducts(SimilarProduct entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_SimilarProducts1(SimilarProduct entity)
		{
			this.SendPropertyChanging();
			entity.Product1 = this;
		}
		
		private void detach_SimilarProducts1(SimilarProduct entity)
		{
			this.SendPropertyChanging();
			entity.Product1 = null;
		}
		
		private void attach_CartProducts(CartProduct entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_CartProducts(CartProduct entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_ProductPrices(ProductPrice entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ProductPrices(ProductPrice entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SimilarProduct")]
	public partial class SimilarProduct : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ProductID;
		
		private int _SimilarProductID;
		
		private EntityRef<Product> _Product;
		
		private EntityRef<Product> _Product1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnSimilarProductIDChanging(int value);
    partial void OnSimilarProductIDChanged();
    #endregion
		
		public SimilarProduct()
		{
			this._Product = default(EntityRef<Product>);
			this._Product1 = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="Int NOT NULL")]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SimilarProductID", DbType="Int NOT NULL")]
		public int SimilarProductID
		{
			get
			{
				return this._SimilarProductID;
			}
			set
			{
				if ((this._SimilarProductID != value))
				{
					if (this._Product1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSimilarProductIDChanging(value);
					this.SendPropertyChanging();
					this._SimilarProductID = value;
					this.SendPropertyChanged("SimilarProductID");
					this.OnSimilarProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_SimilarProduct", Storage="_Product", ThisKey="ProductID", OtherKey="ID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.SimilarProducts.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.SimilarProducts.Add(this);
						this._ProductID = value.ID;
					}
					else
					{
						this._ProductID = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_SimilarProduct1", Storage="_Product1", ThisKey="SimilarProductID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Product Product1
		{
			get
			{
				return this._Product1.Entity;
			}
			set
			{
				Product previousValue = this._Product1.Entity;
				if (((previousValue != value) 
							|| (this._Product1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product1.Entity = null;
						previousValue.SimilarProducts1.Remove(this);
					}
					this._Product1.Entity = value;
					if ((value != null))
					{
						value.SimilarProducts1.Add(this);
						this._SimilarProductID = value.ID;
					}
					else
					{
						this._SimilarProductID = default(int);
					}
					this.SendPropertyChanged("Product1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CartProduct")]
	public partial class CartProduct : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _CartID;
		
		private int _ProductID;
		
		private int _ProductPriceID;
		
		private System.Nullable<int> _ProductVariationID;
		
		private System.Nullable<int> _PromoCodeID;
		
		private double _Price;
		
		private int _Quantity;
		
		private bool _IsFree;
		
		private EntitySet<ProductCode> _ProductCodes;
		
		private EntityRef<Cart> _Cart;
		
		private EntityRef<Product> _Product;
		
		private EntityRef<ProductVariation> _ProductVariation;
		
		private EntityRef<PromoCode> _PromoCode;
		
		private EntityRef<ProductPrice> _ProductPrice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCartIDChanging(int value);
    partial void OnCartIDChanged();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnProductPriceIDChanging(int value);
    partial void OnProductPriceIDChanged();
    partial void OnProductVariationIDChanging(System.Nullable<int> value);
    partial void OnProductVariationIDChanged();
    partial void OnPromoCodeIDChanging(System.Nullable<int> value);
    partial void OnPromoCodeIDChanged();
    partial void OnPriceChanging(double value);
    partial void OnPriceChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnIsFreeChanging(bool value);
    partial void OnIsFreeChanged();
    #endregion
		
		public CartProduct()
		{
			this._ProductCodes = new EntitySet<ProductCode>(new Action<ProductCode>(this.attach_ProductCodes), new Action<ProductCode>(this.detach_ProductCodes));
			this._Cart = default(EntityRef<Cart>);
			this._Product = default(EntityRef<Product>);
			this._ProductVariation = default(EntityRef<ProductVariation>);
			this._PromoCode = default(EntityRef<PromoCode>);
			this._ProductPrice = default(EntityRef<ProductPrice>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CartID", DbType="Int NOT NULL")]
		public int CartID
		{
			get
			{
				return this._CartID;
			}
			set
			{
				if ((this._CartID != value))
				{
					if (this._Cart.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCartIDChanging(value);
					this.SendPropertyChanging();
					this._CartID = value;
					this.SendPropertyChanged("CartID");
					this.OnCartIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="Int NOT NULL")]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductPriceID", DbType="Int NOT NULL")]
		public int ProductPriceID
		{
			get
			{
				return this._ProductPriceID;
			}
			set
			{
				if ((this._ProductPriceID != value))
				{
					if (this._ProductPrice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductPriceIDChanging(value);
					this.SendPropertyChanging();
					this._ProductPriceID = value;
					this.SendPropertyChanged("ProductPriceID");
					this.OnProductPriceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductVariationID", DbType="Int")]
		public System.Nullable<int> ProductVariationID
		{
			get
			{
				return this._ProductVariationID;
			}
			set
			{
				if ((this._ProductVariationID != value))
				{
					if (this._ProductVariation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductVariationIDChanging(value);
					this.SendPropertyChanging();
					this._ProductVariationID = value;
					this.SendPropertyChanged("ProductVariationID");
					this.OnProductVariationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PromoCodeID", DbType="Int")]
		public System.Nullable<int> PromoCodeID
		{
			get
			{
				return this._PromoCodeID;
			}
			set
			{
				if ((this._PromoCodeID != value))
				{
					if (this._PromoCode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPromoCodeIDChanging(value);
					this.SendPropertyChanging();
					this._PromoCodeID = value;
					this.SendPropertyChanged("PromoCodeID");
					this.OnPromoCodeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Float NOT NULL")]
		public double Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsFree", DbType="Bit NOT NULL")]
		public bool IsFree
		{
			get
			{
				return this._IsFree;
			}
			set
			{
				if ((this._IsFree != value))
				{
					this.OnIsFreeChanging(value);
					this.SendPropertyChanging();
					this._IsFree = value;
					this.SendPropertyChanged("IsFree");
					this.OnIsFreeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CartProduct_ProductCode", Storage="_ProductCodes", ThisKey="ID", OtherKey="CartProductID")]
		public EntitySet<ProductCode> ProductCodes
		{
			get
			{
				return this._ProductCodes;
			}
			set
			{
				this._ProductCodes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cart_CartProduct", Storage="_Cart", ThisKey="CartID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Cart Cart
		{
			get
			{
				return this._Cart.Entity;
			}
			set
			{
				Cart previousValue = this._Cart.Entity;
				if (((previousValue != value) 
							|| (this._Cart.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cart.Entity = null;
						previousValue.CartProducts.Remove(this);
					}
					this._Cart.Entity = value;
					if ((value != null))
					{
						value.CartProducts.Add(this);
						this._CartID = value.ID;
					}
					else
					{
						this._CartID = default(int);
					}
					this.SendPropertyChanged("Cart");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_CartProduct", Storage="_Product", ThisKey="ProductID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.CartProducts.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.CartProducts.Add(this);
						this._ProductID = value.ID;
					}
					else
					{
						this._ProductID = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductVariation_CartProduct", Storage="_ProductVariation", ThisKey="ProductVariationID", OtherKey="ID", IsForeignKey=true)]
		public ProductVariation ProductVariation
		{
			get
			{
				return this._ProductVariation.Entity;
			}
			set
			{
				ProductVariation previousValue = this._ProductVariation.Entity;
				if (((previousValue != value) 
							|| (this._ProductVariation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductVariation.Entity = null;
						previousValue.CartProducts.Remove(this);
					}
					this._ProductVariation.Entity = value;
					if ((value != null))
					{
						value.CartProducts.Add(this);
						this._ProductVariationID = value.ID;
					}
					else
					{
						this._ProductVariationID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProductVariation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PromoCode_CartProduct", Storage="_PromoCode", ThisKey="PromoCodeID", OtherKey="ID", IsForeignKey=true)]
		public PromoCode PromoCode
		{
			get
			{
				return this._PromoCode.Entity;
			}
			set
			{
				PromoCode previousValue = this._PromoCode.Entity;
				if (((previousValue != value) 
							|| (this._PromoCode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PromoCode.Entity = null;
						previousValue.CartProducts.Remove(this);
					}
					this._PromoCode.Entity = value;
					if ((value != null))
					{
						value.CartProducts.Add(this);
						this._PromoCodeID = value.ID;
					}
					else
					{
						this._PromoCodeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("PromoCode");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductPrice_CartProduct", Storage="_ProductPrice", ThisKey="ProductPriceID", OtherKey="ID", IsForeignKey=true)]
		public ProductPrice ProductPrice
		{
			get
			{
				return this._ProductPrice.Entity;
			}
			set
			{
				ProductPrice previousValue = this._ProductPrice.Entity;
				if (((previousValue != value) 
							|| (this._ProductPrice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductPrice.Entity = null;
						previousValue.CartProducts.Remove(this);
					}
					this._ProductPrice.Entity = value;
					if ((value != null))
					{
						value.CartProducts.Add(this);
						this._ProductPriceID = value.ID;
					}
					else
					{
						this._ProductPriceID = default(int);
					}
					this.SendPropertyChanged("ProductPrice");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProductCodes(ProductCode entity)
		{
			this.SendPropertyChanging();
			entity.CartProduct = this;
		}
		
		private void detach_ProductCodes(ProductCode entity)
		{
			this.SendPropertyChanging();
			entity.CartProduct = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductPrice")]
	public partial class ProductPrice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ProductID;
		
		private System.Nullable<int> _PlatformID;
		
		private System.Nullable<double> _OldPrice;
		
		private double _Price;
		
		private bool _Preorder;
		
		private bool _IsDeleted;
		
		private EntitySet<ProductCode> _ProductCodes;
		
		private EntitySet<CartProduct> _CartProducts;
		
		private EntityRef<Platform> _Platform;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnPlatformIDChanging(System.Nullable<int> value);
    partial void OnPlatformIDChanged();
    partial void OnOldPriceChanging(System.Nullable<double> value);
    partial void OnOldPriceChanged();
    partial void OnPriceChanging(double value);
    partial void OnPriceChanged();
    partial void OnPreorderChanging(bool value);
    partial void OnPreorderChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public ProductPrice()
		{
			this._ProductCodes = new EntitySet<ProductCode>(new Action<ProductCode>(this.attach_ProductCodes), new Action<ProductCode>(this.detach_ProductCodes));
			this._CartProducts = new EntitySet<CartProduct>(new Action<CartProduct>(this.attach_CartProducts), new Action<CartProduct>(this.detach_CartProducts));
			this._Platform = default(EntityRef<Platform>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="Int NOT NULL")]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlatformID", DbType="Int")]
		public System.Nullable<int> PlatformID
		{
			get
			{
				return this._PlatformID;
			}
			set
			{
				if ((this._PlatformID != value))
				{
					if (this._Platform.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlatformIDChanging(value);
					this.SendPropertyChanging();
					this._PlatformID = value;
					this.SendPropertyChanged("PlatformID");
					this.OnPlatformIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OldPrice", DbType="Float")]
		public System.Nullable<double> OldPrice
		{
			get
			{
				return this._OldPrice;
			}
			set
			{
				if ((this._OldPrice != value))
				{
					this.OnOldPriceChanging(value);
					this.SendPropertyChanging();
					this._OldPrice = value;
					this.SendPropertyChanged("OldPrice");
					this.OnOldPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Float NOT NULL")]
		public double Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Preorder", DbType="Bit NOT NULL")]
		public bool Preorder
		{
			get
			{
				return this._Preorder;
			}
			set
			{
				if ((this._Preorder != value))
				{
					this.OnPreorderChanging(value);
					this.SendPropertyChanging();
					this._Preorder = value;
					this.SendPropertyChanged("Preorder");
					this.OnPreorderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductPrice_ProductCode", Storage="_ProductCodes", ThisKey="ID", OtherKey="ProductPriceID")]
		public EntitySet<ProductCode> ProductCodes
		{
			get
			{
				return this._ProductCodes;
			}
			set
			{
				this._ProductCodes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductPrice_CartProduct", Storage="_CartProducts", ThisKey="ID", OtherKey="ProductPriceID")]
		public EntitySet<CartProduct> CartProducts
		{
			get
			{
				return this._CartProducts;
			}
			set
			{
				this._CartProducts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Platform_ProductPrice", Storage="_Platform", ThisKey="PlatformID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Platform Platform
		{
			get
			{
				return this._Platform.Entity;
			}
			set
			{
				Platform previousValue = this._Platform.Entity;
				if (((previousValue != value) 
							|| (this._Platform.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Platform.Entity = null;
						previousValue.ProductPrices.Remove(this);
					}
					this._Platform.Entity = value;
					if ((value != null))
					{
						value.ProductPrices.Add(this);
						this._PlatformID = value.ID;
					}
					else
					{
						this._PlatformID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Platform");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductPrice", Storage="_Product", ThisKey="ProductID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ProductPrices.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ProductPrices.Add(this);
						this._ProductID = value.ID;
					}
					else
					{
						this._ProductID = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProductCodes(ProductCode entity)
		{
			this.SendPropertyChanging();
			entity.ProductPrice = this;
		}
		
		private void detach_ProductCodes(ProductCode entity)
		{
			this.SendPropertyChanging();
			entity.ProductPrice = null;
		}
		
		private void attach_CartProducts(CartProduct entity)
		{
			this.SendPropertyChanging();
			entity.ProductPrice = this;
		}
		
		private void detach_CartProducts(CartProduct entity)
		{
			this.SendPropertyChanging();
			entity.ProductPrice = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MoneyNotify")]
	public partial class MoneyNotify : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _Type;
		
		private string _Data;
		
		private System.DateTime _AddedDate;
		
		private System.Nullable<bool> _IsSuccess;
		
		private string _Exception;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnDataChanging(string value);
    partial void OnDataChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnIsSuccessChanging(System.Nullable<bool> value);
    partial void OnIsSuccessChanged();
    partial void OnExceptionChanging(string value);
    partial void OnExceptionChanged();
    #endregion
		
		public MoneyNotify()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Data", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSuccess", DbType="Bit")]
		public System.Nullable<bool> IsSuccess
		{
			get
			{
				return this._IsSuccess;
			}
			set
			{
				if ((this._IsSuccess != value))
				{
					this.OnIsSuccessChanging(value);
					this.SendPropertyChanging();
					this._IsSuccess = value;
					this.SendPropertyChanged("IsSuccess");
					this.OnIsSuccessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Exception", DbType="NVarChar(MAX)")]
		public string Exception
		{
			get
			{
				return this._Exception;
			}
			set
			{
				if ((this._Exception != value))
				{
					this.OnExceptionChanging(value);
					this.SendPropertyChanging();
					this._Exception = value;
					this.SendPropertyChanged("Exception");
					this.OnExceptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Match")]
	public partial class Match : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _MessageID;
		
		private System.Nullable<int> _TournamentID;
		
		private System.Nullable<int> _Participant1ID;
		
		private System.Nullable<int> _Participant2ID;
		
		private System.Nullable<int> _LeagueLevelID;
		
		private System.Nullable<int> _LeagueSeasonID;
		
		private int _Number;
		
		private System.Nullable<int> _Score1;
		
		private System.Nullable<int> _Score2;
		
		private System.DateTime _AddedDate;
		
		private System.Nullable<int> _WinnerID;
		
		private System.Nullable<int> _TournamentGroupID;
		
		private System.Nullable<int> _TourID;
		
		private System.Nullable<int> _WinMatchID;
		
		private System.Nullable<int> _LoseMatchID;
		
		private string _Name;
		
		private int _Place;
		
		private int _Status;
		
		private System.Nullable<System.DateTime> _PublishedDate;
		
		private int _GameID;
		
		private bool _Technical;
		
		private EntitySet<MatchComment> _MatchComments;
		
		private EntitySet<Round> _Rounds;
		
		private EntitySet<Camera> _Cameras;
		
		private EntitySet<GroupRating> _GroupRatings;
		
		private EntitySet<Message> _Messages;
		
		private EntitySet<MatchRoaster> _MatchRoasters;
		
		private EntitySet<RatingDetail> _RatingDetails;
		
		private EntitySet<Notice> _Notices;
		
		private EntitySet<Award> _Awards;
		
		private EntitySet<Match> _Matches;
		
		private EntitySet<Match> _Matches1;
		
		private EntityRef<Game> _Game;
		
		private EntityRef<Match> _Match1;
		
		private EntityRef<Message> _Message;
		
		private EntityRef<Participant> _Participant;
		
		private EntityRef<Participant> _Participant1;
		
		private EntityRef<Tour> _Tour;
		
		private EntityRef<TournamentGroup> _TournamentGroup;
		
		private EntityRef<Match> _Match2;
		
		private EntityRef<Participant> _Participant2;
		
		private EntityRef<Tournament> _Tournament;
		
		private EntityRef<LeagueLevel> _LeagueLevel;
		
		private EntityRef<LeagueSeason> _LeagueSeason;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMessageIDChanging(System.Nullable<int> value);
    partial void OnMessageIDChanged();
    partial void OnTournamentIDChanging(System.Nullable<int> value);
    partial void OnTournamentIDChanged();
    partial void OnParticipant1IDChanging(System.Nullable<int> value);
    partial void OnParticipant1IDChanged();
    partial void OnParticipant2IDChanging(System.Nullable<int> value);
    partial void OnParticipant2IDChanged();
    partial void OnLeagueLevelIDChanging(System.Nullable<int> value);
    partial void OnLeagueLevelIDChanged();
    partial void OnLeagueSeasonIDChanging(System.Nullable<int> value);
    partial void OnLeagueSeasonIDChanged();
    partial void OnNumberChanging(int value);
    partial void OnNumberChanged();
    partial void OnScore1Changing(System.Nullable<int> value);
    partial void OnScore1Changed();
    partial void OnScore2Changing(System.Nullable<int> value);
    partial void OnScore2Changed();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnWinnerIDChanging(System.Nullable<int> value);
    partial void OnWinnerIDChanged();
    partial void OnTournamentGroupIDChanging(System.Nullable<int> value);
    partial void OnTournamentGroupIDChanged();
    partial void OnTourIDChanging(System.Nullable<int> value);
    partial void OnTourIDChanged();
    partial void OnWinMatchIDChanging(System.Nullable<int> value);
    partial void OnWinMatchIDChanged();
    partial void OnLoseMatchIDChanging(System.Nullable<int> value);
    partial void OnLoseMatchIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPlaceChanging(int value);
    partial void OnPlaceChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    partial void OnPublishedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPublishedDateChanged();
    partial void OnGameIDChanging(int value);
    partial void OnGameIDChanged();
    partial void OnTechnicalChanging(bool value);
    partial void OnTechnicalChanged();
    #endregion
		
		public Match()
		{
			this._MatchComments = new EntitySet<MatchComment>(new Action<MatchComment>(this.attach_MatchComments), new Action<MatchComment>(this.detach_MatchComments));
			this._Rounds = new EntitySet<Round>(new Action<Round>(this.attach_Rounds), new Action<Round>(this.detach_Rounds));
			this._Cameras = new EntitySet<Camera>(new Action<Camera>(this.attach_Cameras), new Action<Camera>(this.detach_Cameras));
			this._GroupRatings = new EntitySet<GroupRating>(new Action<GroupRating>(this.attach_GroupRatings), new Action<GroupRating>(this.detach_GroupRatings));
			this._Messages = new EntitySet<Message>(new Action<Message>(this.attach_Messages), new Action<Message>(this.detach_Messages));
			this._MatchRoasters = new EntitySet<MatchRoaster>(new Action<MatchRoaster>(this.attach_MatchRoasters), new Action<MatchRoaster>(this.detach_MatchRoasters));
			this._RatingDetails = new EntitySet<RatingDetail>(new Action<RatingDetail>(this.attach_RatingDetails), new Action<RatingDetail>(this.detach_RatingDetails));
			this._Notices = new EntitySet<Notice>(new Action<Notice>(this.attach_Notices), new Action<Notice>(this.detach_Notices));
			this._Awards = new EntitySet<Award>(new Action<Award>(this.attach_Awards), new Action<Award>(this.detach_Awards));
			this._Matches = new EntitySet<Match>(new Action<Match>(this.attach_Matches), new Action<Match>(this.detach_Matches));
			this._Matches1 = new EntitySet<Match>(new Action<Match>(this.attach_Matches1), new Action<Match>(this.detach_Matches1));
			this._Game = default(EntityRef<Game>);
			this._Match1 = default(EntityRef<Match>);
			this._Message = default(EntityRef<Message>);
			this._Participant = default(EntityRef<Participant>);
			this._Participant1 = default(EntityRef<Participant>);
			this._Tour = default(EntityRef<Tour>);
			this._TournamentGroup = default(EntityRef<TournamentGroup>);
			this._Match2 = default(EntityRef<Match>);
			this._Participant2 = default(EntityRef<Participant>);
			this._Tournament = default(EntityRef<Tournament>);
			this._LeagueLevel = default(EntityRef<LeagueLevel>);
			this._LeagueSeason = default(EntityRef<LeagueSeason>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageID", DbType="Int")]
		public System.Nullable<int> MessageID
		{
			get
			{
				return this._MessageID;
			}
			set
			{
				if ((this._MessageID != value))
				{
					if (this._Message.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMessageIDChanging(value);
					this.SendPropertyChanging();
					this._MessageID = value;
					this.SendPropertyChanged("MessageID");
					this.OnMessageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentID", DbType="Int")]
		public System.Nullable<int> TournamentID
		{
			get
			{
				return this._TournamentID;
			}
			set
			{
				if ((this._TournamentID != value))
				{
					if (this._Tournament.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTournamentIDChanging(value);
					this.SendPropertyChanging();
					this._TournamentID = value;
					this.SendPropertyChanged("TournamentID");
					this.OnTournamentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Participant1ID", DbType="Int")]
		public System.Nullable<int> Participant1ID
		{
			get
			{
				return this._Participant1ID;
			}
			set
			{
				if ((this._Participant1ID != value))
				{
					if (this._Participant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParticipant1IDChanging(value);
					this.SendPropertyChanging();
					this._Participant1ID = value;
					this.SendPropertyChanged("Participant1ID");
					this.OnParticipant1IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Participant2ID", DbType="Int")]
		public System.Nullable<int> Participant2ID
		{
			get
			{
				return this._Participant2ID;
			}
			set
			{
				if ((this._Participant2ID != value))
				{
					if (this._Participant1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParticipant2IDChanging(value);
					this.SendPropertyChanging();
					this._Participant2ID = value;
					this.SendPropertyChanged("Participant2ID");
					this.OnParticipant2IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeagueLevelID", DbType="Int")]
		public System.Nullable<int> LeagueLevelID
		{
			get
			{
				return this._LeagueLevelID;
			}
			set
			{
				if ((this._LeagueLevelID != value))
				{
					if (this._LeagueLevel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLeagueLevelIDChanging(value);
					this.SendPropertyChanging();
					this._LeagueLevelID = value;
					this.SendPropertyChanged("LeagueLevelID");
					this.OnLeagueLevelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeagueSeasonID", DbType="Int")]
		public System.Nullable<int> LeagueSeasonID
		{
			get
			{
				return this._LeagueSeasonID;
			}
			set
			{
				if ((this._LeagueSeasonID != value))
				{
					if (this._LeagueSeason.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLeagueSeasonIDChanging(value);
					this.SendPropertyChanging();
					this._LeagueSeasonID = value;
					this.SendPropertyChanged("LeagueSeasonID");
					this.OnLeagueSeasonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="Int NOT NULL")]
		public int Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score1", DbType="Int")]
		public System.Nullable<int> Score1
		{
			get
			{
				return this._Score1;
			}
			set
			{
				if ((this._Score1 != value))
				{
					this.OnScore1Changing(value);
					this.SendPropertyChanging();
					this._Score1 = value;
					this.SendPropertyChanged("Score1");
					this.OnScore1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score2", DbType="Int")]
		public System.Nullable<int> Score2
		{
			get
			{
				return this._Score2;
			}
			set
			{
				if ((this._Score2 != value))
				{
					this.OnScore2Changing(value);
					this.SendPropertyChanging();
					this._Score2 = value;
					this.SendPropertyChanged("Score2");
					this.OnScore2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WinnerID", DbType="Int")]
		public System.Nullable<int> WinnerID
		{
			get
			{
				return this._WinnerID;
			}
			set
			{
				if ((this._WinnerID != value))
				{
					if (this._Participant2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWinnerIDChanging(value);
					this.SendPropertyChanging();
					this._WinnerID = value;
					this.SendPropertyChanged("WinnerID");
					this.OnWinnerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentGroupID", DbType="Int")]
		public System.Nullable<int> TournamentGroupID
		{
			get
			{
				return this._TournamentGroupID;
			}
			set
			{
				if ((this._TournamentGroupID != value))
				{
					if (this._TournamentGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTournamentGroupIDChanging(value);
					this.SendPropertyChanging();
					this._TournamentGroupID = value;
					this.SendPropertyChanged("TournamentGroupID");
					this.OnTournamentGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TourID", DbType="Int")]
		public System.Nullable<int> TourID
		{
			get
			{
				return this._TourID;
			}
			set
			{
				if ((this._TourID != value))
				{
					if (this._Tour.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTourIDChanging(value);
					this.SendPropertyChanging();
					this._TourID = value;
					this.SendPropertyChanged("TourID");
					this.OnTourIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WinMatchID", DbType="Int")]
		public System.Nullable<int> WinMatchID
		{
			get
			{
				return this._WinMatchID;
			}
			set
			{
				if ((this._WinMatchID != value))
				{
					if (this._Match2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWinMatchIDChanging(value);
					this.SendPropertyChanging();
					this._WinMatchID = value;
					this.SendPropertyChanged("WinMatchID");
					this.OnWinMatchIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoseMatchID", DbType="Int")]
		public System.Nullable<int> LoseMatchID
		{
			get
			{
				return this._LoseMatchID;
			}
			set
			{
				if ((this._LoseMatchID != value))
				{
					if (this._Match1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLoseMatchIDChanging(value);
					this.SendPropertyChanging();
					this._LoseMatchID = value;
					this.SendPropertyChanged("LoseMatchID");
					this.OnLoseMatchIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(500)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Place", DbType="Int NOT NULL")]
		public int Place
		{
			get
			{
				return this._Place;
			}
			set
			{
				if ((this._Place != value))
				{
					this.OnPlaceChanging(value);
					this.SendPropertyChanging();
					this._Place = value;
					this.SendPropertyChanged("Place");
					this.OnPlaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublishedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> PublishedDate
		{
			get
			{
				return this._PublishedDate;
			}
			set
			{
				if ((this._PublishedDate != value))
				{
					this.OnPublishedDateChanging(value);
					this.SendPropertyChanging();
					this._PublishedDate = value;
					this.SendPropertyChanged("PublishedDate");
					this.OnPublishedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameID", DbType="Int NOT NULL")]
		public int GameID
		{
			get
			{
				return this._GameID;
			}
			set
			{
				if ((this._GameID != value))
				{
					if (this._Game.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameIDChanging(value);
					this.SendPropertyChanging();
					this._GameID = value;
					this.SendPropertyChanged("GameID");
					this.OnGameIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Technical", DbType="Bit NOT NULL")]
		public bool Technical
		{
			get
			{
				return this._Technical;
			}
			set
			{
				if ((this._Technical != value))
				{
					this.OnTechnicalChanging(value);
					this.SendPropertyChanging();
					this._Technical = value;
					this.SendPropertyChanged("Technical");
					this.OnTechnicalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Match_MatchComment", Storage="_MatchComments", ThisKey="ID", OtherKey="MatchID")]
		public EntitySet<MatchComment> MatchComments
		{
			get
			{
				return this._MatchComments;
			}
			set
			{
				this._MatchComments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Match_Round", Storage="_Rounds", ThisKey="ID", OtherKey="MatchID")]
		public EntitySet<Round> Rounds
		{
			get
			{
				return this._Rounds;
			}
			set
			{
				this._Rounds.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Match_Camera", Storage="_Cameras", ThisKey="ID", OtherKey="MatchID")]
		public EntitySet<Camera> Cameras
		{
			get
			{
				return this._Cameras;
			}
			set
			{
				this._Cameras.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Match_GroupRating", Storage="_GroupRatings", ThisKey="ID", OtherKey="MatchID")]
		public EntitySet<GroupRating> GroupRatings
		{
			get
			{
				return this._GroupRatings;
			}
			set
			{
				this._GroupRatings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Match_Message", Storage="_Messages", ThisKey="ID", OtherKey="MatchID")]
		public EntitySet<Message> Messages
		{
			get
			{
				return this._Messages;
			}
			set
			{
				this._Messages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Match_MatchRoaster", Storage="_MatchRoasters", ThisKey="ID", OtherKey="MatchID")]
		public EntitySet<MatchRoaster> MatchRoasters
		{
			get
			{
				return this._MatchRoasters;
			}
			set
			{
				this._MatchRoasters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Match_RatingDetail", Storage="_RatingDetails", ThisKey="ID", OtherKey="MatchID")]
		public EntitySet<RatingDetail> RatingDetails
		{
			get
			{
				return this._RatingDetails;
			}
			set
			{
				this._RatingDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Match_Notice", Storage="_Notices", ThisKey="ID", OtherKey="MatchID")]
		public EntitySet<Notice> Notices
		{
			get
			{
				return this._Notices;
			}
			set
			{
				this._Notices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Match_Award", Storage="_Awards", ThisKey="ID", OtherKey="MatchID")]
		public EntitySet<Award> Awards
		{
			get
			{
				return this._Awards;
			}
			set
			{
				this._Awards.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Match_Match", Storage="_Matches", ThisKey="ID", OtherKey="LoseMatchID")]
		public EntitySet<Match> Matches
		{
			get
			{
				return this._Matches;
			}
			set
			{
				this._Matches.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Match_Match1", Storage="_Matches1", ThisKey="ID", OtherKey="WinMatchID")]
		public EntitySet<Match> Matches1
		{
			get
			{
				return this._Matches1;
			}
			set
			{
				this._Matches1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_Match", Storage="_Game", ThisKey="GameID", OtherKey="ID", IsForeignKey=true)]
		public Game Game
		{
			get
			{
				return this._Game.Entity;
			}
			set
			{
				Game previousValue = this._Game.Entity;
				if (((previousValue != value) 
							|| (this._Game.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Game.Entity = null;
						previousValue.Matches.Remove(this);
					}
					this._Game.Entity = value;
					if ((value != null))
					{
						value.Matches.Add(this);
						this._GameID = value.ID;
					}
					else
					{
						this._GameID = default(int);
					}
					this.SendPropertyChanged("Game");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Match_Match", Storage="_Match1", ThisKey="LoseMatchID", OtherKey="ID", IsForeignKey=true)]
		public Match Match1
		{
			get
			{
				return this._Match1.Entity;
			}
			set
			{
				Match previousValue = this._Match1.Entity;
				if (((previousValue != value) 
							|| (this._Match1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Match1.Entity = null;
						previousValue.Matches.Remove(this);
					}
					this._Match1.Entity = value;
					if ((value != null))
					{
						value.Matches.Add(this);
						this._LoseMatchID = value.ID;
					}
					else
					{
						this._LoseMatchID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Match1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Message_Match", Storage="_Message", ThisKey="MessageID", OtherKey="ID", IsForeignKey=true)]
		public Message Message
		{
			get
			{
				return this._Message.Entity;
			}
			set
			{
				Message previousValue = this._Message.Entity;
				if (((previousValue != value) 
							|| (this._Message.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Message.Entity = null;
						previousValue.Matches.Remove(this);
					}
					this._Message.Entity = value;
					if ((value != null))
					{
						value.Matches.Add(this);
						this._MessageID = value.ID;
					}
					else
					{
						this._MessageID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Message");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Participant_Match", Storage="_Participant", ThisKey="Participant1ID", OtherKey="ID", IsForeignKey=true)]
		public Participant Participant
		{
			get
			{
				return this._Participant.Entity;
			}
			set
			{
				Participant previousValue = this._Participant.Entity;
				if (((previousValue != value) 
							|| (this._Participant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Participant.Entity = null;
						previousValue.Matches.Remove(this);
					}
					this._Participant.Entity = value;
					if ((value != null))
					{
						value.Matches.Add(this);
						this._Participant1ID = value.ID;
					}
					else
					{
						this._Participant1ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Participant");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Participant_Match1", Storage="_Participant1", ThisKey="Participant2ID", OtherKey="ID", IsForeignKey=true)]
		public Participant Participant1
		{
			get
			{
				return this._Participant1.Entity;
			}
			set
			{
				Participant previousValue = this._Participant1.Entity;
				if (((previousValue != value) 
							|| (this._Participant1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Participant1.Entity = null;
						previousValue.Matches1.Remove(this);
					}
					this._Participant1.Entity = value;
					if ((value != null))
					{
						value.Matches1.Add(this);
						this._Participant2ID = value.ID;
					}
					else
					{
						this._Participant2ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Participant1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tour_Match", Storage="_Tour", ThisKey="TourID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Tour Tour
		{
			get
			{
				return this._Tour.Entity;
			}
			set
			{
				Tour previousValue = this._Tour.Entity;
				if (((previousValue != value) 
							|| (this._Tour.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tour.Entity = null;
						previousValue.Matches.Remove(this);
					}
					this._Tour.Entity = value;
					if ((value != null))
					{
						value.Matches.Add(this);
						this._TourID = value.ID;
					}
					else
					{
						this._TourID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Tour");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TournamentGroup_Match", Storage="_TournamentGroup", ThisKey="TournamentGroupID", OtherKey="ID", IsForeignKey=true)]
		public TournamentGroup TournamentGroup
		{
			get
			{
				return this._TournamentGroup.Entity;
			}
			set
			{
				TournamentGroup previousValue = this._TournamentGroup.Entity;
				if (((previousValue != value) 
							|| (this._TournamentGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TournamentGroup.Entity = null;
						previousValue.Matches.Remove(this);
					}
					this._TournamentGroup.Entity = value;
					if ((value != null))
					{
						value.Matches.Add(this);
						this._TournamentGroupID = value.ID;
					}
					else
					{
						this._TournamentGroupID = default(Nullable<int>);
					}
					this.SendPropertyChanged("TournamentGroup");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Match_Match1", Storage="_Match2", ThisKey="WinMatchID", OtherKey="ID", IsForeignKey=true)]
		public Match Match2
		{
			get
			{
				return this._Match2.Entity;
			}
			set
			{
				Match previousValue = this._Match2.Entity;
				if (((previousValue != value) 
							|| (this._Match2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Match2.Entity = null;
						previousValue.Matches1.Remove(this);
					}
					this._Match2.Entity = value;
					if ((value != null))
					{
						value.Matches1.Add(this);
						this._WinMatchID = value.ID;
					}
					else
					{
						this._WinMatchID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Match2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Participant_Match2", Storage="_Participant2", ThisKey="WinnerID", OtherKey="ID", IsForeignKey=true)]
		public Participant Participant2
		{
			get
			{
				return this._Participant2.Entity;
			}
			set
			{
				Participant previousValue = this._Participant2.Entity;
				if (((previousValue != value) 
							|| (this._Participant2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Participant2.Entity = null;
						previousValue.Matches2.Remove(this);
					}
					this._Participant2.Entity = value;
					if ((value != null))
					{
						value.Matches2.Add(this);
						this._WinnerID = value.ID;
					}
					else
					{
						this._WinnerID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Participant2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tournament_Match", Storage="_Tournament", ThisKey="TournamentID", OtherKey="ID", IsForeignKey=true)]
		public Tournament Tournament
		{
			get
			{
				return this._Tournament.Entity;
			}
			set
			{
				Tournament previousValue = this._Tournament.Entity;
				if (((previousValue != value) 
							|| (this._Tournament.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tournament.Entity = null;
						previousValue.Matches.Remove(this);
					}
					this._Tournament.Entity = value;
					if ((value != null))
					{
						value.Matches.Add(this);
						this._TournamentID = value.ID;
					}
					else
					{
						this._TournamentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Tournament");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeagueLevel_Match", Storage="_LeagueLevel", ThisKey="LeagueLevelID", OtherKey="ID", IsForeignKey=true)]
		public LeagueLevel LeagueLevel
		{
			get
			{
				return this._LeagueLevel.Entity;
			}
			set
			{
				LeagueLevel previousValue = this._LeagueLevel.Entity;
				if (((previousValue != value) 
							|| (this._LeagueLevel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LeagueLevel.Entity = null;
						previousValue.Matches.Remove(this);
					}
					this._LeagueLevel.Entity = value;
					if ((value != null))
					{
						value.Matches.Add(this);
						this._LeagueLevelID = value.ID;
					}
					else
					{
						this._LeagueLevelID = default(Nullable<int>);
					}
					this.SendPropertyChanged("LeagueLevel");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeagueSeason_Match", Storage="_LeagueSeason", ThisKey="LeagueSeasonID", OtherKey="ID", IsForeignKey=true)]
		public LeagueSeason LeagueSeason
		{
			get
			{
				return this._LeagueSeason.Entity;
			}
			set
			{
				LeagueSeason previousValue = this._LeagueSeason.Entity;
				if (((previousValue != value) 
							|| (this._LeagueSeason.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LeagueSeason.Entity = null;
						previousValue.Matches.Remove(this);
					}
					this._LeagueSeason.Entity = value;
					if ((value != null))
					{
						value.Matches.Add(this);
						this._LeagueSeasonID = value.ID;
					}
					else
					{
						this._LeagueSeasonID = default(Nullable<int>);
					}
					this.SendPropertyChanged("LeagueSeason");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MatchComments(MatchComment entity)
		{
			this.SendPropertyChanging();
			entity.Match = this;
		}
		
		private void detach_MatchComments(MatchComment entity)
		{
			this.SendPropertyChanging();
			entity.Match = null;
		}
		
		private void attach_Rounds(Round entity)
		{
			this.SendPropertyChanging();
			entity.Match = this;
		}
		
		private void detach_Rounds(Round entity)
		{
			this.SendPropertyChanging();
			entity.Match = null;
		}
		
		private void attach_Cameras(Camera entity)
		{
			this.SendPropertyChanging();
			entity.Match = this;
		}
		
		private void detach_Cameras(Camera entity)
		{
			this.SendPropertyChanging();
			entity.Match = null;
		}
		
		private void attach_GroupRatings(GroupRating entity)
		{
			this.SendPropertyChanging();
			entity.Match = this;
		}
		
		private void detach_GroupRatings(GroupRating entity)
		{
			this.SendPropertyChanging();
			entity.Match = null;
		}
		
		private void attach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.Match = this;
		}
		
		private void detach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.Match = null;
		}
		
		private void attach_MatchRoasters(MatchRoaster entity)
		{
			this.SendPropertyChanging();
			entity.Match = this;
		}
		
		private void detach_MatchRoasters(MatchRoaster entity)
		{
			this.SendPropertyChanging();
			entity.Match = null;
		}
		
		private void attach_RatingDetails(RatingDetail entity)
		{
			this.SendPropertyChanging();
			entity.Match = this;
		}
		
		private void detach_RatingDetails(RatingDetail entity)
		{
			this.SendPropertyChanging();
			entity.Match = null;
		}
		
		private void attach_Notices(Notice entity)
		{
			this.SendPropertyChanging();
			entity.Match = this;
		}
		
		private void detach_Notices(Notice entity)
		{
			this.SendPropertyChanging();
			entity.Match = null;
		}
		
		private void attach_Awards(Award entity)
		{
			this.SendPropertyChanging();
			entity.Match = this;
		}
		
		private void detach_Awards(Award entity)
		{
			this.SendPropertyChanging();
			entity.Match = null;
		}
		
		private void attach_Matches(Match entity)
		{
			this.SendPropertyChanging();
			entity.Match1 = this;
		}
		
		private void detach_Matches(Match entity)
		{
			this.SendPropertyChanging();
			entity.Match1 = null;
		}
		
		private void attach_Matches1(Match entity)
		{
			this.SendPropertyChanging();
			entity.Match2 = this;
		}
		
		private void detach_Matches1(Match entity)
		{
			this.SendPropertyChanging();
			entity.Match2 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tournament")]
	public partial class Tournament : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _GameID;
		
		private System.Nullable<int> _LeagueSeasonID;
		
		private System.Nullable<int> _LeagueLevelID;
		
		private int _TournamentType;
		
		private System.Nullable<int> _PlayersCount;
		
		private System.Nullable<int> _MinLevel;
		
		private System.Nullable<int> _MaxLevel;
		
		private System.DateTime _OpenRegistrationDate;
		
		private System.DateTime _CloseRegistrationDate;
		
		private System.DateTime _BeginDate;
		
		private System.DateTime _EndDate;
		
		private string _ImagePath;
		
		private string _Rules;
		
		private int _CountRound;
		
		private int _SingleWinPoint;
		
		private int _SingleDrawPoint;
		
		private string _Name;
		
		private string _Url;
		
		private int _PlatformID;
		
		private int _Status;
		
		private bool _HostGuest;
		
		private bool _DoubleGoalInGuest;
		
		private int _GroupCount;
		
		private int _PlayersInGroup;
		
		private int _ExitFromGroup;
		
		private bool _Toss;
		
		private bool _IsLive;
		
		private string _Place;
		
		private bool _IsRoundForPoints;
		
		private System.Nullable<int> _ForumID;
		
		private System.Nullable<int> _TournamentConditionID;
		
		private bool _IsTeam;
		
		private int _TeamCount;
		
		private string _Description;
		
		private System.Nullable<int> _HotReplacement;
		
		private bool _IsGroup;
		
		private string _Keywords;
		
		private string _MetaDescription;
		
		private System.Nullable<int> _MoneyType;
		
		private System.Nullable<double> _Fee;
		
		private EntitySet<TournamentGroup> _TournamentGroups;
		
		private EntitySet<Tour> _Tours;
		
		private EntitySet<UserRoleTournament> _UserRoleTournaments;
		
		private EntitySet<Participant> _Participants;
		
		private EntitySet<Camera> _Cameras;
		
		private EntitySet<RatingDetail> _RatingDetails;
		
		private EntitySet<TournamentSocialPost> _TournamentSocialPosts;
		
		private EntitySet<Notice> _Notices;
		
		private EntitySet<ChatRoom> _ChatRooms;
		
		private EntitySet<Award> _Awards;
		
		private EntitySet<MoneyDetail> _MoneyDetails;
		
		private EntitySet<Match> _Matches;
		
		private EntityRef<Forum> _Forum;
		
		private EntityRef<Game> _Game;
		
		private EntityRef<Platform> _Platform;
		
		private EntityRef<TournamentCondition> _TournamentCondition;
		
		private EntityRef<LeagueLevel> _LeagueLevel;
		
		private EntityRef<LeagueSeason> _LeagueSeason;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnGameIDChanging(int value);
    partial void OnGameIDChanged();
    partial void OnLeagueSeasonIDChanging(System.Nullable<int> value);
    partial void OnLeagueSeasonIDChanged();
    partial void OnLeagueLevelIDChanging(System.Nullable<int> value);
    partial void OnLeagueLevelIDChanged();
    partial void OnTournamentTypeChanging(int value);
    partial void OnTournamentTypeChanged();
    partial void OnPlayersCountChanging(System.Nullable<int> value);
    partial void OnPlayersCountChanged();
    partial void OnMinLevelChanging(System.Nullable<int> value);
    partial void OnMinLevelChanged();
    partial void OnMaxLevelChanging(System.Nullable<int> value);
    partial void OnMaxLevelChanged();
    partial void OnOpenRegistrationDateChanging(System.DateTime value);
    partial void OnOpenRegistrationDateChanged();
    partial void OnCloseRegistrationDateChanging(System.DateTime value);
    partial void OnCloseRegistrationDateChanged();
    partial void OnBeginDateChanging(System.DateTime value);
    partial void OnBeginDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnImagePathChanging(string value);
    partial void OnImagePathChanged();
    partial void OnRulesChanging(string value);
    partial void OnRulesChanged();
    partial void OnCountRoundChanging(int value);
    partial void OnCountRoundChanged();
    partial void OnSingleWinPointChanging(int value);
    partial void OnSingleWinPointChanged();
    partial void OnSingleDrawPointChanging(int value);
    partial void OnSingleDrawPointChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnPlatformIDChanging(int value);
    partial void OnPlatformIDChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    partial void OnHostGuestChanging(bool value);
    partial void OnHostGuestChanged();
    partial void OnDoubleGoalInGuestChanging(bool value);
    partial void OnDoubleGoalInGuestChanged();
    partial void OnGroupCountChanging(int value);
    partial void OnGroupCountChanged();
    partial void OnPlayersInGroupChanging(int value);
    partial void OnPlayersInGroupChanged();
    partial void OnExitFromGroupChanging(int value);
    partial void OnExitFromGroupChanged();
    partial void OnTossChanging(bool value);
    partial void OnTossChanged();
    partial void OnIsLiveChanging(bool value);
    partial void OnIsLiveChanged();
    partial void OnPlaceChanging(string value);
    partial void OnPlaceChanged();
    partial void OnIsRoundForPointsChanging(bool value);
    partial void OnIsRoundForPointsChanged();
    partial void OnForumIDChanging(System.Nullable<int> value);
    partial void OnForumIDChanged();
    partial void OnTournamentConditionIDChanging(System.Nullable<int> value);
    partial void OnTournamentConditionIDChanged();
    partial void OnIsTeamChanging(bool value);
    partial void OnIsTeamChanged();
    partial void OnTeamCountChanging(int value);
    partial void OnTeamCountChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnHotReplacementChanging(System.Nullable<int> value);
    partial void OnHotReplacementChanged();
    partial void OnIsGroupChanging(bool value);
    partial void OnIsGroupChanged();
    partial void OnKeywordsChanging(string value);
    partial void OnKeywordsChanged();
    partial void OnMetaDescriptionChanging(string value);
    partial void OnMetaDescriptionChanged();
    partial void OnMoneyTypeChanging(System.Nullable<int> value);
    partial void OnMoneyTypeChanged();
    partial void OnFeeChanging(System.Nullable<double> value);
    partial void OnFeeChanged();
    #endregion
		
		public Tournament()
		{
			this._TournamentGroups = new EntitySet<TournamentGroup>(new Action<TournamentGroup>(this.attach_TournamentGroups), new Action<TournamentGroup>(this.detach_TournamentGroups));
			this._Tours = new EntitySet<Tour>(new Action<Tour>(this.attach_Tours), new Action<Tour>(this.detach_Tours));
			this._UserRoleTournaments = new EntitySet<UserRoleTournament>(new Action<UserRoleTournament>(this.attach_UserRoleTournaments), new Action<UserRoleTournament>(this.detach_UserRoleTournaments));
			this._Participants = new EntitySet<Participant>(new Action<Participant>(this.attach_Participants), new Action<Participant>(this.detach_Participants));
			this._Cameras = new EntitySet<Camera>(new Action<Camera>(this.attach_Cameras), new Action<Camera>(this.detach_Cameras));
			this._RatingDetails = new EntitySet<RatingDetail>(new Action<RatingDetail>(this.attach_RatingDetails), new Action<RatingDetail>(this.detach_RatingDetails));
			this._TournamentSocialPosts = new EntitySet<TournamentSocialPost>(new Action<TournamentSocialPost>(this.attach_TournamentSocialPosts), new Action<TournamentSocialPost>(this.detach_TournamentSocialPosts));
			this._Notices = new EntitySet<Notice>(new Action<Notice>(this.attach_Notices), new Action<Notice>(this.detach_Notices));
			this._ChatRooms = new EntitySet<ChatRoom>(new Action<ChatRoom>(this.attach_ChatRooms), new Action<ChatRoom>(this.detach_ChatRooms));
			this._Awards = new EntitySet<Award>(new Action<Award>(this.attach_Awards), new Action<Award>(this.detach_Awards));
			this._MoneyDetails = new EntitySet<MoneyDetail>(new Action<MoneyDetail>(this.attach_MoneyDetails), new Action<MoneyDetail>(this.detach_MoneyDetails));
			this._Matches = new EntitySet<Match>(new Action<Match>(this.attach_Matches), new Action<Match>(this.detach_Matches));
			this._Forum = default(EntityRef<Forum>);
			this._Game = default(EntityRef<Game>);
			this._Platform = default(EntityRef<Platform>);
			this._TournamentCondition = default(EntityRef<TournamentCondition>);
			this._LeagueLevel = default(EntityRef<LeagueLevel>);
			this._LeagueSeason = default(EntityRef<LeagueSeason>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameID", DbType="Int NOT NULL")]
		public int GameID
		{
			get
			{
				return this._GameID;
			}
			set
			{
				if ((this._GameID != value))
				{
					if (this._Game.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameIDChanging(value);
					this.SendPropertyChanging();
					this._GameID = value;
					this.SendPropertyChanged("GameID");
					this.OnGameIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeagueSeasonID", DbType="Int")]
		public System.Nullable<int> LeagueSeasonID
		{
			get
			{
				return this._LeagueSeasonID;
			}
			set
			{
				if ((this._LeagueSeasonID != value))
				{
					if (this._LeagueSeason.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLeagueSeasonIDChanging(value);
					this.SendPropertyChanging();
					this._LeagueSeasonID = value;
					this.SendPropertyChanged("LeagueSeasonID");
					this.OnLeagueSeasonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeagueLevelID", DbType="Int")]
		public System.Nullable<int> LeagueLevelID
		{
			get
			{
				return this._LeagueLevelID;
			}
			set
			{
				if ((this._LeagueLevelID != value))
				{
					if (this._LeagueLevel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLeagueLevelIDChanging(value);
					this.SendPropertyChanging();
					this._LeagueLevelID = value;
					this.SendPropertyChanged("LeagueLevelID");
					this.OnLeagueLevelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentType", DbType="Int NOT NULL")]
		public int TournamentType
		{
			get
			{
				return this._TournamentType;
			}
			set
			{
				if ((this._TournamentType != value))
				{
					this.OnTournamentTypeChanging(value);
					this.SendPropertyChanging();
					this._TournamentType = value;
					this.SendPropertyChanged("TournamentType");
					this.OnTournamentTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayersCount", DbType="Int")]
		public System.Nullable<int> PlayersCount
		{
			get
			{
				return this._PlayersCount;
			}
			set
			{
				if ((this._PlayersCount != value))
				{
					this.OnPlayersCountChanging(value);
					this.SendPropertyChanging();
					this._PlayersCount = value;
					this.SendPropertyChanged("PlayersCount");
					this.OnPlayersCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinLevel", DbType="Int")]
		public System.Nullable<int> MinLevel
		{
			get
			{
				return this._MinLevel;
			}
			set
			{
				if ((this._MinLevel != value))
				{
					this.OnMinLevelChanging(value);
					this.SendPropertyChanging();
					this._MinLevel = value;
					this.SendPropertyChanged("MinLevel");
					this.OnMinLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxLevel", DbType="Int")]
		public System.Nullable<int> MaxLevel
		{
			get
			{
				return this._MaxLevel;
			}
			set
			{
				if ((this._MaxLevel != value))
				{
					this.OnMaxLevelChanging(value);
					this.SendPropertyChanging();
					this._MaxLevel = value;
					this.SendPropertyChanged("MaxLevel");
					this.OnMaxLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OpenRegistrationDate", DbType="DateTime NOT NULL")]
		public System.DateTime OpenRegistrationDate
		{
			get
			{
				return this._OpenRegistrationDate;
			}
			set
			{
				if ((this._OpenRegistrationDate != value))
				{
					this.OnOpenRegistrationDateChanging(value);
					this.SendPropertyChanging();
					this._OpenRegistrationDate = value;
					this.SendPropertyChanged("OpenRegistrationDate");
					this.OnOpenRegistrationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CloseRegistrationDate", DbType="DateTime NOT NULL")]
		public System.DateTime CloseRegistrationDate
		{
			get
			{
				return this._CloseRegistrationDate;
			}
			set
			{
				if ((this._CloseRegistrationDate != value))
				{
					this.OnCloseRegistrationDateChanging(value);
					this.SendPropertyChanging();
					this._CloseRegistrationDate = value;
					this.SendPropertyChanged("CloseRegistrationDate");
					this.OnCloseRegistrationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeginDate", DbType="DateTime NOT NULL")]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime NOT NULL")]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImagePath", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string ImagePath
		{
			get
			{
				return this._ImagePath;
			}
			set
			{
				if ((this._ImagePath != value))
				{
					this.OnImagePathChanging(value);
					this.SendPropertyChanging();
					this._ImagePath = value;
					this.SendPropertyChanged("ImagePath");
					this.OnImagePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rules", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Rules
		{
			get
			{
				return this._Rules;
			}
			set
			{
				if ((this._Rules != value))
				{
					this.OnRulesChanging(value);
					this.SendPropertyChanging();
					this._Rules = value;
					this.SendPropertyChanged("Rules");
					this.OnRulesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountRound", DbType="Int NOT NULL")]
		public int CountRound
		{
			get
			{
				return this._CountRound;
			}
			set
			{
				if ((this._CountRound != value))
				{
					this.OnCountRoundChanging(value);
					this.SendPropertyChanging();
					this._CountRound = value;
					this.SendPropertyChanged("CountRound");
					this.OnCountRoundChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SingleWinPoint", DbType="Int NOT NULL")]
		public int SingleWinPoint
		{
			get
			{
				return this._SingleWinPoint;
			}
			set
			{
				if ((this._SingleWinPoint != value))
				{
					this.OnSingleWinPointChanging(value);
					this.SendPropertyChanging();
					this._SingleWinPoint = value;
					this.SendPropertyChanged("SingleWinPoint");
					this.OnSingleWinPointChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SingleDrawPoint", DbType="Int NOT NULL")]
		public int SingleDrawPoint
		{
			get
			{
				return this._SingleDrawPoint;
			}
			set
			{
				if ((this._SingleDrawPoint != value))
				{
					this.OnSingleDrawPointChanging(value);
					this.SendPropertyChanging();
					this._SingleDrawPoint = value;
					this.SendPropertyChanged("SingleDrawPoint");
					this.OnSingleDrawPointChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlatformID", DbType="Int NOT NULL")]
		public int PlatformID
		{
			get
			{
				return this._PlatformID;
			}
			set
			{
				if ((this._PlatformID != value))
				{
					if (this._Platform.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlatformIDChanging(value);
					this.SendPropertyChanging();
					this._PlatformID = value;
					this.SendPropertyChanged("PlatformID");
					this.OnPlatformIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HostGuest", DbType="Bit NOT NULL")]
		public bool HostGuest
		{
			get
			{
				return this._HostGuest;
			}
			set
			{
				if ((this._HostGuest != value))
				{
					this.OnHostGuestChanging(value);
					this.SendPropertyChanging();
					this._HostGuest = value;
					this.SendPropertyChanged("HostGuest");
					this.OnHostGuestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoubleGoalInGuest", DbType="Bit NOT NULL")]
		public bool DoubleGoalInGuest
		{
			get
			{
				return this._DoubleGoalInGuest;
			}
			set
			{
				if ((this._DoubleGoalInGuest != value))
				{
					this.OnDoubleGoalInGuestChanging(value);
					this.SendPropertyChanging();
					this._DoubleGoalInGuest = value;
					this.SendPropertyChanged("DoubleGoalInGuest");
					this.OnDoubleGoalInGuestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupCount", DbType="Int NOT NULL")]
		public int GroupCount
		{
			get
			{
				return this._GroupCount;
			}
			set
			{
				if ((this._GroupCount != value))
				{
					this.OnGroupCountChanging(value);
					this.SendPropertyChanging();
					this._GroupCount = value;
					this.SendPropertyChanged("GroupCount");
					this.OnGroupCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayersInGroup", DbType="Int NOT NULL")]
		public int PlayersInGroup
		{
			get
			{
				return this._PlayersInGroup;
			}
			set
			{
				if ((this._PlayersInGroup != value))
				{
					this.OnPlayersInGroupChanging(value);
					this.SendPropertyChanging();
					this._PlayersInGroup = value;
					this.SendPropertyChanged("PlayersInGroup");
					this.OnPlayersInGroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExitFromGroup", DbType="Int NOT NULL")]
		public int ExitFromGroup
		{
			get
			{
				return this._ExitFromGroup;
			}
			set
			{
				if ((this._ExitFromGroup != value))
				{
					this.OnExitFromGroupChanging(value);
					this.SendPropertyChanging();
					this._ExitFromGroup = value;
					this.SendPropertyChanged("ExitFromGroup");
					this.OnExitFromGroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Toss", DbType="Bit NOT NULL")]
		public bool Toss
		{
			get
			{
				return this._Toss;
			}
			set
			{
				if ((this._Toss != value))
				{
					this.OnTossChanging(value);
					this.SendPropertyChanging();
					this._Toss = value;
					this.SendPropertyChanged("Toss");
					this.OnTossChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsLive", DbType="Bit NOT NULL")]
		public bool IsLive
		{
			get
			{
				return this._IsLive;
			}
			set
			{
				if ((this._IsLive != value))
				{
					this.OnIsLiveChanging(value);
					this.SendPropertyChanging();
					this._IsLive = value;
					this.SendPropertyChanged("IsLive");
					this.OnIsLiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Place", DbType="NVarChar(500)")]
		public string Place
		{
			get
			{
				return this._Place;
			}
			set
			{
				if ((this._Place != value))
				{
					this.OnPlaceChanging(value);
					this.SendPropertyChanging();
					this._Place = value;
					this.SendPropertyChanged("Place");
					this.OnPlaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsRoundForPoints", DbType="Bit NOT NULL")]
		public bool IsRoundForPoints
		{
			get
			{
				return this._IsRoundForPoints;
			}
			set
			{
				if ((this._IsRoundForPoints != value))
				{
					this.OnIsRoundForPointsChanging(value);
					this.SendPropertyChanging();
					this._IsRoundForPoints = value;
					this.SendPropertyChanged("IsRoundForPoints");
					this.OnIsRoundForPointsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ForumID", DbType="Int")]
		public System.Nullable<int> ForumID
		{
			get
			{
				return this._ForumID;
			}
			set
			{
				if ((this._ForumID != value))
				{
					if (this._Forum.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnForumIDChanging(value);
					this.SendPropertyChanging();
					this._ForumID = value;
					this.SendPropertyChanged("ForumID");
					this.OnForumIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentConditionID", DbType="Int")]
		public System.Nullable<int> TournamentConditionID
		{
			get
			{
				return this._TournamentConditionID;
			}
			set
			{
				if ((this._TournamentConditionID != value))
				{
					if (this._TournamentCondition.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTournamentConditionIDChanging(value);
					this.SendPropertyChanging();
					this._TournamentConditionID = value;
					this.SendPropertyChanged("TournamentConditionID");
					this.OnTournamentConditionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsTeam", DbType="Bit NOT NULL")]
		public bool IsTeam
		{
			get
			{
				return this._IsTeam;
			}
			set
			{
				if ((this._IsTeam != value))
				{
					this.OnIsTeamChanging(value);
					this.SendPropertyChanging();
					this._IsTeam = value;
					this.SendPropertyChanged("IsTeam");
					this.OnIsTeamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamCount", DbType="Int NOT NULL")]
		public int TeamCount
		{
			get
			{
				return this._TeamCount;
			}
			set
			{
				if ((this._TeamCount != value))
				{
					this.OnTeamCountChanging(value);
					this.SendPropertyChanging();
					this._TeamCount = value;
					this.SendPropertyChanged("TeamCount");
					this.OnTeamCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HotReplacement", DbType="Int")]
		public System.Nullable<int> HotReplacement
		{
			get
			{
				return this._HotReplacement;
			}
			set
			{
				if ((this._HotReplacement != value))
				{
					this.OnHotReplacementChanging(value);
					this.SendPropertyChanging();
					this._HotReplacement = value;
					this.SendPropertyChanged("HotReplacement");
					this.OnHotReplacementChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsGroup", DbType="Bit NOT NULL")]
		public bool IsGroup
		{
			get
			{
				return this._IsGroup;
			}
			set
			{
				if ((this._IsGroup != value))
				{
					this.OnIsGroupChanging(value);
					this.SendPropertyChanging();
					this._IsGroup = value;
					this.SendPropertyChanged("IsGroup");
					this.OnIsGroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Keywords", DbType="NVarChar(MAX)")]
		public string Keywords
		{
			get
			{
				return this._Keywords;
			}
			set
			{
				if ((this._Keywords != value))
				{
					this.OnKeywordsChanging(value);
					this.SendPropertyChanging();
					this._Keywords = value;
					this.SendPropertyChanged("Keywords");
					this.OnKeywordsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MetaDescription", DbType="NVarChar(MAX)")]
		public string MetaDescription
		{
			get
			{
				return this._MetaDescription;
			}
			set
			{
				if ((this._MetaDescription != value))
				{
					this.OnMetaDescriptionChanging(value);
					this.SendPropertyChanging();
					this._MetaDescription = value;
					this.SendPropertyChanged("MetaDescription");
					this.OnMetaDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MoneyType", DbType="Int")]
		public System.Nullable<int> MoneyType
		{
			get
			{
				return this._MoneyType;
			}
			set
			{
				if ((this._MoneyType != value))
				{
					this.OnMoneyTypeChanging(value);
					this.SendPropertyChanging();
					this._MoneyType = value;
					this.SendPropertyChanged("MoneyType");
					this.OnMoneyTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fee", DbType="Float")]
		public System.Nullable<double> Fee
		{
			get
			{
				return this._Fee;
			}
			set
			{
				if ((this._Fee != value))
				{
					this.OnFeeChanging(value);
					this.SendPropertyChanging();
					this._Fee = value;
					this.SendPropertyChanged("Fee");
					this.OnFeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tournament_TournamentGroup", Storage="_TournamentGroups", ThisKey="ID", OtherKey="TournamentID")]
		public EntitySet<TournamentGroup> TournamentGroups
		{
			get
			{
				return this._TournamentGroups;
			}
			set
			{
				this._TournamentGroups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tournament_Tour", Storage="_Tours", ThisKey="ID", OtherKey="TournamentID")]
		public EntitySet<Tour> Tours
		{
			get
			{
				return this._Tours;
			}
			set
			{
				this._Tours.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tournament_UserRoleTournament", Storage="_UserRoleTournaments", ThisKey="ID", OtherKey="TournamentID")]
		public EntitySet<UserRoleTournament> UserRoleTournaments
		{
			get
			{
				return this._UserRoleTournaments;
			}
			set
			{
				this._UserRoleTournaments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tournament_Participant", Storage="_Participants", ThisKey="ID", OtherKey="TournamentID")]
		public EntitySet<Participant> Participants
		{
			get
			{
				return this._Participants;
			}
			set
			{
				this._Participants.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tournament_Camera", Storage="_Cameras", ThisKey="ID", OtherKey="TournamentID")]
		public EntitySet<Camera> Cameras
		{
			get
			{
				return this._Cameras;
			}
			set
			{
				this._Cameras.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tournament_RatingDetail", Storage="_RatingDetails", ThisKey="ID", OtherKey="TournamentID")]
		public EntitySet<RatingDetail> RatingDetails
		{
			get
			{
				return this._RatingDetails;
			}
			set
			{
				this._RatingDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tournament_TournamentSocialPost", Storage="_TournamentSocialPosts", ThisKey="ID", OtherKey="TournamentID")]
		public EntitySet<TournamentSocialPost> TournamentSocialPosts
		{
			get
			{
				return this._TournamentSocialPosts;
			}
			set
			{
				this._TournamentSocialPosts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tournament_Notice", Storage="_Notices", ThisKey="ID", OtherKey="TournamentID")]
		public EntitySet<Notice> Notices
		{
			get
			{
				return this._Notices;
			}
			set
			{
				this._Notices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tournament_ChatRoom", Storage="_ChatRooms", ThisKey="ID", OtherKey="TournamentID")]
		public EntitySet<ChatRoom> ChatRooms
		{
			get
			{
				return this._ChatRooms;
			}
			set
			{
				this._ChatRooms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tournament_Award", Storage="_Awards", ThisKey="ID", OtherKey="TournamentID")]
		public EntitySet<Award> Awards
		{
			get
			{
				return this._Awards;
			}
			set
			{
				this._Awards.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tournament_MoneyDetail", Storage="_MoneyDetails", ThisKey="ID", OtherKey="TournamentID")]
		public EntitySet<MoneyDetail> MoneyDetails
		{
			get
			{
				return this._MoneyDetails;
			}
			set
			{
				this._MoneyDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tournament_Match", Storage="_Matches", ThisKey="ID", OtherKey="TournamentID")]
		public EntitySet<Match> Matches
		{
			get
			{
				return this._Matches;
			}
			set
			{
				this._Matches.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forum_Tournament", Storage="_Forum", ThisKey="ForumID", OtherKey="ID", IsForeignKey=true, DeleteRule="SET NULL")]
		public Forum Forum
		{
			get
			{
				return this._Forum.Entity;
			}
			set
			{
				Forum previousValue = this._Forum.Entity;
				if (((previousValue != value) 
							|| (this._Forum.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Forum.Entity = null;
						previousValue.Tournaments.Remove(this);
					}
					this._Forum.Entity = value;
					if ((value != null))
					{
						value.Tournaments.Add(this);
						this._ForumID = value.ID;
					}
					else
					{
						this._ForumID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Forum");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_Tournament", Storage="_Game", ThisKey="GameID", OtherKey="ID", IsForeignKey=true)]
		public Game Game
		{
			get
			{
				return this._Game.Entity;
			}
			set
			{
				Game previousValue = this._Game.Entity;
				if (((previousValue != value) 
							|| (this._Game.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Game.Entity = null;
						previousValue.Tournaments.Remove(this);
					}
					this._Game.Entity = value;
					if ((value != null))
					{
						value.Tournaments.Add(this);
						this._GameID = value.ID;
					}
					else
					{
						this._GameID = default(int);
					}
					this.SendPropertyChanged("Game");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Platform_Tournament", Storage="_Platform", ThisKey="PlatformID", OtherKey="ID", IsForeignKey=true)]
		public Platform Platform
		{
			get
			{
				return this._Platform.Entity;
			}
			set
			{
				Platform previousValue = this._Platform.Entity;
				if (((previousValue != value) 
							|| (this._Platform.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Platform.Entity = null;
						previousValue.Tournaments.Remove(this);
					}
					this._Platform.Entity = value;
					if ((value != null))
					{
						value.Tournaments.Add(this);
						this._PlatformID = value.ID;
					}
					else
					{
						this._PlatformID = default(int);
					}
					this.SendPropertyChanged("Platform");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TournamentCondition_Tournament", Storage="_TournamentCondition", ThisKey="TournamentConditionID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public TournamentCondition TournamentCondition
		{
			get
			{
				return this._TournamentCondition.Entity;
			}
			set
			{
				TournamentCondition previousValue = this._TournamentCondition.Entity;
				if (((previousValue != value) 
							|| (this._TournamentCondition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TournamentCondition.Entity = null;
						previousValue.Tournaments.Remove(this);
					}
					this._TournamentCondition.Entity = value;
					if ((value != null))
					{
						value.Tournaments.Add(this);
						this._TournamentConditionID = value.ID;
					}
					else
					{
						this._TournamentConditionID = default(Nullable<int>);
					}
					this.SendPropertyChanged("TournamentCondition");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeagueLevel_Tournament", Storage="_LeagueLevel", ThisKey="LeagueLevelID", OtherKey="ID", IsForeignKey=true)]
		public LeagueLevel LeagueLevel
		{
			get
			{
				return this._LeagueLevel.Entity;
			}
			set
			{
				LeagueLevel previousValue = this._LeagueLevel.Entity;
				if (((previousValue != value) 
							|| (this._LeagueLevel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LeagueLevel.Entity = null;
						previousValue.Tournaments.Remove(this);
					}
					this._LeagueLevel.Entity = value;
					if ((value != null))
					{
						value.Tournaments.Add(this);
						this._LeagueLevelID = value.ID;
					}
					else
					{
						this._LeagueLevelID = default(Nullable<int>);
					}
					this.SendPropertyChanged("LeagueLevel");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeagueSeason_Tournament", Storage="_LeagueSeason", ThisKey="LeagueSeasonID", OtherKey="ID", IsForeignKey=true)]
		public LeagueSeason LeagueSeason
		{
			get
			{
				return this._LeagueSeason.Entity;
			}
			set
			{
				LeagueSeason previousValue = this._LeagueSeason.Entity;
				if (((previousValue != value) 
							|| (this._LeagueSeason.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LeagueSeason.Entity = null;
						previousValue.Tournaments.Remove(this);
					}
					this._LeagueSeason.Entity = value;
					if ((value != null))
					{
						value.Tournaments.Add(this);
						this._LeagueSeasonID = value.ID;
					}
					else
					{
						this._LeagueSeasonID = default(Nullable<int>);
					}
					this.SendPropertyChanged("LeagueSeason");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TournamentGroups(TournamentGroup entity)
		{
			this.SendPropertyChanging();
			entity.Tournament = this;
		}
		
		private void detach_TournamentGroups(TournamentGroup entity)
		{
			this.SendPropertyChanging();
			entity.Tournament = null;
		}
		
		private void attach_Tours(Tour entity)
		{
			this.SendPropertyChanging();
			entity.Tournament = this;
		}
		
		private void detach_Tours(Tour entity)
		{
			this.SendPropertyChanging();
			entity.Tournament = null;
		}
		
		private void attach_UserRoleTournaments(UserRoleTournament entity)
		{
			this.SendPropertyChanging();
			entity.Tournament = this;
		}
		
		private void detach_UserRoleTournaments(UserRoleTournament entity)
		{
			this.SendPropertyChanging();
			entity.Tournament = null;
		}
		
		private void attach_Participants(Participant entity)
		{
			this.SendPropertyChanging();
			entity.Tournament = this;
		}
		
		private void detach_Participants(Participant entity)
		{
			this.SendPropertyChanging();
			entity.Tournament = null;
		}
		
		private void attach_Cameras(Camera entity)
		{
			this.SendPropertyChanging();
			entity.Tournament = this;
		}
		
		private void detach_Cameras(Camera entity)
		{
			this.SendPropertyChanging();
			entity.Tournament = null;
		}
		
		private void attach_RatingDetails(RatingDetail entity)
		{
			this.SendPropertyChanging();
			entity.Tournament = this;
		}
		
		private void detach_RatingDetails(RatingDetail entity)
		{
			this.SendPropertyChanging();
			entity.Tournament = null;
		}
		
		private void attach_TournamentSocialPosts(TournamentSocialPost entity)
		{
			this.SendPropertyChanging();
			entity.Tournament = this;
		}
		
		private void detach_TournamentSocialPosts(TournamentSocialPost entity)
		{
			this.SendPropertyChanging();
			entity.Tournament = null;
		}
		
		private void attach_Notices(Notice entity)
		{
			this.SendPropertyChanging();
			entity.Tournament = this;
		}
		
		private void detach_Notices(Notice entity)
		{
			this.SendPropertyChanging();
			entity.Tournament = null;
		}
		
		private void attach_ChatRooms(ChatRoom entity)
		{
			this.SendPropertyChanging();
			entity.Tournament = this;
		}
		
		private void detach_ChatRooms(ChatRoom entity)
		{
			this.SendPropertyChanging();
			entity.Tournament = null;
		}
		
		private void attach_Awards(Award entity)
		{
			this.SendPropertyChanging();
			entity.Tournament = this;
		}
		
		private void detach_Awards(Award entity)
		{
			this.SendPropertyChanging();
			entity.Tournament = null;
		}
		
		private void attach_MoneyDetails(MoneyDetail entity)
		{
			this.SendPropertyChanging();
			entity.Tournament = this;
		}
		
		private void detach_MoneyDetails(MoneyDetail entity)
		{
			this.SendPropertyChanging();
			entity.Tournament = null;
		}
		
		private void attach_Matches(Match entity)
		{
			this.SendPropertyChanging();
			entity.Tournament = this;
		}
		
		private void detach_Matches(Match entity)
		{
			this.SendPropertyChanging();
			entity.Tournament = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LeagueLevel")]
	public partial class LeagueLevel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _LeagueID;
		
		private int _ForumID;
		
		private string _Image;
		
		private string _Name;
		
		private int _Level;
		
		private int _Quantity;
		
		private EntitySet<Match> _Matches;
		
		private EntitySet<Tournament> _Tournaments;
		
		private EntitySet<LeagueParticipant> _LeagueParticipants;
		
		private EntityRef<Forum> _Forum;
		
		private EntityRef<League> _League;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnLeagueIDChanging(int value);
    partial void OnLeagueIDChanged();
    partial void OnForumIDChanging(int value);
    partial void OnForumIDChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLevelChanging(int value);
    partial void OnLevelChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    #endregion
		
		public LeagueLevel()
		{
			this._Matches = new EntitySet<Match>(new Action<Match>(this.attach_Matches), new Action<Match>(this.detach_Matches));
			this._Tournaments = new EntitySet<Tournament>(new Action<Tournament>(this.attach_Tournaments), new Action<Tournament>(this.detach_Tournaments));
			this._LeagueParticipants = new EntitySet<LeagueParticipant>(new Action<LeagueParticipant>(this.attach_LeagueParticipants), new Action<LeagueParticipant>(this.detach_LeagueParticipants));
			this._Forum = default(EntityRef<Forum>);
			this._League = default(EntityRef<League>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeagueID", DbType="Int NOT NULL")]
		public int LeagueID
		{
			get
			{
				return this._LeagueID;
			}
			set
			{
				if ((this._LeagueID != value))
				{
					if (this._League.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLeagueIDChanging(value);
					this.SendPropertyChanging();
					this._LeagueID = value;
					this.SendPropertyChanged("LeagueID");
					this.OnLeagueIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ForumID", DbType="Int NOT NULL")]
		public int ForumID
		{
			get
			{
				return this._ForumID;
			}
			set
			{
				if ((this._ForumID != value))
				{
					if (this._Forum.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnForumIDChanging(value);
					this.SendPropertyChanging();
					this._ForumID = value;
					this.SendPropertyChanged("ForumID");
					this.OnForumIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="NVarChar(150)")]
		public string Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Level]", Storage="_Level", DbType="Int NOT NULL")]
		public int Level
		{
			get
			{
				return this._Level;
			}
			set
			{
				if ((this._Level != value))
				{
					this.OnLevelChanging(value);
					this.SendPropertyChanging();
					this._Level = value;
					this.SendPropertyChanged("Level");
					this.OnLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeagueLevel_Match", Storage="_Matches", ThisKey="ID", OtherKey="LeagueLevelID")]
		public EntitySet<Match> Matches
		{
			get
			{
				return this._Matches;
			}
			set
			{
				this._Matches.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeagueLevel_Tournament", Storage="_Tournaments", ThisKey="ID", OtherKey="LeagueLevelID")]
		public EntitySet<Tournament> Tournaments
		{
			get
			{
				return this._Tournaments;
			}
			set
			{
				this._Tournaments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeagueLevel_LeagueParticipant", Storage="_LeagueParticipants", ThisKey="ID", OtherKey="LeagueLevelID")]
		public EntitySet<LeagueParticipant> LeagueParticipants
		{
			get
			{
				return this._LeagueParticipants;
			}
			set
			{
				this._LeagueParticipants.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forum_LeagueLevel", Storage="_Forum", ThisKey="ForumID", OtherKey="ID", IsForeignKey=true)]
		public Forum Forum
		{
			get
			{
				return this._Forum.Entity;
			}
			set
			{
				Forum previousValue = this._Forum.Entity;
				if (((previousValue != value) 
							|| (this._Forum.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Forum.Entity = null;
						previousValue.LeagueLevels.Remove(this);
					}
					this._Forum.Entity = value;
					if ((value != null))
					{
						value.LeagueLevels.Add(this);
						this._ForumID = value.ID;
					}
					else
					{
						this._ForumID = default(int);
					}
					this.SendPropertyChanged("Forum");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="League_LeagueLevel", Storage="_League", ThisKey="LeagueID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public League League
		{
			get
			{
				return this._League.Entity;
			}
			set
			{
				League previousValue = this._League.Entity;
				if (((previousValue != value) 
							|| (this._League.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._League.Entity = null;
						previousValue.LeagueLevels.Remove(this);
					}
					this._League.Entity = value;
					if ((value != null))
					{
						value.LeagueLevels.Add(this);
						this._LeagueID = value.ID;
					}
					else
					{
						this._LeagueID = default(int);
					}
					this.SendPropertyChanged("League");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Matches(Match entity)
		{
			this.SendPropertyChanging();
			entity.LeagueLevel = this;
		}
		
		private void detach_Matches(Match entity)
		{
			this.SendPropertyChanging();
			entity.LeagueLevel = null;
		}
		
		private void attach_Tournaments(Tournament entity)
		{
			this.SendPropertyChanging();
			entity.LeagueLevel = this;
		}
		
		private void detach_Tournaments(Tournament entity)
		{
			this.SendPropertyChanging();
			entity.LeagueLevel = null;
		}
		
		private void attach_LeagueParticipants(LeagueParticipant entity)
		{
			this.SendPropertyChanging();
			entity.LeagueLevel = this;
		}
		
		private void detach_LeagueParticipants(LeagueParticipant entity)
		{
			this.SendPropertyChanging();
			entity.LeagueLevel = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LeagueParticipant")]
	public partial class LeagueParticipant : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _LeagueSeasonID;
		
		private int _LeagueLevelID;
		
		private int _ParticipantID;
		
		private System.Nullable<int> _Place;
		
		private EntityRef<LeagueLevel> _LeagueLevel;
		
		private EntityRef<Participant> _Participant;
		
		private EntityRef<LeagueSeason> _LeagueSeason;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnLeagueSeasonIDChanging(int value);
    partial void OnLeagueSeasonIDChanged();
    partial void OnLeagueLevelIDChanging(int value);
    partial void OnLeagueLevelIDChanged();
    partial void OnParticipantIDChanging(int value);
    partial void OnParticipantIDChanged();
    partial void OnPlaceChanging(System.Nullable<int> value);
    partial void OnPlaceChanged();
    #endregion
		
		public LeagueParticipant()
		{
			this._LeagueLevel = default(EntityRef<LeagueLevel>);
			this._Participant = default(EntityRef<Participant>);
			this._LeagueSeason = default(EntityRef<LeagueSeason>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeagueSeasonID", DbType="Int NOT NULL")]
		public int LeagueSeasonID
		{
			get
			{
				return this._LeagueSeasonID;
			}
			set
			{
				if ((this._LeagueSeasonID != value))
				{
					if (this._LeagueSeason.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLeagueSeasonIDChanging(value);
					this.SendPropertyChanging();
					this._LeagueSeasonID = value;
					this.SendPropertyChanged("LeagueSeasonID");
					this.OnLeagueSeasonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeagueLevelID", DbType="Int NOT NULL")]
		public int LeagueLevelID
		{
			get
			{
				return this._LeagueLevelID;
			}
			set
			{
				if ((this._LeagueLevelID != value))
				{
					if (this._LeagueLevel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLeagueLevelIDChanging(value);
					this.SendPropertyChanging();
					this._LeagueLevelID = value;
					this.SendPropertyChanged("LeagueLevelID");
					this.OnLeagueLevelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParticipantID", DbType="Int NOT NULL")]
		public int ParticipantID
		{
			get
			{
				return this._ParticipantID;
			}
			set
			{
				if ((this._ParticipantID != value))
				{
					if (this._Participant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParticipantIDChanging(value);
					this.SendPropertyChanging();
					this._ParticipantID = value;
					this.SendPropertyChanged("ParticipantID");
					this.OnParticipantIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Place", DbType="Int")]
		public System.Nullable<int> Place
		{
			get
			{
				return this._Place;
			}
			set
			{
				if ((this._Place != value))
				{
					this.OnPlaceChanging(value);
					this.SendPropertyChanging();
					this._Place = value;
					this.SendPropertyChanged("Place");
					this.OnPlaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeagueLevel_LeagueParticipant", Storage="_LeagueLevel", ThisKey="LeagueLevelID", OtherKey="ID", IsForeignKey=true)]
		public LeagueLevel LeagueLevel
		{
			get
			{
				return this._LeagueLevel.Entity;
			}
			set
			{
				LeagueLevel previousValue = this._LeagueLevel.Entity;
				if (((previousValue != value) 
							|| (this._LeagueLevel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LeagueLevel.Entity = null;
						previousValue.LeagueParticipants.Remove(this);
					}
					this._LeagueLevel.Entity = value;
					if ((value != null))
					{
						value.LeagueParticipants.Add(this);
						this._LeagueLevelID = value.ID;
					}
					else
					{
						this._LeagueLevelID = default(int);
					}
					this.SendPropertyChanged("LeagueLevel");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Participant_LeagueParticipant", Storage="_Participant", ThisKey="ParticipantID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Participant Participant
		{
			get
			{
				return this._Participant.Entity;
			}
			set
			{
				Participant previousValue = this._Participant.Entity;
				if (((previousValue != value) 
							|| (this._Participant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Participant.Entity = null;
						previousValue.LeagueParticipants.Remove(this);
					}
					this._Participant.Entity = value;
					if ((value != null))
					{
						value.LeagueParticipants.Add(this);
						this._ParticipantID = value.ID;
					}
					else
					{
						this._ParticipantID = default(int);
					}
					this.SendPropertyChanged("Participant");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeagueSeason_LeagueParticipant", Storage="_LeagueSeason", ThisKey="LeagueSeasonID", OtherKey="ID", IsForeignKey=true)]
		public LeagueSeason LeagueSeason
		{
			get
			{
				return this._LeagueSeason.Entity;
			}
			set
			{
				LeagueSeason previousValue = this._LeagueSeason.Entity;
				if (((previousValue != value) 
							|| (this._LeagueSeason.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LeagueSeason.Entity = null;
						previousValue.LeagueParticipants.Remove(this);
					}
					this._LeagueSeason.Entity = value;
					if ((value != null))
					{
						value.LeagueParticipants.Add(this);
						this._LeagueSeasonID = value.ID;
					}
					else
					{
						this._LeagueSeasonID = default(int);
					}
					this.SendPropertyChanged("LeagueSeason");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LeagueSeason")]
	public partial class LeagueSeason : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _LeagueID;
		
		private string _Image;
		
		private System.DateTime _StartDate;
		
		private System.DateTime _EndMainTourDate;
		
		private System.DateTime _EndDate;
		
		private string _Name;
		
		private int _Status;
		
		private EntitySet<Match> _Matches;
		
		private EntitySet<Tournament> _Tournaments;
		
		private EntitySet<LeagueParticipant> _LeagueParticipants;
		
		private EntityRef<League> _League;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnLeagueIDChanging(int value);
    partial void OnLeagueIDChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndMainTourDateChanging(System.DateTime value);
    partial void OnEndMainTourDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    #endregion
		
		public LeagueSeason()
		{
			this._Matches = new EntitySet<Match>(new Action<Match>(this.attach_Matches), new Action<Match>(this.detach_Matches));
			this._Tournaments = new EntitySet<Tournament>(new Action<Tournament>(this.attach_Tournaments), new Action<Tournament>(this.detach_Tournaments));
			this._LeagueParticipants = new EntitySet<LeagueParticipant>(new Action<LeagueParticipant>(this.attach_LeagueParticipants), new Action<LeagueParticipant>(this.detach_LeagueParticipants));
			this._League = default(EntityRef<League>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeagueID", DbType="Int NOT NULL")]
		public int LeagueID
		{
			get
			{
				return this._LeagueID;
			}
			set
			{
				if ((this._LeagueID != value))
				{
					if (this._League.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLeagueIDChanging(value);
					this.SendPropertyChanging();
					this._LeagueID = value;
					this.SendPropertyChanged("LeagueID");
					this.OnLeagueIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="NVarChar(150)")]
		public string Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndMainTourDate", DbType="DateTime NOT NULL")]
		public System.DateTime EndMainTourDate
		{
			get
			{
				return this._EndMainTourDate;
			}
			set
			{
				if ((this._EndMainTourDate != value))
				{
					this.OnEndMainTourDateChanging(value);
					this.SendPropertyChanging();
					this._EndMainTourDate = value;
					this.SendPropertyChanged("EndMainTourDate");
					this.OnEndMainTourDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime NOT NULL")]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeagueSeason_Match", Storage="_Matches", ThisKey="ID", OtherKey="LeagueSeasonID")]
		public EntitySet<Match> Matches
		{
			get
			{
				return this._Matches;
			}
			set
			{
				this._Matches.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeagueSeason_Tournament", Storage="_Tournaments", ThisKey="ID", OtherKey="LeagueSeasonID")]
		public EntitySet<Tournament> Tournaments
		{
			get
			{
				return this._Tournaments;
			}
			set
			{
				this._Tournaments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeagueSeason_LeagueParticipant", Storage="_LeagueParticipants", ThisKey="ID", OtherKey="LeagueSeasonID")]
		public EntitySet<LeagueParticipant> LeagueParticipants
		{
			get
			{
				return this._LeagueParticipants;
			}
			set
			{
				this._LeagueParticipants.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="League_LeagueSeason", Storage="_League", ThisKey="LeagueID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public League League
		{
			get
			{
				return this._League.Entity;
			}
			set
			{
				League previousValue = this._League.Entity;
				if (((previousValue != value) 
							|| (this._League.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._League.Entity = null;
						previousValue.LeagueSeasons.Remove(this);
					}
					this._League.Entity = value;
					if ((value != null))
					{
						value.LeagueSeasons.Add(this);
						this._LeagueID = value.ID;
					}
					else
					{
						this._LeagueID = default(int);
					}
					this.SendPropertyChanged("League");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Matches(Match entity)
		{
			this.SendPropertyChanging();
			entity.LeagueSeason = this;
		}
		
		private void detach_Matches(Match entity)
		{
			this.SendPropertyChanging();
			entity.LeagueSeason = null;
		}
		
		private void attach_Tournaments(Tournament entity)
		{
			this.SendPropertyChanging();
			entity.LeagueSeason = this;
		}
		
		private void detach_Tournaments(Tournament entity)
		{
			this.SendPropertyChanging();
			entity.LeagueSeason = null;
		}
		
		private void attach_LeagueParticipants(LeagueParticipant entity)
		{
			this.SendPropertyChanging();
			entity.LeagueSeason = this;
		}
		
		private void detach_LeagueParticipants(LeagueParticipant entity)
		{
			this.SendPropertyChanging();
			entity.LeagueSeason = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.League")]
	public partial class League : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _GameID;
		
		private int _ForumID;
		
		private string _Name;
		
		private string _Image;
		
		private bool _IsGroup;
		
		private int _CountRound;
		
		private int _SingleWinPoint;
		
		private int _SingleDrawPoint;
		
		private bool _DoubleGoalInGuest;
		
		private bool _HostGuest;
		
		private System.Nullable<int> _TeamCount;
		
		private System.Nullable<int> _HotReplacement;
		
		private string _Rules;
		
		private string _Description;
		
		private string _Url;
		
		private bool _IsRoundForPoints;
		
		private EntitySet<LeagueLevel> _LeagueLevels;
		
		private EntitySet<LeagueSeason> _LeagueSeasons;
		
		private EntityRef<Forum> _Forum;
		
		private EntityRef<Game> _Game;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnGameIDChanging(int value);
    partial void OnGameIDChanged();
    partial void OnForumIDChanging(int value);
    partial void OnForumIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    partial void OnIsGroupChanging(bool value);
    partial void OnIsGroupChanged();
    partial void OnCountRoundChanging(int value);
    partial void OnCountRoundChanged();
    partial void OnSingleWinPointChanging(int value);
    partial void OnSingleWinPointChanged();
    partial void OnSingleDrawPointChanging(int value);
    partial void OnSingleDrawPointChanged();
    partial void OnDoubleGoalInGuestChanging(bool value);
    partial void OnDoubleGoalInGuestChanged();
    partial void OnHostGuestChanging(bool value);
    partial void OnHostGuestChanged();
    partial void OnTeamCountChanging(System.Nullable<int> value);
    partial void OnTeamCountChanged();
    partial void OnHotReplacementChanging(System.Nullable<int> value);
    partial void OnHotReplacementChanged();
    partial void OnRulesChanging(string value);
    partial void OnRulesChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnIsRoundForPointsChanging(bool value);
    partial void OnIsRoundForPointsChanged();
    #endregion
		
		public League()
		{
			this._LeagueLevels = new EntitySet<LeagueLevel>(new Action<LeagueLevel>(this.attach_LeagueLevels), new Action<LeagueLevel>(this.detach_LeagueLevels));
			this._LeagueSeasons = new EntitySet<LeagueSeason>(new Action<LeagueSeason>(this.attach_LeagueSeasons), new Action<LeagueSeason>(this.detach_LeagueSeasons));
			this._Forum = default(EntityRef<Forum>);
			this._Game = default(EntityRef<Game>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameID", DbType="Int NOT NULL")]
		public int GameID
		{
			get
			{
				return this._GameID;
			}
			set
			{
				if ((this._GameID != value))
				{
					if (this._Game.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameIDChanging(value);
					this.SendPropertyChanging();
					this._GameID = value;
					this.SendPropertyChanged("GameID");
					this.OnGameIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ForumID", DbType="Int NOT NULL")]
		public int ForumID
		{
			get
			{
				return this._ForumID;
			}
			set
			{
				if ((this._ForumID != value))
				{
					if (this._Forum.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnForumIDChanging(value);
					this.SendPropertyChanging();
					this._ForumID = value;
					this.SendPropertyChanged("ForumID");
					this.OnForumIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsGroup", DbType="Bit NOT NULL")]
		public bool IsGroup
		{
			get
			{
				return this._IsGroup;
			}
			set
			{
				if ((this._IsGroup != value))
				{
					this.OnIsGroupChanging(value);
					this.SendPropertyChanging();
					this._IsGroup = value;
					this.SendPropertyChanged("IsGroup");
					this.OnIsGroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountRound", DbType="Int NOT NULL")]
		public int CountRound
		{
			get
			{
				return this._CountRound;
			}
			set
			{
				if ((this._CountRound != value))
				{
					this.OnCountRoundChanging(value);
					this.SendPropertyChanging();
					this._CountRound = value;
					this.SendPropertyChanged("CountRound");
					this.OnCountRoundChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SingleWinPoint", DbType="Int NOT NULL")]
		public int SingleWinPoint
		{
			get
			{
				return this._SingleWinPoint;
			}
			set
			{
				if ((this._SingleWinPoint != value))
				{
					this.OnSingleWinPointChanging(value);
					this.SendPropertyChanging();
					this._SingleWinPoint = value;
					this.SendPropertyChanged("SingleWinPoint");
					this.OnSingleWinPointChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SingleDrawPoint", DbType="Int NOT NULL")]
		public int SingleDrawPoint
		{
			get
			{
				return this._SingleDrawPoint;
			}
			set
			{
				if ((this._SingleDrawPoint != value))
				{
					this.OnSingleDrawPointChanging(value);
					this.SendPropertyChanging();
					this._SingleDrawPoint = value;
					this.SendPropertyChanged("SingleDrawPoint");
					this.OnSingleDrawPointChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoubleGoalInGuest", DbType="Bit NOT NULL")]
		public bool DoubleGoalInGuest
		{
			get
			{
				return this._DoubleGoalInGuest;
			}
			set
			{
				if ((this._DoubleGoalInGuest != value))
				{
					this.OnDoubleGoalInGuestChanging(value);
					this.SendPropertyChanging();
					this._DoubleGoalInGuest = value;
					this.SendPropertyChanged("DoubleGoalInGuest");
					this.OnDoubleGoalInGuestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HostGuest", DbType="Bit NOT NULL")]
		public bool HostGuest
		{
			get
			{
				return this._HostGuest;
			}
			set
			{
				if ((this._HostGuest != value))
				{
					this.OnHostGuestChanging(value);
					this.SendPropertyChanging();
					this._HostGuest = value;
					this.SendPropertyChanged("HostGuest");
					this.OnHostGuestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamCount", DbType="Int")]
		public System.Nullable<int> TeamCount
		{
			get
			{
				return this._TeamCount;
			}
			set
			{
				if ((this._TeamCount != value))
				{
					this.OnTeamCountChanging(value);
					this.SendPropertyChanging();
					this._TeamCount = value;
					this.SendPropertyChanged("TeamCount");
					this.OnTeamCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HotReplacement", DbType="Int")]
		public System.Nullable<int> HotReplacement
		{
			get
			{
				return this._HotReplacement;
			}
			set
			{
				if ((this._HotReplacement != value))
				{
					this.OnHotReplacementChanging(value);
					this.SendPropertyChanging();
					this._HotReplacement = value;
					this.SendPropertyChanged("HotReplacement");
					this.OnHotReplacementChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rules", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Rules
		{
			get
			{
				return this._Rules;
			}
			set
			{
				if ((this._Rules != value))
				{
					this.OnRulesChanging(value);
					this.SendPropertyChanging();
					this._Rules = value;
					this.SendPropertyChanged("Rules");
					this.OnRulesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsRoundForPoints", DbType="Bit NOT NULL")]
		public bool IsRoundForPoints
		{
			get
			{
				return this._IsRoundForPoints;
			}
			set
			{
				if ((this._IsRoundForPoints != value))
				{
					this.OnIsRoundForPointsChanging(value);
					this.SendPropertyChanging();
					this._IsRoundForPoints = value;
					this.SendPropertyChanged("IsRoundForPoints");
					this.OnIsRoundForPointsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="League_LeagueLevel", Storage="_LeagueLevels", ThisKey="ID", OtherKey="LeagueID")]
		public EntitySet<LeagueLevel> LeagueLevels
		{
			get
			{
				return this._LeagueLevels;
			}
			set
			{
				this._LeagueLevels.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="League_LeagueSeason", Storage="_LeagueSeasons", ThisKey="ID", OtherKey="LeagueID")]
		public EntitySet<LeagueSeason> LeagueSeasons
		{
			get
			{
				return this._LeagueSeasons;
			}
			set
			{
				this._LeagueSeasons.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forum_League", Storage="_Forum", ThisKey="ForumID", OtherKey="ID", IsForeignKey=true)]
		public Forum Forum
		{
			get
			{
				return this._Forum.Entity;
			}
			set
			{
				Forum previousValue = this._Forum.Entity;
				if (((previousValue != value) 
							|| (this._Forum.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Forum.Entity = null;
						previousValue.Leagues.Remove(this);
					}
					this._Forum.Entity = value;
					if ((value != null))
					{
						value.Leagues.Add(this);
						this._ForumID = value.ID;
					}
					else
					{
						this._ForumID = default(int);
					}
					this.SendPropertyChanged("Forum");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_League", Storage="_Game", ThisKey="GameID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Game Game
		{
			get
			{
				return this._Game.Entity;
			}
			set
			{
				Game previousValue = this._Game.Entity;
				if (((previousValue != value) 
							|| (this._Game.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Game.Entity = null;
						previousValue.Leagues.Remove(this);
					}
					this._Game.Entity = value;
					if ((value != null))
					{
						value.Leagues.Add(this);
						this._GameID = value.ID;
					}
					else
					{
						this._GameID = default(int);
					}
					this.SendPropertyChanged("Game");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LeagueLevels(LeagueLevel entity)
		{
			this.SendPropertyChanging();
			entity.League = this;
		}
		
		private void detach_LeagueLevels(LeagueLevel entity)
		{
			this.SendPropertyChanging();
			entity.League = null;
		}
		
		private void attach_LeagueSeasons(LeagueSeason entity)
		{
			this.SendPropertyChanging();
			entity.League = this;
		}
		
		private void detach_LeagueSeasons(LeagueSeason entity)
		{
			this.SendPropertyChanging();
			entity.League = null;
		}
	}
}
#pragma warning restore 1591
