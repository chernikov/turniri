@model turniri.Models.ViewModels.TournamentView
@{
    ViewBag.Title = Model.ID == 0 ? "Добавить турнир" : "Изменить турнир";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
}
@section header
{
    <script type="text/javascript" src="/Media/scripts/admin/edit-tournament.js"></script>
}
<h2>@(Model.ID == 0 ? "Добавить турнир" : "Изменить турнир")</h2>
<p>
</p>
@Html.ValidationSummary()
@using (Html.BeginForm("Edit", "Tournament", FormMethod.Post, new { @class = "form-horizontal" }))
{
    @Html.Hidden("ID", Model.ID)
    @Html.Hidden("LeagueID", Model.LeagueID)
    @Html.Hidden("Status", Model.Status)
    @Html.Hidden("ImagePath", Model.ImagePath)

    if (Model.DisablePlatformAndGame)
    {
        @Html.Hidden("PlatformID", Model.PlatformID)
        @Html.Hidden("GameID", Model.GameID)
    }
    <fieldset>
        @if (Model.DisablePlatformAndGame)
        {
            <div class="control-group">
                <label class="control-label">
                    Платформа
                </label>
                <div class="controls">
                    @Model.PlatformName
                </div>
            </div>
            <div class="control-group">
                <label class="control-label">
                    Игра
                </label>
                <div class="controls">
                    @Model.GameName
                </div>
            </div>
        }
        else
        {
            <div class="control-group">
                <label class="control-label">
                    Платформа
                </label>
                <div class="controls">
                    @Html.DropDownList("PlatformID", Model.PlatformSelectList, new { @class = "input-xlarge" })

                    <div class="hint">
                        Выберите платформу и игру, по которой хотите создать турнир. После
                        <strong>создания матчей</strong> или <strong>регистрации игроков</strong> эти данные
                        нельзя будет поменять.
                    </div>
                </div>
            </div>
            <div id="GameWrapper">
                <div class="control-group">
                    <label class="control-label">
                        Игра
                    </label>
                    <div class="controls">
                        @Html.DropDownList("GameID", Model.GamesSelectList, new { @class = "input-xlarge" })
                    </div>
                </div>
            </div>
        }
        <div class="control-group">
            <label class="control-label">
                Название
            </label>
            <div class="controls">
                @Html.TextBox("Name", Model.Name, new { @class = "input-xlarge" })
                @Html.ValidationMessage("Name")
            </div>
        </div>
        <div class="control-group">
            <label class="control-label" for="IsLive">
                Живой турнир
            </label>
            <div class="controls">
                @Html.CheckBox("IsLive", Model.IsLive)
                <div class="hint">
                    Отметьте если турнир будет проведен <strong>вживую</strong>, т.е.
                    в каком-то определенном реальном месте.
                </div>
            </div>
        </div>

        <div class="control-group" id="PlaceWrapper">
            <label class="control-label">
                Место проведения
            </label>
            <div class="controls">
                @Html.TextBox("Place", Model.Place, new { @class = "input-xlarge" })
                @Html.ValidationMessage("Place")

                <div class="hint">
                    Укажите <strong>реальное место</strong> проведения турнира
                </div>
            </div>
        </div>
        <div class="control-group">
            <label class="control-label">
                Картинка
            </label>
            <div class="controls">
                <img src="@Model.FullImagePath" alt="avatar" id="PreviewImage" />
                <br />
                <div class="btn btn-danger" id="DeletePreview">
                    удалить
                </div>
                <div class="btn" id="ChangePreview">
                    загрузить фото
                </div>
                <div class="hint">
                    Загрузите <strong>картинку</strong> и она автоматически преобразуется
                    до нужных размеров.
                </div>
            </div>
            @Html.ValidationMessage("ImagePath")
        </div>
        @if (Model.Status == 0 || Model.Status == (int)turniri.Model.Tournament.StatusEnum.Created)
        {
            <div class="control-group">
                <label class="control-label" for="MoneyType">
                    Тип взноса
                </label>
                <div class="controls">
                    @Html.DropDownList("MoneyType", Model.SelectListMoneyType)
                    <div class="hint">
                        Турнир может быть на <strong>реальные деньги</strong> (золотой ТИ) или виртуальные
                        деньги (белый ТИ) или без взноса
                    </div>
                </div>
            </div>
        }
        <div class="control-group" id="FeeWrapper">
            <label class="control-label">
                Взнос
            </label>
            <div class="controls">
                @if (Model.Status == 0 || Model.Status == (int)turniri.Model.Tournament.StatusEnum.Created)
                {
                    @Html.TextBox("Fee", Model.Fee, new { @class = "input-xlarge" })
                    @Html.ValidationMessage("Fee")
                }
                else
                {
                    @Html.Hidden("MoneyType", Model.MoneyType)
                    @Html.Hidden("Fee", Model.Fee)
                    <span class="text">@Model.Fee  @Model.MoneyTypeName</span>
                }
                <div class="hint">
                    Взнос с <strong>одного игрока</strong> или с одной команды (если командная игра).
                </div>
            </div>
        </div>

        <div class="control-group">
            <label class="control-label" for="IsMain">
                Форум
            </label>
            <div class="controls">
                <div id="ForumWrapper" class="forum-select">
                    @Html.Action("GetForum", "Tournament", new { id = Model.ForumID })
                </div>
                @Html.ValidationMessage("Forum")
                <div class="hint">
                    Выберите или добавьте <strong>ветку на форуме</strong>, в которой
                    будет проходить общение по данному турниру.
                </div>
            </div>
        </div>
        <div class="control-group">
            <label class="control-label">
                Тип сетки турнира
            </label>
            <div class="controls">
                @if (Model.Status == 0 || Model.Status == (int)turniri.Model.Tournament.StatusEnum.Created)
                {
                    @Html.DropDownList("TournamentType", Model.TournamentTypeSelectList, new { @class = "input-xlarge" })
                    <div class="hint no-absolute">
                        Турнирная сетка может быть четырех видов:
                        <ol>
                            <li>
                                <strong>Сингл-элиминейшн</strong> &mdash; это олимпийская система (плейофф), в которой
                                участник выбывает после перового же проигрыша.
                            </li>
                            <li>
                                <strong>Дабл-элиминейшн</strong> &mdash; это олимпийская система с выбыванием после
                                двух поражений.
                            </li>
                            <li>
                                <strong>Каждый с каждым</strong> &mdash; это круговая система, в которой учасники
                                играют каждые с каждым.
                            </li>
                            <li>
                                <strong>Группвой турнир + плейофф</strong> &mdash; это система, состоящая из двух
                                раундов. Игр каждый с каждым в группах, после чего вышедшие из группы играли в плейофф.
                            </li>
                        </ol>
                    </div>
                }
                else
                {
                    @Html.Hidden("TournamentType", Model.TournamentType)
                    <span class="text">@Model.TournamentTypeSelectList.FirstOrDefault(p => p.Selected).Text</span>
                }
            </div>
        </div>
        <div id="GroupWrapper">
            <div class="control-group">
                <label class="control-label">
                    Кол-во групп
                </label>
                <div class="controls">
                    @Html.TextBox("GroupCount", Model.GroupCount)
                    <div class="hint">
                        Общее <strong>количество</strong> групп для сетки типа Группа + плейофф
                    </div>
                </div>
            </div>
            <div class="control-group">
                <label class="control-label">
                    Игроков в группе
                </label>
                <div class="controls">
                    @Html.TextBox("PlayersInGroup", Model.PlayersInGroup)
                    <div class="hint"><strong>Размер</strong> каждой группы</div>
                </div>
            </div>
            <div class="control-group">
                <label class="control-label">
                    Выходят из группы
                </label>
                <div class="controls">
                    @Html.TextBox("ExitFromGroup", Model.ExitFromGroup)
                    <div class="hint">
                        Сколько команд <strong>выходят из группы</strong> в этап плейофф
                    </div>
                </div>
            </div>
            <div class="control-group">
                <label class="control-label" for="Toss">
                    Жеребьевка (вкл\выкл)
                </label>
                <div class="controls">
                    @Html.CheckBox("Toss", Model.Toss)
                    <div class="hint">
                        Необходимо ли <strong>ручное выставление</strong> игроков/команд в
                        каждой группе
                    </div>
                </div>
            </div>
        </div>
        <div id="NonGroupWrapper">
            <div class="control-group">
                <label class="control-label">
                    Максимальное кол-во участников
                </label>
                <div class="controls">
                    @Html.TextBox("PlayersCount", Model.PlayersCount, new { @class = "input-xlarge" })
                    @Html.ValidationMessage("ParticipantsCount")
                    <div class="hint">Максимальное количество <strong>участников турнира</strong></div>
                </div>
            </div>
        </div>
        <div class="control-group">
            <label class="control-label" for="IsTeam">Тип турнира</label>
            <div class="controls">
                @if (Model.Status == 0 || Model.Status == (int)turniri.Model.Tournament.StatusEnum.Created)
                {
                    @Html.DropDownList("GroupTeam", Model.SelectListGroupTeam, new { @class = "input-xlarge" })
                    <div class="hint no-absolute">
                        Турнир может быть четырех видов по <strong>типу участия</strong>:
                        <ol>
                            <li><strong>Одиночный</strong> &mdash; регистрируется один учасник.</li>
                            <li>
                                <strong>Одиночный для участников команд</strong> &mdash; регистрируется один учасник,
                                но он обязан состоять в команде и его достижение добавляются в командные.
                            </li>
                            <li>
                                <strong>Шляпный</strong> &mdash; любой участник либо регистрирует команду либо добавляется
                                в уже существующую
                            </li>
                            <li>
                                <strong>Командный</strong> &mdash; капитаны групп регистрируют команды и составляют
                                ростер.
                            </li>
                        </ol>
                    </div>
                }
                else
                {
                    @Html.Hidden("GroupTeam", Model.GroupTeam)
                    <span class="text">@Model.SelectListGroupTeam.FirstOrDefault(p => p.Selected).Text</span>
                }
            </div>
        </div>
        <div class="control-group" id="TeamCountWrapper">
            <label class="control-label" for="TeamCount">Количество игроков</label>
            <div class="controls">
                @if (Model.Status == 0 || Model.Status == (int)turniri.Model.Tournament.StatusEnum.Created)
                {
                    @Html.TextBox("TeamCount", Model.TeamCount)
                    @Html.ValidationMessage("TeamCount")
                    <div class="hint">
                        <strong>Количество игроков</strong> в командном ростере (не считая
                        замен)
                    </div>
                }
                else
                {
                    @Html.Hidden("TeamCount", Model.TeamCount)
                    @Model.TeamCount
                }
            </div>
        </div>
        <div class="control-group" id="HotReplacementWrapper">
            <label class="control-label" for="HotReplacement">Количество замен</label>
            <div class="controls">
                @if (Model.Status == 0 || Model.Status == (int)turniri.Model.Tournament.StatusEnum.Created)
                {
                    @Html.TextBox("HotReplacement", Model.HotReplacement)
                    @Html.ValidationMessage("HotReplacement")
                    <div class="hint no-absolute">
                        <strong>Количество замен</strong> в течении всего турнира.
                        Если кол-во замен <em>неограниченно</em>, оставьте поле пустым, если замены <em>запрещены</em>
                        поставьте 0
                    </div>
                }
                else
                {
                    @Html.Hidden("HotReplacement", Model.HotReplacement)
                    @Model.HotReplacement
                }
            </div>
        </div>
        <div class="control-group">
            <label class="control-label">
                Минимальный уровень
            </label>
            <div class="controls">
                @Html.TextBox("MinLevel", Model.MinLevel, new { @class = "input-xlarge" })
                @Html.ValidationMessage("MinLevel")
                <div class="hint">
                    Минимальный и максимальный <strong>уровень</strong> игрока (капитана)
                    для участия в этом турнире
                </div>
            </div>
        </div>
        <div class="control-group">
            <label class="control-label">
                Максимальный уровень
            </label>
            <div class="controls">
                @Html.TextBox("MaxLevel", Model.MaxLevel, new { @class = "input-xlarge" })
                @Html.ValidationMessage("MinLevel")
            </div>
        </div>
        <div class="spoiler">
            <span>Дополнительные условия</span>
            @Html.Hidden("TournamentCondition.ID", Model.TournamentCondition.ID)
            <div class="wrapper hidden">
                <div class="control-group">
                    <label class="control-label" for="TournamentCondition_FirstName">
                        Заполено имя
                    </label>
                    <div class="controls">
                        @Html.CheckBox("TournamentCondition.FirstName", Model.TournamentCondition.FirstName)
                        <div class="hint">
                            Укажите <strong>дополнительные условия</strong> участия в турнире:
                            <ol>
                                <li>Реальное имя</li>
                                <li>Реальная фамилия</li>
                                <li>Скайп пользователя</li>
                                <li>Playstation ID</li>
                                <li>Xbox Gametag</li>
                                <li>EA Account</li>
                                <li>Steam Account</li>
                                <li>Garena Account</li>
                                <li>Vk</li>
                            </ol>
                        </div>
                    </div>
                </div>
                <div class="control-group">
                    <label class="control-label" for="TournamentCondition_LastName">
                        Заполена фамилия
                    </label>
                    <div class="controls">
                        @Html.CheckBox("TournamentCondition.LastName", Model.TournamentCondition.LastName)
                    </div>
                </div>
                <div class="control-group">
                    <label class="control-label" for="TournamentCondition_Skype">
                        Заполен скайп
                    </label>
                    <div class="controls">
                        @Html.CheckBox("TournamentCondition.Skype", Model.TournamentCondition.Skype)
                    </div>
                </div>
                <div class="control-group">
                    <label class="control-label" for="TournamentCondition_ICQ">
                        Заполен ICQ
                    </label>
                    <div class="controls">
                        @Html.CheckBox("TournamentCondition.ICQ", Model.TournamentCondition.ICQ)
                    </div>
                </div>
                <div class="control-group">
                    <label class="control-label" for="TournamentCondition_PlaystationID">
                        Заполен Playstation ID
                    </label>
                    <div class="controls">
                        @Html.CheckBox("TournamentCondition.PlaystationID", Model.TournamentCondition.PlaystationID)
                    </div>
                </div>
                <div class="control-group">
                    <label class="control-label" for="TournamentCondition_XboxGametag">
                        Заполен Xbox Gametag
                    </label>
                    <div class="controls">
                        @Html.CheckBox("TournamentCondition.XboxGametag", Model.TournamentCondition.XboxGametag)
                    </div>
                </div>
                <div class="control-group">
                    <label class="control-label" for="TournamentCondition_EAAccount">
                        Заполен EA Account
                    </label>
                    <div class="controls">
                        @Html.CheckBox("TournamentCondition.EAAccount", Model.TournamentCondition.EAAccount)
                    </div>
                </div>
                <div class="control-group">
                    <label class="control-label" for="TournamentCondition_SteamAccount">
                        Заполен Steam Account
                    </label>
                    <div class="controls">
                        @Html.CheckBox("TournamentCondition.SteamAccount", Model.TournamentCondition.SteamAccount)
                    </div>
                </div>
                <div class="control-group">
                    <label class="control-label" for="TournamentCondition_GarenaAccount">
                        Заполен Garena Account
                    </label>
                    <div class="controls">
                        @Html.CheckBox("TournamentCondition.GarenaAccount", Model.TournamentCondition.GarenaAccount)
                    </div>
                </div>
                <div class="control-group">
                    <label class="control-label" for="TournamentCondition_Vk">
                        Заполен Vk
                    </label>
                    <div class="controls">
                        @Html.CheckBox("TournamentCondition.Vk", Model.TournamentCondition.Vk)
                    </div>
                </div>
            </div>
        </div>
        <div class="control-group">
            <label class="control-label">
                Дата начала регистрации
            </label>
            <div class="controls">
                @Html.TextBox("OpenRegistrationDate", Model.OpenRegistrationDate.ToString("dd.MM.yyyy"), new { @class = "input-xlarge datePicker" })
                @Html.ValidationMessage("OpenRegistrationDate")
                <div class="hint">
                    Укажите дату начала и конца <strong>регистрации</strong> в турнире
                </div>
            </div>
        </div>
        <div class="control-group">
            <label class="control-label">
                Дата конца регистрации
            </label>
            <div class="controls">
                @Html.TextBox("CloseRegistrationDate", Model.CloseRegistrationDate.ToString("dd.MM.yyyy"), new { @class = "input-xlarge datePicker" })
                @Html.ValidationMessage("CloseRegistrationDate")
            </div>
        </div>
        <div class="control-group">
            <label class="control-label">
                Дата начала игр
            </label>
            <div class="controls">
                @Html.TextBox("BeginDate", Model.BeginDate.ToString("dd.MM.yyyy"), new { @class = "input-xlarge datePicker" })
                @Html.ValidationMessage("BeginDate")
                <div class="hint">Укажите дату начала и конца <strong>игр</strong> в турнире</div>
            </div>
        </div>
        <div class="control-group">
            <label class="control-label">
                Дата конца игр
            </label>
            <div class="controls">
                @Html.TextBox("EndDate", Model.EndDate.ToString("dd.MM.yyyy"), new { @class = "input-xlarge datePicker" })
                @Html.ValidationMessage("EndDate")
            </div>
        </div>
        <div class="control-group">
            <label class="control-label" for="IsRoundForPoints">
                Игра со счетом
            </label>
            <div class="controls">
                @Html.CheckBox("IsRoundForPoints", Model.IsRoundForPoints)
                <div class="hint">
                    В этом турнире ведется <strong>командный счет (10:3 например)</strong>
                    или просто <em>выигрыш/проигрыш</em>
                </div>
            </div>
        </div>

        <div class="control-group">
            <label class="control-label">
                Кол-во игр в матче
            </label>
            <div class="controls">
                @Html.DropDownList("CountRound", Model.CountRoundSelectList)
                <div class="hint no-absolute">
                    Задайте количество раундов в матче: <strong>
                        одна или
                        до двух побед
                    </strong>.
                    Финальные игры в сетке плей-офф проводятся в один раунт (как в лиге чемпионов УЕФА)
                </div>
            </div>
        </div>
        <div class="control-group" id="HostGuestWrapper">
            <label class="control-label" for="HostGuest">
                Игры дома/в гостях
            </label>
            <div class="controls">
                @Html.CheckBox("HostGuest", Model.HostGuest)
                <div class="hint">
                    Проводятся ли игры дома/в гостях. <strong>Важно для футбольных игр.</strong>
                </div>
            </div>
        </div>
        <div class="control-group" id="DoubleGoalInGuestWrapper">
            <label class="control-label" for="DoubleGoalInGuest">
                Преимущество гола в гостях
            </label>
            <div class="controls">
                @Html.CheckBox("DoubleGoalInGuest", Model.DoubleGoalInGuest)
                <div class="hint">
                    Есть ли преимущество гола в гостях. <strong>
                        Важно для футбольных
                        игр.
                    </strong>
                </div>
            </div>
        </div>
        <div class="control-group">
            <label class="control-label">
                Очки за выигрыш матча в турнире
            </label>
            <div class="controls">
                @Html.TextBox("SingleWinPoint", Model.SingleWinPoint)
                @Html.ValidationMessage("SingleWinPoint")
                <div class="hint">
                    Сколько <strong>рейтинговых очков</strong> будет начислено за выигрыш
                    (не технический) одного матча (не раунда) в данном турнире.
                </div>
            </div>
        </div>
        <div class="control-group">
            <label class="control-label">
                Очки за ничью матча в турнире
            </label>
            <div class="controls">
                @Html.TextBox("SingleDrawPoint", Model.SingleDrawPoint)
                @Html.ValidationMessage("SingleDrawPoint")
                <div class="hint">
                    Сколько <strong>рейтинговых очков</strong> будет начислено за ничью
                    одного матча (не раунда) в данном турнире.
                </div>
            </div>
        </div>
        <div class="control-group">
            <label class="control-label">
                Правила турнира
            </label>
            <div class="controls">
                @Html.TextArea("Rules", Model.Rules, new { @class = "input-xlarge html-description" })
                @Html.ValidationMessage("Rules")
            </div>
        </div>
        <div class="control-group">
            <label class="control-label">
                Дополнительная информация
            </label>
            <div class="controls">
                @Html.TextArea("Description", Model.Description, new { @class = "input-xlarge html-description" })
                @Html.ValidationMessage("Description")
            </div>
        </div>
        <div class="control-group">
            <label class="control-label">
                Администраторы
            </label>
            <div class="controls">
                @Html.ListBox("Admins", Model.SelectListTournamentAdmins, new { @class = "input-xlarge chzn-select" })
                <div class="hint no-absolute">
                    Назначьте <strong>администраторов турнира</strong> (ими по умолчанию
                    уже являются администраторы игры этого турнира). Их права: <em>
                        выставление счета, редактирование
                        данных турнира, модерирование турнира
                    </em>
                </div>
            </div>
        </div>
        <div class="control-group">
            <label class="control-label">
                Модераторы
            </label>
            <div class="controls">
                @Html.ListBox("Moderators", Model.SelectListTournamentModerators, new { @class = "input-xlarge chzn-select" })
                <div class="hint no-absolute">
                    Назначьте <strong>модераторов турнира</strong> (ими по умолчанию
                    уже являются модераторы игры этого турнира). Их права: <em>
                        редактирование комментариев,
                        чата, ветки форума
                    </em>
                </div>
            </div>
        </div>
        <div class="control-group">
            <label class="control-label">
                Игроки
            </label>
            <div class="controls">
                @Html.ValidationMessage("Players")
                @if (Model.MatchesCount == 0 && Model.LeagueID == null)
                {
                    @Html.ListBox("Players", Model.SelectListPlayers, new { @class = "input-xlarge chzn-select" })
                }
                else
                {
                    <span class="text">
                        @foreach (var item in Model.SelectListPlayers.Where(p => p.Selected))
                        {
                            <text>@item.Text,</text>
                        }
                    </span>
                }
                <div class="hint no-absolute">
                    @if (Model.LeagueID != null)
                    {
                        <br />
                        <em>
                            Для турниров лиги нельзя тут изменять список игроков <br/><a href="@Url.Action("Players", "League", new {id = Model.LeagueID})">А тут можно</a>
                        </em>
                    }
                    else
                    {
                        <span>
                            Задайте <strong>игроков/или команды</strong>, которые участвуют в
                            этом турнире. Для добавление команды (в командном типе турнира) нужно добавить капитана
                            из этой команды.
                        </span>
                    }
                </div>
            </div>
        </div>
        <div class="spoiler">
            <span>SEO</span>
            <div class="wrapper hidden">
                <div class="control-group">
                    <label class="control-label" for="Keywords">
                        Ключевые слова
                    </label>
                    <div class="controls">
                        @Html.TextArea("Keywords", Model.Keywords, new { @class = "input-xlarge" })
                    </div>
                </div>
                <div class="control-group">
                    <label class="control-label" for="Keywords">
                        Meta-описание
                    </label>
                    <div class="controls">
                        @Html.TextArea("MetaDescription", Model.MetaDescription, new { @class = "input-xlarge" })
                    </div>
                </div>
            </div>
        </div>

        <div class="form-actions">
            <button type="submit" class="btn btn-primary">
                Сохранить
            </button>
            @Html.ActionLink("Отменить", "Index", null, null, new { @class = "btn" })
        </div>
    </fieldset>
}
